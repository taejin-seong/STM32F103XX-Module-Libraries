/*
 * max7219_8x8_led.h
 *
 *  Created on: 2022. 3. 23.
 *      Author: sungt
 */

#ifndef SRC_COMMON_HW_INCLUDE_CLCD_H_
#define SRC_COMMON_HW_INCLUDE_CLCD_H_

#include "hw_def.h"


#ifdef _USE_HW_DOT_MATRIX






/* Select the SPIx port, you used */
//#define DOT_MATRIX_SPI_PORT                         hspi1
#define DOT_MATRIX_SPI_PORT                       hspi2


/* GPIO configuration */
													  /* Dot Matrix GPIO Pin 변경 시 수정 (1) */

#define DOT_MATRIX_SPI_GPIO_CLK_ENABLE()                __HAL_RCC_GPIOA_CLK_ENABLE()
#define DOT_MATRIX_SPI_GPIO_PORT                        GPIOA
#define DOT_MATRIX1_SPI_SCK_PIN                         GPIO_PIN_13
#define DOT_MATRIX_SPI_MOSI_PIN                         GPIO_PIN_15

#define DOT_MATRIX_SPI_CS_CLK_ENABLE()                  __HAL_RCC_GPIOB_CLK_ENABLE()
#define DOT_MATRIX_SPI_CS_PORT                          GPIOB
#define DOT_MATRIX_SPI_CS_PIN                           GPIO_PIN_8

#define DOT_MATRIX_SPI_CS_ENABLE()                      HAL_GPIO_WritePin(DOT_MATRIX_SPI_CS_PORT, DOT_MATRIX_SPI_CS_PIN, GPIO_PIN_RESET)
#define DOT_MATRIX_SPI_CS_DISABLE()                     HAL_GPIO_WritePin(DOT_MATRIX_SPI_CS_PORT, DOT_MATRIX_SPI_CS_PIN, GPIO_PIN_SET)

/* MAX7219 Register Address */


#define NO_OP											0x00
#define DIGIT_0											0x01
#define DIGIT_1											0x02
#define DIGIT_2											0x03
#define DIGIT_3											0x04
#define DIGIT_4											0x05
#define DIGIT_5											0x06
#define DIGIT_6											0x07
#define DIGIT_7											0x08
#define DECODE_MODE										0x09
#define INTENSITY										0x0A
#define SCAN_LIMIT										0x0B
#define SHUTDOWN										0x0C
#define DISPLAY_TEST									0x0F

/* Dot Matrix State ON/OFF */

#define MATRIX_ON										1
#define MATRIX_OFF										0

#define ML_NB_MAX7219									4


/* ASCII table */
const static uint8_t ASCII[95][8] = {
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char
        { 0x00, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00 },  // Code pour char !
        { 0x00, 0x00, 0x06, 0x08, 0x00, 0x06, 0x08, 0x00 },  // Code pour char "
        { 0x00, 0x24, 0x7E, 0x24, 0x24, 0x7E, 0x24, 0x00 },  // Code pour char #
        { 0x00, 0x26, 0x49, 0x49, 0xFF, 0x49, 0x32, 0x00 },  // Code pour char $
        { 0x00, 0x46, 0x26, 0x10, 0x08, 0x64, 0x62, 0x00 },  // Code pour char %
        { 0x00, 0x70, 0x8E, 0x89, 0x99, 0x76, 0xC0, 0x00 },  // Code pour char &
        { 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char '
        { 0x00, 0x7E, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char (
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x7E, 0x00 },  // Code pour char )
        { 0x00, 0x00, 0x07, 0x05, 0x07, 0x00, 0x00, 0x00 },  // Code pour char * replaced by °            { 0x00, 0x00, 0x0A, 0x04, 0x0A, 0x00, 0x00, 0x00 },
        { 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00 },  // Code pour char +
        { 0x00, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00 },  // Code pour char ,
        { 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00 },  // Code pour char -
        { 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00 },  // Code pour char .
        { 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 },  // Code pour char /
        { 0x00, 0x7E, 0xC1, 0xB1, 0x8D, 0x83, 0x7E, 0x00 },  // Code pour char 0
        { 0x00, 0x04, 0x02, 0x01, 0xFF, 0x00, 0x00, 0x00 },  // Code pour char 1
        { 0x00, 0xE6, 0x91, 0x91, 0x89, 0x89, 0x86, 0x00 },  // Code pour char 2
        { 0x00, 0x42, 0x81, 0x89, 0x89, 0x89, 0x76, 0x00 },  // Code pour char 3
        { 0x00, 0x30, 0x28, 0x24, 0x22, 0xFF, 0x20, 0x00 },  // Code pour char 4
        { 0x00, 0x4F, 0x89, 0x89, 0x89, 0x89, 0x71, 0x00 },  // Code pour char 5
        { 0x00, 0x7E, 0x89, 0x89, 0x89, 0x89, 0x72, 0x00 },  // Code pour char 6
        { 0x00, 0x01, 0x01, 0xF1, 0x09, 0x05, 0x03, 0x00 },  // Code pour char 7
        { 0x00, 0x76, 0x89, 0x89, 0x89, 0x89, 0x76, 0x00 },  // Code pour char 8
        { 0x00, 0x4E, 0x91, 0x91, 0x91, 0x91, 0x7E, 0x00 },  // Code pour char 9
        { 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00 },  // Code pour char :
        { 0x00, 0x00, 0x80, 0x68, 0x00, 0x00, 0x00, 0x00 },  // Code pour char ;
        { 0x00, 0x00, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00 },  // Code pour char <
        { 0x00, 0x00, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00 },  // Code pour char =
        { 0x00, 0x00, 0x00, 0x44, 0x28, 0x10, 0x00, 0x00 },  // Code pour char >
        { 0x00, 0x06, 0x01, 0xB1, 0x09, 0x09, 0x06, 0x00 },  // Code pour char ?
        { 0x00, 0x7E, 0x99, 0xA5, 0xA5, 0xB9, 0x5E, 0x00 },  // Code pour char @
        { 0x00, 0xE0, 0x1C, 0x13, 0x13, 0x1C, 0xE0, 0x00 },  // Code pour char A
        { 0x00, 0xFF, 0x89, 0x89, 0x89, 0x8E, 0x70, 0x00 },  // Code pour char B
        { 0x00, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x42, 0x00 },  // Code pour char C
        { 0x00, 0xFF, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x00 },  // Code pour char D
        { 0x00, 0xFF, 0x89, 0x89, 0x89, 0x81, 0x81, 0x00 },  // Code pour char E
        { 0x00, 0xFF, 0x09, 0x09, 0x09, 0x01, 0x01, 0x00 },  // Code pour char F
        { 0x00, 0x7E, 0x81, 0x91, 0x91, 0x51, 0xF2, 0x00 },  // Code pour char G
        { 0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00 },  // Code pour char H
        { 0x00, 0x00, 0x81, 0xFF, 0x81, 0x00, 0x00, 0x00 },  // Code pour char I
        { 0x00, 0x60, 0x80, 0x80, 0x80, 0x80, 0x7F, 0x00 },  // Code pour char J
        { 0x00, 0xFF, 0x08, 0x18, 0x24, 0x42, 0x81, 0x00 },  // Code pour char K
        { 0x00, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00 },  // Code pour char L
        { 0x00, 0xFF, 0x02, 0x0C, 0x0C, 0x02, 0xFF, 0x00 },  // Code pour char M
        { 0x00, 0xFF, 0x03, 0x0C, 0x30, 0xC0, 0xFF, 0x00 },  // Code pour char N
        { 0x00, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x7E, 0x00 },  // Code pour char O
        { 0x00, 0xFF, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00 },  // Code pour char P
        { 0x00, 0x7E, 0x81, 0x81, 0xA1, 0x41, 0xBE, 0x00 },  // Code pour char Q
        { 0x00, 0xFF, 0x09, 0x09, 0x09, 0x39, 0xC6, 0x00 },  // Code pour char R
        { 0x00, 0x46, 0x89, 0x89, 0x89, 0x89, 0x72, 0x00 },  // Code pour char S
        { 0x00, 0x00, 0x01, 0x01, 0xFF, 0x01, 0x01, 0x00 },  // Code pour char T
        { 0x00, 0x7F, 0x80, 0x80, 0x80, 0x80, 0x7F, 0x00 },  // Code pour char U
        { 0x00, 0x0F, 0x30, 0xC0, 0xC0, 0x30, 0x0F, 0x00 },  // Code pour char V
        { 0x00, 0x7F, 0x80, 0x70, 0x70, 0x80, 0x7F, 0x00 },  // Code pour char W
        { 0x00, 0xC3, 0x24, 0x18, 0x18, 0x24, 0xC3, 0x00 },  // Code pour char X
        { 0x00, 0x07, 0x08, 0xF0, 0xF0, 0x08, 0x07, 0x00 },  // Code pour char Y
        { 0x00, 0xC1, 0xA1, 0x91, 0x89, 0x85, 0x83, 0x00 },  // Code pour char Z
        { 0x00, 0xFF, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char [
        { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00 },  // Code pour char BackSlash
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0x00 },  // Code pour char ]
        { 0x00, 0x00, 0x04, 0x02, 0x02, 0x04, 0x00, 0x00 },  // Code pour char ^
        { 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },  // Code pour char _
        { 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00 },  // Code pour char `
        { 0x00, 0x00, 0x20, 0x54, 0x54, 0x78, 0x00, 0x00 },  // Code pour char a
        { 0x00, 0x00, 0x7E, 0x48, 0x48, 0x30, 0x00, 0x00 },  // Code pour char b
        { 0x00, 0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00 },  // Code pour char c
        { 0x00, 0x00, 0x30, 0x48, 0x48, 0x7E, 0x00, 0x00 },  // Code pour char d
        { 0x00, 0x00, 0x38, 0x54, 0x54, 0x58, 0x00, 0x00 },  // Code pour char e
        { 0x00, 0x00, 0x7C, 0x0A, 0x0A, 0x02, 0x00, 0x00 },  // Code pour char f
        { 0x00, 0x00, 0x18, 0xA4, 0xA8, 0x7C, 0x00, 0x00 },  // Code pour char g
        { 0x00, 0x00, 0x7E, 0x08, 0x08, 0x70, 0x00, 0x00 },  // Code pour char h
        { 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00 },  // Code pour char i
        { 0x00, 0x00, 0x80, 0x80, 0x7A, 0x00, 0x00, 0x00 },  // Code pour char j
        { 0x00, 0x00, 0x7E, 0x10, 0x28, 0x40, 0x00, 0x00 },  // Code pour char k
        { 0x00, 0x00, 0x00, 0x7E, 0x40, 0x00, 0x00, 0x00 },  // Code pour char l
        { 0x00, 0x7C, 0x08, 0x04, 0x78, 0x04, 0x78, 0x00 },  // Code pour char m
        { 0x00, 0x00, 0x7C, 0x08, 0x04, 0x78, 0x00, 0x00 },  // Code pour char n
        { 0x00, 0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00 },  // Code pour char o
        { 0x00, 0x00, 0xFC, 0x28, 0x24, 0x18, 0x00, 0x00 },  // Code pour char p
        { 0x00, 0x00, 0x18, 0x24, 0x28, 0xFC, 0x00, 0x00 },  // Code pour char q
        { 0x00, 0x00, 0x7C, 0x08, 0x04, 0x08, 0x00, 0x00 },  // Code pour char r
        { 0x00, 0x00, 0x08, 0x54, 0x54, 0x20, 0x00, 0x00 },  // Code pour char s
        { 0x00, 0x00, 0x3E, 0x48, 0x40, 0x00, 0x00, 0x00 },  // Code pour char t
        { 0x00, 0x00, 0x3C, 0x40, 0x40, 0x3C, 0x00, 0x00 },  // Code pour char u
        { 0x00, 0x00, 0x1C, 0x60, 0x60, 0x1C, 0x00, 0x00 },  // Code pour char v
        { 0x00, 0x3C, 0x40, 0x70, 0x70, 0x40, 0x3C, 0x00 },  // Code pour char w
        { 0x00, 0x00, 0x6C, 0x10, 0x10, 0x6C, 0x00, 0x00 },  // Code pour char x
        { 0x00, 0x00, 0x0C, 0x90, 0x90, 0x7C, 0x00, 0x00 },  // Code pour char y
        { 0x00, 0x00, 0x64, 0x54, 0x54, 0x4C, 0x00, 0x00 },  // Code pour char z
        { 0x00, 0x00, 0x08, 0x76, 0x81, 0x00, 0x00, 0x00 },  // Code pour char {
        { 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00 },  // Code pour char |
        { 0x00, 0x00, 0x00, 0x81, 0x76, 0x08, 0x00, 0x00 },  // Code pour char }
        { 0x80, 0x44, 0x34, 0xFB, 0x34, 0x44, 0x80, 0x00 }   // Code pour char ~   /* Replaced by the hermine old: { 0x00, 0x00, 0x10, 0x08, 0x10, 0x08, 0x00, 0x00 }*/
        };







void dotmatrix_Init(void);

void dotmatrix_DisplayTestMode(uint8_t OnOff);
bool dotmatrix_DisplayOnOff(uint8_t OnOff);
void dotmatrix_SetIntensity(uint8_t intensity);
uint8_t dotmatrix_Position(uint8_t index, uint8_t position);
bool dotmatrix_Str(char string[]);


#endif /* _USE_HW_DOT_MATRIX */

#endif /* SRC_COMMON_HW_INCLUDE_CLCD_H_ */
