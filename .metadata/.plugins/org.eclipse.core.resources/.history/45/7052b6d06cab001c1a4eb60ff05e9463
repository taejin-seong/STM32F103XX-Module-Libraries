/**
  ******************************************************************************
  * File Name          : matriceLed.c
  * Description        : This file provides code for the utilisation of
  * 					 the LED matrice
  ******************************************************************************
  * 3-Clause BSD License
  *
  * Copyright 2020 - Bruno DIRAISON
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *
  * 1. Redistributions of source code must retain the above copyright notice, this list
  * of conditions and the following disclaimer.
  *
  * 2. Redistributions in binary form must reproduce the above copyright notice, this
  * list of conditions and the following disclaimer in the documentation and/or other
  * materials provided with the distribution.
  *
  * 3. Neither the name of the copyright holder nor the names of its contributors may
  * be used to endorse or promote products derived from this software without specific
  * prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "dot_matrix.h"


/* Macro ---------------------------------------------------------------------*/
#define MIN(A,B)  (A<B?A:B)

/* Variables -----------------------------------------------------------------*/
/* SPI handler declaration */
SPI_HandleTypeDef SpiHandle;

/* Shutdown status */
uint8_t MatriceOnOff = 0;

/* Buffer to send data over SPI */
uint8_t control[4 * ML_NB_MAX7219];

/*  Buffer that contains the string to display in bit format.
 *  Horizontal line in this table correspond to a vertical line on LED matrice */
#define NB_MAX_CHAR_IN_STRING 50
#define MATRIX_COLUMN_NUMBER (8 * 4)
uint8_t displayBuffer[8*NB_MAX_CHAR_IN_STRING];


/* ASCII table */
const uint8_t ASCII[95][8] = {
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char
        { 0x00, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00 },  // Code pour char !
        { 0x00, 0x00, 0x06, 0x08, 0x00, 0x06, 0x08, 0x00 },  // Code pour char "
        { 0x00, 0x24, 0x7E, 0x24, 0x24, 0x7E, 0x24, 0x00 },  // Code pour char #
        { 0x00, 0x26, 0x49, 0x49, 0xFF, 0x49, 0x32, 0x00 },  // Code pour char $
        { 0x00, 0x46, 0x26, 0x10, 0x08, 0x64, 0x62, 0x00 },  // Code pour char %
        { 0x00, 0x70, 0x8E, 0x89, 0x99, 0x76, 0xC0, 0x00 },  // Code pour char &
        { 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char '
        { 0x00, 0x7E, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char (
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x7E, 0x00 },  // Code pour char )
        { 0x00, 0x00, 0x07, 0x05, 0x07, 0x00, 0x00, 0x00 },  // Code pour char * replaced by Â°            { 0x00, 0x00, 0x0A, 0x04, 0x0A, 0x00, 0x00, 0x00 },
        { 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00 },  // Code pour char +
        { 0x00, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00 },  // Code pour char ,
        { 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00 },  // Code pour char -
        { 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00 },  // Code pour char .
        { 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 },  // Code pour char /
        { 0x00, 0x7E, 0xC1, 0xB1, 0x8D, 0x83, 0x7E, 0x00 },  // Code pour char 0
        { 0x00, 0x04, 0x02, 0x01, 0xFF, 0x00, 0x00, 0x00 },  // Code pour char 1
        { 0x00, 0xE6, 0x91, 0x91, 0x89, 0x89, 0x86, 0x00 },  // Code pour char 2
        { 0x00, 0x42, 0x81, 0x89, 0x89, 0x89, 0x76, 0x00 },  // Code pour char 3
        { 0x00, 0x30, 0x28, 0x24, 0x22, 0xFF, 0x20, 0x00 },  // Code pour char 4
        { 0x00, 0x4F, 0x89, 0x89, 0x89, 0x89, 0x71, 0x00 },  // Code pour char 5
        { 0x00, 0x7E, 0x89, 0x89, 0x89, 0x89, 0x72, 0x00 },  // Code pour char 6
        { 0x00, 0x01, 0x01, 0xF1, 0x09, 0x05, 0x03, 0x00 },  // Code pour char 7
        { 0x00, 0x76, 0x89, 0x89, 0x89, 0x89, 0x76, 0x00 },  // Code pour char 8
        { 0x00, 0x4E, 0x91, 0x91, 0x91, 0x91, 0x7E, 0x00 },  // Code pour char 9
        { 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00 },  // Code pour char :
        { 0x00, 0x00, 0x80, 0x68, 0x00, 0x00, 0x00, 0x00 },  // Code pour char ;
        { 0x00, 0x00, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00 },  // Code pour char <
        { 0x00, 0x00, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00 },  // Code pour char =
        { 0x00, 0x00, 0x00, 0x44, 0x28, 0x10, 0x00, 0x00 },  // Code pour char >
        { 0x00, 0x06, 0x01, 0xB1, 0x09, 0x09, 0x06, 0x00 },  // Code pour char ?
        { 0x00, 0x7E, 0x99, 0xA5, 0xA5, 0xB9, 0x5E, 0x00 },  // Code pour char @
        { 0x00, 0xE0, 0x1C, 0x13, 0x13, 0x1C, 0xE0, 0x00 },  // Code pour char A
        { 0x00, 0xFF, 0x89, 0x89, 0x89, 0x8E, 0x70, 0x00 },  // Code pour char B
        { 0x00, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x42, 0x00 },  // Code pour char C
        { 0x00, 0xFF, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x00 },  // Code pour char D
        { 0x00, 0xFF, 0x89, 0x89, 0x89, 0x81, 0x81, 0x00 },  // Code pour char E
        { 0x00, 0xFF, 0x09, 0x09, 0x09, 0x01, 0x01, 0x00 },  // Code pour char F
        { 0x00, 0x7E, 0x81, 0x91, 0x91, 0x51, 0xF2, 0x00 },  // Code pour char G
        { 0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00 },  // Code pour char H
        { 0x00, 0x00, 0x81, 0xFF, 0x81, 0x00, 0x00, 0x00 },  // Code pour char I
        { 0x00, 0x60, 0x80, 0x80, 0x80, 0x80, 0x7F, 0x00 },  // Code pour char J
        { 0x00, 0xFF, 0x08, 0x18, 0x24, 0x42, 0x81, 0x00 },  // Code pour char K
        { 0x00, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00 },  // Code pour char L
        { 0x00, 0xFF, 0x02, 0x0C, 0x0C, 0x02, 0xFF, 0x00 },  // Code pour char M
        { 0x00, 0xFF, 0x03, 0x0C, 0x30, 0xC0, 0xFF, 0x00 },  // Code pour char N
        { 0x00, 0x7E, 0x81, 0x81, 0x81, 0x81, 0x7E, 0x00 },  // Code pour char O
        { 0x00, 0xFF, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00 },  // Code pour char P
        { 0x00, 0x7E, 0x81, 0x81, 0xA1, 0x41, 0xBE, 0x00 },  // Code pour char Q
        { 0x00, 0xFF, 0x09, 0x09, 0x09, 0x39, 0xC6, 0x00 },  // Code pour char R
        { 0x00, 0x46, 0x89, 0x89, 0x89, 0x89, 0x72, 0x00 },  // Code pour char S
        { 0x00, 0x00, 0x01, 0x01, 0xFF, 0x01, 0x01, 0x00 },  // Code pour char T
        { 0x00, 0x7F, 0x80, 0x80, 0x80, 0x80, 0x7F, 0x00 },  // Code pour char U
        { 0x00, 0x0F, 0x30, 0xC0, 0xC0, 0x30, 0x0F, 0x00 },  // Code pour char V
        { 0x00, 0x7F, 0x80, 0x70, 0x70, 0x80, 0x7F, 0x00 },  // Code pour char W
        { 0x00, 0xC3, 0x24, 0x18, 0x18, 0x24, 0xC3, 0x00 },  // Code pour char X
        { 0x00, 0x07, 0x08, 0xF0, 0xF0, 0x08, 0x07, 0x00 },  // Code pour char Y
        { 0x00, 0xC1, 0xA1, 0x91, 0x89, 0x85, 0x83, 0x00 },  // Code pour char Z
        { 0x00, 0xFF, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Code pour char [
        { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00 },  // Code pour char BackSlash
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFF, 0x00 },  // Code pour char ]
        { 0x00, 0x00, 0x04, 0x02, 0x02, 0x04, 0x00, 0x00 },  // Code pour char ^
        { 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },  // Code pour char _
        { 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00 },  // Code pour char `
        { 0x00, 0x00, 0x20, 0x54, 0x54, 0x78, 0x00, 0x00 },  // Code pour char a
        { 0x00, 0x00, 0x7E, 0x48, 0x48, 0x30, 0x00, 0x00 },  // Code pour char b
        { 0x00, 0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00 },  // Code pour char c
        { 0x00, 0x00, 0x30, 0x48, 0x48, 0x7E, 0x00, 0x00 },  // Code pour char d
        { 0x00, 0x00, 0x38, 0x54, 0x54, 0x58, 0x00, 0x00 },  // Code pour char e
        { 0x00, 0x00, 0x7C, 0x0A, 0x0A, 0x02, 0x00, 0x00 },  // Code pour char f
        { 0x00, 0x00, 0x18, 0xA4, 0xA8, 0x7C, 0x00, 0x00 },  // Code pour char g
        { 0x00, 0x00, 0x7E, 0x08, 0x08, 0x70, 0x00, 0x00 },  // Code pour char h
        { 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00 },  // Code pour char i
        { 0x00, 0x00, 0x80, 0x80, 0x7A, 0x00, 0x00, 0x00 },  // Code pour char j
        { 0x00, 0x00, 0x7E, 0x10, 0x28, 0x40, 0x00, 0x00 },  // Code pour char k
        { 0x00, 0x00, 0x00, 0x7E, 0x40, 0x00, 0x00, 0x00 },  // Code pour char l
        { 0x00, 0x7C, 0x08, 0x04, 0x78, 0x04, 0x78, 0x00 },  // Code pour char m
        { 0x00, 0x00, 0x7C, 0x08, 0x04, 0x78, 0x00, 0x00 },  // Code pour char n
        { 0x00, 0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00 },  // Code pour char o
        { 0x00, 0x00, 0xFC, 0x28, 0x24, 0x18, 0x00, 0x00 },  // Code pour char p
        { 0x00, 0x00, 0x18, 0x24, 0x28, 0xFC, 0x00, 0x00 },  // Code pour char q
        { 0x00, 0x00, 0x7C, 0x08, 0x04, 0x08, 0x00, 0x00 },  // Code pour char r
        { 0x00, 0x00, 0x08, 0x54, 0x54, 0x20, 0x00, 0x00 },  // Code pour char s
        { 0x00, 0x00, 0x3E, 0x48, 0x40, 0x00, 0x00, 0x00 },  // Code pour char t
        { 0x00, 0x00, 0x3C, 0x40, 0x40, 0x3C, 0x00, 0x00 },  // Code pour char u
        { 0x00, 0x00, 0x1C, 0x60, 0x60, 0x1C, 0x00, 0x00 },  // Code pour char v
        { 0x00, 0x3C, 0x40, 0x70, 0x70, 0x40, 0x3C, 0x00 },  // Code pour char w
        { 0x00, 0x00, 0x6C, 0x10, 0x10, 0x6C, 0x00, 0x00 },  // Code pour char x
        { 0x00, 0x00, 0x0C, 0x90, 0x90, 0x7C, 0x00, 0x00 },  // Code pour char y
        { 0x00, 0x00, 0x64, 0x54, 0x54, 0x4C, 0x00, 0x00 },  // Code pour char z
        { 0x00, 0x00, 0x08, 0x76, 0x81, 0x00, 0x00, 0x00 },  // Code pour char {
        { 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00 },  // Code pour char |
        { 0x00, 0x00, 0x00, 0x81, 0x76, 0x08, 0x00, 0x00 },  // Code pour char }
        { 0x80, 0x44, 0x34, 0xFB, 0x34, 0x44, 0x80, 0x00 }   // Code pour char ~   /* Replaced by the hermine old: { 0x00, 0x00, 0x10, 0x08, 0x10, 0x08, 0x00, 0x00 }*/
        };

/* Function prototypes -------------------------------------------------------*/
static uint16_t matriceLed_StoreStringInBuffer( char string[]);
static uint8_t matriceLed_DisplayBuffer( uint8_t *BufferToDisplay);



/*----------------------------------------------------------------------------*/
/* API                                                                        */
/*----------------------------------------------------------------------------*/

/** Configure SPI and GPIO for the matrice Led control
*/
uint8_t dotmatrix_Init(void)
{
	GPIO_InitTypeDef  GPIO_InitStruct;
	uint8_t cpt;
	uint8_t errCode = 0;

	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	SpiHandle.Instance               = SPIx;
	SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
	SpiHandle.Init.Direction         = SPI_DIRECTION_1LINE;
	SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
	SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
	SpiHandle.Init.DataSize          = SPI_DATASIZE_16BIT;
	SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
	SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
	SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
	SpiHandle.Init.CRCPolynomial     = 7;
	//SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	SpiHandle.Init.NSS               = SPI_NSS_SOFT;
	//SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	SpiHandle.Init.Mode = SPI_MODE_MASTER;

	HAL_SPI_DeInit( &SpiHandle);


	/* CS Pin configuration */
    GPIO_InitStruct.Pin       = CS_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
    CS_GPIO_CLK_ENABLE();
    HAL_GPIO_Init(CS_GPIO_PORT, &GPIO_InitStruct);
    /* Set CS to high level */
    //HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

	/* Set CS Pin to High level ==> Not necessary. Done in msp file */
	//CS_GPIO_CLK_ENABLE();
	//HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

	if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
	{
	  /* Initialization Error */
	  return 1;
	}


	HAL_Delay(5);

	/* Set matrix in shutdown mode */

	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = 0x00;
		control[2*cpt + 1] = SHUTDOWN;
	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	errCode = HAL_SPI_Transmit( &SpiHandle, (uint8_t*)control, ML_NB_MAX7219, 5000); // !!!! 2*ML_NB_MAX7219
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

	if( errCode)
		return errCode;

	HAL_Delay(100);

	/* Set normal operation mode */
	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = 0x01;
		control[2*cpt + 1] = SHUTDOWN;
	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	errCode = HAL_SPI_Transmit( &SpiHandle, (uint8_t*)control, ML_NB_MAX7219, 5000); // !!!! 2*ML_NB_MAX7219
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

	if( errCode)
		return errCode;

	HAL_Delay(5);

	/* Set decode mode to no decode */
	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = 0x00;
		control[2*cpt + 1] = DECODE_MODE;
	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	errCode = HAL_SPI_Transmit( &SpiHandle, (uint8_t*)control, ML_NB_MAX7219, 5000);
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
	if( errCode)
		return errCode;

	HAL_Delay(5);

	/* Set default intensity */
	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = 0x00;
		control[2*cpt + 1] = INTENSITY;
	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	errCode = HAL_SPI_Transmit( &SpiHandle, (uint8_t*)control, ML_NB_MAX7219, 5000);
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
	if( errCode)
		return errCode;

	HAL_Delay(5);

	/* Set display to all digit */
	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = 0x07;
		control[2*cpt + 1] = SCAN_LIMIT;

	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	errCode = HAL_SPI_Transmit( &SpiHandle, (uint8_t*)control, ML_NB_MAX7219, 5000);
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
	if( errCode)
		return errCode;

	/* Matrice is ON */
	MatriceOnOff = 1;

  	return 0;
}


uint8_t matriceLed_SwitchOnOff( uint8_t OnOff)
{
	uint8_t cpt;

	if( OnOff)
		OnOff = 0x01;
	else
		OnOff = 0x00;

	/* If already in requested state, just return */
	if( MatriceOnOff == OnOff)
		return 0;

	/* Set display to all digit */
	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = OnOff;
		control[2*cpt + 1] = SHUTDOWN;
	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit( &SpiHandle, control, ML_NB_MAX7219, 5000);
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

	MatriceOnOff = OnOff;

  	return 0;
}


uint8_t matriceLed_DisplayTestMode( uint8_t OnOff)
{
	uint8_t cpt;

	if( OnOff)
		OnOff = 0x01;
	else
		OnOff = 0x00;

	/* Set display to all digit */
	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = OnOff;
		control[2*cpt + 1] = DISPLAY_TEST;
	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit( &SpiHandle, control, ML_NB_MAX7219, 5000);
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

  	return 0;
}

uint8_t matriceLed_SetIntensity( uint8_t intensity)
{
	uint8_t cpt;
	uint8_t errCode = 0;

	intensity = (intensity < 0x10 ? intensity : 0x0F);

	/* Set default intensity */
	for( cpt=0; cpt<ML_NB_MAX7219; cpt++)
	{
		control[2*cpt] = intensity;
		control[2*cpt + 1] = INTENSITY;
	}
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
	errCode = HAL_SPI_Transmit( &SpiHandle, (uint8_t*)control, ML_NB_MAX7219, 5000);
	HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

	return errCode;
}


uint8_t matriceLed_GetDigit( uint8_t index, uint8_t position)
{
	uint8_t cpt = 8;
	uint8_t val = 0;

	while( cpt > 0)
	{
		cpt--;

		val |= ((ASCII[index][cpt] >> position) & 0x01) << (7-cpt);
	}

	return val;
}


/*
 * Return code :
 * 	0	: No problem
 * 	1	: String too long
 */
uint8_t matriceLed_DisplayString( char string[])
{
	uint16_t NbColInMatrix;
	uint8_t bufferColIndex = 0;

	memset( displayBuffer, 0x00, 8*NB_MAX_CHAR_IN_STRING);

	/* First : store the string to display in the matrix memory buffer
	 * It's this matrix that will be displayed. 	 */
	NbColInMatrix = matriceLed_StoreStringInBuffer(string);
	if( !NbColInMatrix)
		return 1;

	/* Second : Display the matrice content */
	bufferColIndex = 0;
	do
	{
		matriceLed_DisplayBuffer(&displayBuffer[bufferColIndex]);
		bufferColIndex++;
	} while( MATRIX_COLUMN_NUMBER < (NbColInMatrix-bufferColIndex));

	return 0;
}



/******************************************************************************
 *****
 *****   Static functions
 *****
 ******************************************************************************/



static uint16_t matriceLed_StoreStringInBuffer( char string[])
{
	uint8_t cptCharString = 0;
	uint8_t cptCol;
	uint8_t NbCharInString = (uint8_t)strlen((const char *)string);
	uint8_t indexInAsciiTable;
	uint16_t bufferIndex = 0;

	if( NB_MAX_CHAR_IN_STRING <= NbCharInString )
		return 1;

	bufferIndex = 0;
	while( cptCharString < NbCharInString)
	{
		indexInAsciiTable = (uint8_t)(string[cptCharString] - ' ');

		for( cptCol=0; cptCol<7; cptCol++)
		{
			displayBuffer[bufferIndex] = ASCII[indexInAsciiTable][cptCol];
			bufferIndex++;
		}

		cptCharString++;
	}

	return bufferIndex;
}


static uint8_t matriceLed_DisplayBuffer( uint8_t *BufferToDisplay)
{
	uint8_t cpt_digit;

	uint8_t module;
	uint16_t bufferColIndex;
	uint8_t col;
	uint8_t buffer[32];


	//matriceLed_SwitchOnOff( MATRICE_OFF);
	bufferColIndex = 0;

	/* Re-arrange data in display buffer */
	for( module = 0; module < 4; module++)
	{
		for( col=0; col<8; col++)
		{
			uint8_t cpt = 8;

			buffer[bufferColIndex] = 0;
			while( cpt > 0)
			{
				cpt--;
				buffer[bufferColIndex] |= ((BufferToDisplay[(module*8) + cpt] >> (bufferColIndex%8)) & 0x01) << (7-cpt);
			}
			bufferColIndex++;
		}
	}

	for( cpt_digit = 0; cpt_digit<8; cpt_digit++)
	{
		control[1] = DIGIT_0 + cpt_digit;
		control[0] = buffer[cpt_digit];

		control[3] = DIGIT_0 + cpt_digit;
		control[2] = buffer[cpt_digit+8];

		control[5] = DIGIT_0 + cpt_digit;
		control[4] = buffer[cpt_digit+16];

		control[7] = DIGIT_0 + cpt_digit;
		control[6] = buffer[cpt_digit+24];

		HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
		HAL_SPI_Transmit( &SpiHandle, control, ML_NB_MAX7219, 5000);
		HAL_GPIO_WritePin( CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
	}

	HAL_Delay(50);

	//matriceLed_SwitchOnOff( MATRICE_ON);

	return 0;
}


/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
