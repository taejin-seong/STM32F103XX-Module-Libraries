/*
 * uart.c
 *
 *  Created on: Mar 14, 2021
 *      Author: sungt
 */

/* 수신은 DMA 방식  송신은 Poling 방식 */

#include "uart.h"
#include "qbuffer.h"



#define UART_MAX_BUF_SIZE       256

typedef struct
{
  UART_HandleTypeDef *p_huart;
  DMA_HandleTypeDef  *p_hdma_rx;
  DMA_HandleTypeDef  *p_hdma_tx;

}uart_tbl_t;

static uart_tbl_t uart_tbl[UART_MAX_CH];
static bool       is_open[UART_MAX_CH];
static qbuffer_t  qbuffer[UART_MAX_CH];
static uint8_t    rx_buf[UART_MAX_BUF_SIZE];


UART_HandleTypeDef huart1;
DMA_HandleTypeDef  hdma_usart1_rx;
DMA_HandleTypeDef  hdma_usart1_tx;



bool uartInit(void)
{
	for (int i=0; i<UART_MAX_CH; i++)
	{
		is_open[i] = false;
	}

	return true;

}



bool uartOpen(uint8_t ch , uint32_t baud)
{
	bool ret = false;

	switch(ch)
	{
		case _DEF_UART1:
		    uart_tbl[ch].p_huart       =&huart1;
		    uart_tbl[ch].p_hdma_rx     =&hdma_usart1_rx;
		    uart_tbl[ch].p_hdma_tx     =&hdma_usart1_tx;


			  huart1.Instance 			     = USART1;
			  huart1.Init.BaudRate 		   = baud;
			  huart1.Init.WordLength 	   = UART_WORDLENGTH_8B;
			  huart1.Init.StopBits 		   = UART_STOPBITS_1;
			  huart1.Init.Parity 		     = UART_PARITY_NONE;
			  huart1.Init.Mode 			     = UART_MODE_TX_RX;
			  huart1.Init.HwFlowCtl		   = UART_HWCONTROL_NONE;
			  huart1.Init.OverSampling 	 = UART_OVERSAMPLING_16;

			  HAL_UART_Init(&huart1);

			  qbufferCreate(&qbuffer[ch], &rx_buf[0], UART_MAX_BUF_SIZE);

			  __HAL_RCC_DMA1_CLK_ENABLE();

			  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);  // RX DMA
			  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);




			  if (HAL_UART_Init(uart_tbl[ch].p_huart) != HAL_OK)
			  {
			   ret = false;
			  }
			  else
			  {
				  ret = true;
				  is_open[ch] = true;

				  if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t*)&rx_buf[0], UART_MAX_BUF_SIZE) != HAL_OK) /* 수신: Interrupt 방식에서  DMA 방식으로 수정 */
				  {
					  ret = false;

				  }
				  qbuffer[ch].in = qbuffer[ch].len - uart_tbl[ch].p_hdma_rx->Instance->CNDTR;
				  qbuffer[ch].out = qbuffer[ch].in;

				  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
				  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
			  }
			break;
	}


	return ret;

}


uint32_t uartAvailable(uint8_t ch)
{

	uint32_t ret = 0;


	switch(ch)
	{
		case _DEF_UART1:
			qbuffer[ch].in = ( qbuffer[ch].len -  uart_tbl[ch].p_hdma_rx->Instance->CNDTR);
			ret = qbufferAvailable(&qbuffer[ch]);
			break;
	}

	return ret;
}



uint8_t uartRead(uint8_t ch)
{
	uint8_t ret;

	switch(ch)
	{
		case _DEF_UART1:
			qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
			break;
	}

	return ret;

}


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
		uint32_t ret = 0;

		switch(ch)
		{
			case _DEF_UART1:
			    if(HAL_UART_Transmit_DMA(uart_tbl[ch].p_huart, p_data, length) == HAL_OK)
			    {
			    	ret = length;
			    }
				break;
		}
		return ret;

}


uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{

	char buf[256];
	va_list args;
	int len;

	uint32_t ret;

	va_start(args, fmt);

	len = vsnprintf(buf, 256, fmt, args);

	ret =  uartWrite(ch, (uint8_t *)buf, len);

	va_end(args);

	return ret;
}


uint32_t uartGetBaud(uint8_t ch)
{
	uint32_t ret = 0;

	switch(ch)
	{
		case _DEF_UART1:
		  ret = uart_tbl[ch].p_huart->Init.BaudRate;
			break;
	}

	return ret;
}





void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
   if (huart->Instance == USART1)
   {

   }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
#if 0 /* Interrupt 방식 사용 시 */
   if (huart->Instance == USART1)
   {
	 qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
	 HAL_UART_Receive_IT(uart_tbl[ch].p_huart, (uint8_t*)&rx_data[_DEF_UART1],1);
   }
#endif
}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

}


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
    HAL_DMA_DeInit(uartHandle->hdmatx);

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
