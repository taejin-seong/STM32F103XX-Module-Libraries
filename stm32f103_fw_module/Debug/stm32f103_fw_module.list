
stm32f103_fw_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000731c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08007430  08007430  00017430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a74  08007a74  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007a74  08007a74  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a74  08007a74  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001f0  08007c6c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08007c6c  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb20  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d38  00000000  00000000  0003bd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0003fa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00040ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c017  00000000  00000000  000419b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a65  00000000  00000000  0005d9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008988b  00000000  00000000  00077434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100cbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005020  00000000  00000000  00100d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007414 	.word	0x08007414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08007414 	.word	0x08007414

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <apInit>:




void apInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 9600); /* DFplayer와 통신하기 위한 UART 설정, Default : 9600/8/n/1/n */
 8000a8c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000a90:	2000      	movs	r0, #0
 8000a92:	f001 f899 	bl	8001bc8 <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 8000a96:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f001 f894 	bl	8001bc8 <uartOpen>

//	uartOpen(_DEF_UART1, 115200);
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <apDotMatrixTest>:
 *  Please refer to @attention
 */

/* 8x8 Dot Matrix With SPI 모드 테스트 */
void apDotMatrixTest(void)
{
 8000aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0

#define _OVERLAPS_CLCD_DEFINE_
#ifdef  _OVERLAPS_CLCD_DEFINE_

	MAX7219_MatrixUpdate();
 8000aac:	f000 ff24 	bl	80018f8 <MAX7219_MatrixUpdate>

	while (1)
	{
		MAX7219_MatrixSetRow64(0, CHR('S'));
 8000ab0:	4b4c      	ldr	r3, [pc, #304]	; (8000be4 <apDotMatrixTest+0x140>)
 8000ab2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 feec 	bl	8001894 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 8000abc:	f000 ff1c 	bl	80018f8 <MAX7219_MatrixUpdate>
		delay_ms(300);
 8000ac0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ac4:	f000 f8d2 	bl	8000c6c <delay_ms>

		MAX7219_MatrixSetRow64(0, CHR('T'));
 8000ac8:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <apDotMatrixTest+0x140>)
 8000aca:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 fee0 	bl	8001894 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 8000ad4:	f000 ff10 	bl	80018f8 <MAX7219_MatrixUpdate>
		delay_ms(300);
 8000ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000adc:	f000 f8c6 	bl	8000c6c <delay_ms>

		MAX7219_MatrixSetRow64(0, CHR('A'));
 8000ae0:	4b40      	ldr	r3, [pc, #256]	; (8000be4 <apDotMatrixTest+0x140>)
 8000ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 fed4 	bl	8001894 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 8000aec:	f000 ff04 	bl	80018f8 <MAX7219_MatrixUpdate>
		delay_ms(300);
 8000af0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000af4:	f000 f8ba 	bl	8000c6c <delay_ms>

		MAX7219_MatrixSetRow64(0, CHR('R'));
 8000af8:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <apDotMatrixTest+0x140>)
 8000afa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 fec8 	bl	8001894 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 8000b04:	f000 fef8 	bl	80018f8 <MAX7219_MatrixUpdate>
		delay_ms(300);
 8000b08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b0c:	f000 f8ae 	bl	8000c6c <delay_ms>

		MAX7219_MatrixSetRow64(0, CHR('T'));
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <apDotMatrixTest+0x140>)
 8000b12:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 febc 	bl	8001894 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 8000b1c:	f000 feec 	bl	80018f8 <MAX7219_MatrixUpdate>
		delay_ms(300);
 8000b20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b24:	f000 f8a2 	bl	8000c6c <delay_ms>

		for(int i = 0; i < 10; i ++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	e010      	b.n	8000b50 <apDotMatrixTest+0xac>
		{
			MAX7219_MatrixSetRow64(0, numbers[i]);
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <apDotMatrixTest+0x144>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	4413      	add	r3, r2
 8000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 feaa 	bl	8001894 <MAX7219_MatrixSetRow64>
			MAX7219_MatrixUpdate();
 8000b40:	f000 feda 	bl	80018f8 <MAX7219_MatrixUpdate>
			delay_ms(100);
 8000b44:	2064      	movs	r0, #100	; 0x64
 8000b46:	f000 f891 	bl	8000c6c <delay_ms>
		for(int i = 0; i < 10; i ++)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b09      	cmp	r3, #9
 8000b54:	ddeb      	ble.n	8000b2e <apDotMatrixTest+0x8a>
		}

		for (int i = 0; i < 8; i ++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	e03e      	b.n	8000bda <apDotMatrixTest+0x136>
		{

				MAX7219_MatrixSetRow64(0, matrix_column[i] | 0xFF);
 8000b5c:	4a23      	ldr	r2, [pc, #140]	; (8000bec <apDotMatrixTest+0x148>)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b68:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8000b6c:	f04f 0100 	mov.w	r1, #0
 8000b70:	ea42 0800 	orr.w	r8, r2, r0
 8000b74:	ea43 0901 	orr.w	r9, r3, r1
 8000b78:	4642      	mov	r2, r8
 8000b7a:	464b      	mov	r3, r9
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 fe89 	bl	8001894 <MAX7219_MatrixSetRow64>
				MAX7219_MatrixUpdate();
 8000b82:	f000 feb9 	bl	80018f8 <MAX7219_MatrixUpdate>
				delay_ms(300);
 8000b86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b8a:	f000 f86f 	bl	8000c6c <delay_ms>

				if (i > 0)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dd1f      	ble.n	8000bd4 <apDotMatrixTest+0x130>
				{
					MAX7219_MatrixSetRow64(0, matrix_column[i] << i);
 8000b94:	4a15      	ldr	r2, [pc, #84]	; (8000bec <apDotMatrixTest+0x148>)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	6839      	ldr	r1, [r7, #0]
 8000ba2:	f1a1 0620 	sub.w	r6, r1, #32
 8000ba6:	f1c1 0020 	rsb	r0, r1, #32
 8000baa:	fa03 f501 	lsl.w	r5, r3, r1
 8000bae:	fa02 f606 	lsl.w	r6, r2, r6
 8000bb2:	4335      	orrs	r5, r6
 8000bb4:	fa22 f000 	lsr.w	r0, r2, r0
 8000bb8:	4305      	orrs	r5, r0
 8000bba:	fa02 f401 	lsl.w	r4, r2, r1
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	462b      	mov	r3, r5
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fe66 	bl	8001894 <MAX7219_MatrixSetRow64>
					MAX7219_MatrixUpdate();
 8000bc8:	f000 fe96 	bl	80018f8 <MAX7219_MatrixUpdate>
					delay_ms(300);
 8000bcc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bd0:	f000 f84c 	bl	8000c6c <delay_ms>
		for (int i = 0; i < 8; i ++)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	ddbd      	ble.n	8000b5c <apDotMatrixTest+0xb8>
		MAX7219_MatrixSetRow64(0, CHR('S'));
 8000be0:	e766      	b.n	8000ab0 <apDotMatrixTest+0xc>
 8000be2:	bf00      	nop
 8000be4:	080074e8 	.word	0x080074e8
 8000be8:	08007498 	.word	0x08007498
 8000bec:	08007458 	.word	0x08007458

08000bf0 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
	  HAL_Init();
 8000bf6:	f001 faab 	bl	8002150 <HAL_Init>
	  SystemClock_Config();
 8000bfa:	f000 f842 	bl	8000c82 <SystemClock_Config>

	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <bspInit+0x78>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <bspInit+0x78>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <bspInit+0x78>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <bspInit+0x78>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <bspInit+0x78>)
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <bspInit+0x78>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <bspInit+0x78>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <bspInit+0x78>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <bspInit+0x78>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <bspInit+0x78>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <bspInit+0x78>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <bspInit+0x78>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <delay_ms>:


void delay_ms(uint32_t ms)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f001 facd 	bl	8002214 <HAL_Delay>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b090      	sub	sp, #64	; 0x40
 8000c86:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	2228      	movs	r2, #40	; 0x28
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fee1 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fa9c 	bl	8003208 <HAL_RCC_OscConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cd6:	f000 f819 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	230f      	movs	r3, #15
 8000cdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fd07 	bl	8003708 <HAL_RCC_ClockConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d00:	f000 f804 	bl	8000d0c <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	3740      	adds	r7, #64	; 0x40
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <Error_Handler>:




void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_MspInit+0x60>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_MspInit+0x60>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f001 fa0b 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA1_Channel4_IRQHandler+0x10>)
 8000dd2:	f001 fd49 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000498 	.word	0x20000498

08000de0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <DMA1_Channel5_IRQHandler+0x10>)
 8000de6:	f001 fd3f 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200004dc 	.word	0x200004dc

08000df4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DMA1_Channel6_IRQHandler+0x10>)
 8000dfa:	f001 fd35 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000454 	.word	0x20000454

08000e08 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <DMA1_Channel7_IRQHandler+0x10>)
 8000e0e:	f001 fd2b 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000520 	.word	0x20000520

08000e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <USART1_IRQHandler+0x10>)
 8000e22:	f003 f91d 	bl	8004060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000564 	.word	0x20000564

08000e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <USART2_IRQHandler+0x10>)
 8000e36:	f003 f913 	bl	8004060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200005a8 	.word	0x200005a8

08000e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <_kill>:

int _kill(int pid, int sig)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e5c:	f003 fdd2 	bl	8004a04 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2216      	movs	r2, #22
 8000e64:	601a      	str	r2, [r3, #0]
	return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_exit>:

void _exit (int status)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffe7 	bl	8000e52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e84:	e7fe      	b.n	8000e84 <_exit+0x12>

08000e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e00a      	b.n	8000eae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e98:	f3af 8000 	nop.w
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	60ba      	str	r2, [r7, #8]
 8000ea4:	b2ca      	uxtb	r2, r1
 8000ea6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dbf0      	blt.n	8000e98 <_read+0x12>
	}

return len;
 8000eb6:	687b      	ldr	r3, [r7, #4]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e009      	b.n	8000ee6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf1      	blt.n	8000ed2 <_write+0x12>
	}
	return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_close>:

int _close(int file)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <_isatty>:

int _isatty(int file)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f003 fd3c 	bl	8004a04 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20005000 	.word	0x20005000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	2000020c 	.word	0x2000020c
 8000fc0:	20000600 	.word	0x20000600

08000fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	; (8001008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ff6:	f7ff ffe5 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f003 fd09 	bl	8004a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffe:	f003 fcf5 	bl	80049ec <main>
  bx lr
 8001002:	4770      	bx	lr
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800100c:	08007a7c 	.word	0x08007a7c
  ldr r2, =_sbss
 8001010:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001014:	20000600 	.word	0x20000600

08001018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_2_IRQHandler>

0800101a <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	60da      	str	r2, [r3, #12]

  return ret;
 8001042:	7dfb      	ldrb	r3, [r7, #23]
}
 8001044:	4618      	mov	r0, r3
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <dfplayer_Init>:
 * @brief	DFplayer 초기화 함수
 * @note 	DFplayer 모듈이  전원이 켜진 후 초기화되기까지 1.5~ 3sec 정도 필요
 *
 */
void dfplayer_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
	delay_ms(1500);
 8001052:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001056:	f7ff fe09 	bl	8000c6c <delay_ms>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <gpioInit>:




bool gpioInit(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  bool ret = true;
 8001066:	2301      	movs	r3, #1
 8001068:	70fb      	strb	r3, [r7, #3]

 // __HAL_RCC_GPIOB_CLK_ENABLE();

  for (int i = 0; i < GPIO_MAX_CH; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e01e      	b.n	80010ae <gpioInit+0x4e>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	4912      	ldr	r1, [pc, #72]	; (80010c0 <gpioInit+0x60>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	3306      	adds	r3, #6
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	f000 f81c 	bl	80010c4 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_vlaue);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b2d8      	uxtb	r0, r3
 8001090:	490b      	ldr	r1, [pc, #44]	; (80010c0 <gpioInit+0x60>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	3309      	adds	r3, #9
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	f000 f876 	bl	8001194 <gpioPinWrite>
  for (int i = 0; i < GPIO_MAX_CH; i++)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	dddd      	ble.n	8001070 <gpioInit+0x10>
  }

  return ret;
 80010b4:	78fb      	ldrb	r3, [r7, #3]

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000004 	.word	0x20000004

080010c4 <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80010d4:	2301      	movs	r3, #1
 80010d6:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  switch(mode)
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d833      	bhi.n	8001154 <gpioPinMode+0x90>
 80010ec:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <gpioPinMode+0x30>)
 80010ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f2:	bf00      	nop
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001117 	.word	0x08001117
 80010fc:	08001121 	.word	0x08001121
 8001100:	0800112b 	.word	0x0800112b
 8001104:	08001139 	.word	0x08001139
 8001108:	08001147 	.word	0x08001147
  {
      case _DEF_INPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
        break;
 8001114:	e01e      	b.n	8001154 <gpioPinMode+0x90>

      case _DEF_INPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
        break;
 800111e:	e019      	b.n	8001154 <gpioPinMode+0x90>

      case _DEF_INPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001124:	2302      	movs	r3, #2
 8001126:	617b      	str	r3, [r7, #20]
        break;
 8001128:	e014      	b.n	8001154 <gpioPinMode+0x90>

      case _DEF_OUTPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-Pull, Open Drain 필요 시 OD로 변경
 800112a:	2301      	movs	r3, #1
 800112c:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // 필요 시  Medium, High로 변경
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
        break;
 8001136:	e00d      	b.n	8001154 <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
        break;
 8001144:	e006      	b.n	8001154 <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
        break;
 8001152:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <gpioPinMode+0xcc>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	3304      	adds	r3, #4
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	4909      	ldr	r1, [pc, #36]	; (8001190 <gpioPinMode+0xcc>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fca6 	bl	8002ad0 <HAL_GPIO_Init>

  return ret;
 8001184:	7ffb      	ldrb	r3, [r7, #31]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000004 	.word	0x20000004

08001194 <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
  if (ch > GPIO_MAX_CH)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d83e      	bhi.n	8001228 <gpioPinWrite+0x94>
  {
    return ;
  }

  if (value == true)
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01d      	beq.n	80011ec <gpioPinWrite+0x58>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	491f      	ldr	r1, [pc, #124]	; (8001230 <gpioPinWrite+0x9c>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	491b      	ldr	r1, [pc, #108]	; (8001230 <gpioPinWrite+0x9c>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3304      	adds	r3, #4
 80011d0:	8819      	ldrh	r1, [r3, #0]
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4c16      	ldr	r4, [pc, #88]	; (8001230 <gpioPinWrite+0x9c>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4423      	add	r3, r4
 80011e0:	3307      	adds	r3, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	f001 feb3 	bl	8002f50 <HAL_GPIO_WritePin>
 80011ea:	e01e      	b.n	800122a <gpioPinWrite+0x96>
  }

  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	4910      	ldr	r1, [pc, #64]	; (8001230 <gpioPinWrite+0x9c>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	490c      	ldr	r1, [pc, #48]	; (8001230 <gpioPinWrite+0x9c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3304      	adds	r3, #4
 800120c:	8819      	ldrh	r1, [r3, #0]
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	4c07      	ldr	r4, [pc, #28]	; (8001230 <gpioPinWrite+0x9c>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4423      	add	r3, r4
 800121c:	3308      	adds	r3, #8
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	f001 fe95 	bl	8002f50 <HAL_GPIO_WritePin>
 8001226:	e000      	b.n	800122a <gpioPinWrite+0x96>
    return ;
 8001228:	bf00      	nop
  }

}
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	20000004 	.word	0x20000004

08001234 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 fe85 	bl	8002f80 <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f7ff fd46 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000033c 	.word	0x2000033c
 8001288:	40005400 	.word	0x40005400
 800128c:	000186a0 	.word	0x000186a0

08001290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <HAL_I2C_MspInit+0x70>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d123      	bne.n	80012f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <HAL_I2C_MspInit+0x78>)
 80012dc:	f001 fbf8 	bl	8002ad0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ea:	61d3      	str	r3, [r2, #28]
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40005400 	.word	0x40005400
 8001304:	40021000 	.word	0x40021000
 8001308:	40010c00 	.word	0x40010c00

0800130c <ledInit>:




bool ledInit(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
	bool ret = true;
 8001312:	2301      	movs	r3, #1
 8001314:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2302      	movs	r3, #2
 800132c:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e016      	b.n	8001362 <ledInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <ledInit+0x68>)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001340:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <ledInit+0x68>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001348:	463a      	mov	r2, r7
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fbbf 	bl	8002ad0 <HAL_GPIO_Init>

		  ledOff(i);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f80e 	bl	8001378 <ledOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dde5      	ble.n	8001334 <ledInit+0x28>

	  }
	return ret;
 8001368:	7cfb      	ldrb	r3, [r7, #19]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000010 	.word	0x20000010

08001378 <ledOff>:
}



void ledOff(uint8_t ch)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d111      	bne.n	80013ac <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <ledOff+0x3c>)
 800138c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <ledOff+0x3c>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	8899      	ldrh	r1, [r3, #4]
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <ledOff+0x3c>)
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	79db      	ldrb	r3, [r3, #7]
 80013a4:	461a      	mov	r2, r3
 80013a6:	f001 fdd3 	bl	8002f50 <HAL_GPIO_WritePin>
 80013aa:	e000      	b.n	80013ae <ledOff+0x36>
	if (ch >= LED_MAX_CH) return;
 80013ac:	bf00      	nop

}
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000010 	.word	0x20000010

080013b8 <MAX7219_Init>:




void MAX7219_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4613      	mov	r3, r2
 80013c4:	80fb      	strh	r3, [r7, #6]
	Max7219_SPI = spi;
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <MAX7219_Init+0x30>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6013      	str	r3, [r2, #0]
	Max7219_SS_Port = ss_port;
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <MAX7219_Init+0x34>)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	6013      	str	r3, [r2, #0]
	Max7219_SS_Pin = ss_pin;
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <MAX7219_Init+0x38>)
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	8013      	strh	r3, [r2, #0]

	/* Us delay */
	DelayInit();
 80013d8:	f000 f998 	bl	800170c <DelayInit>

	/* Deselect SS */
	SS_Deselect();
 80013dc:	f000 f968 	bl	80016b0 <SS_Deselect>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000398 	.word	0x20000398
 80013ec:	20000390 	.word	0x20000390
 80013f0:	20000394 	.word	0x20000394

080013f4 <MAX7219_Write>:

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	460b      	mov	r3, r1
 8001400:	71bb      	strb	r3, [r7, #6]
 8001402:	4613      	mov	r3, r2
 8001404:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MAX7219_Write+0x1c>
 800140c:	2300      	movs	r3, #0
 800140e:	e05b      	b.n	80014c8 <MAX7219_Write+0xd4>

	SS_Select();
 8001410:	f000 f93a 	bl	8001688 <SS_Select>

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e018      	b.n	800144c <MAX7219_Write+0x58>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 800141a:	2000      	movs	r0, #0
 800141c:	f000 f95c 	bl	80016d8 <SPI_Tx>
 8001420:	4603      	mov	r3, r0
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MAX7219_Write+0x3c>
 800142c:	2300      	movs	r3, #0
 800142e:	e04b      	b.n	80014c8 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 8001430:	2000      	movs	r0, #0
 8001432:	f000 f951 	bl	80016d8 <SPI_Tx>
 8001436:	4603      	mov	r3, r0
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MAX7219_Write+0x52>
 8001442:	2300      	movs	r3, #0
 8001444:	e040      	b.n	80014c8 <MAX7219_Write+0xd4>
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	dbe3      	blt.n	800141a <MAX7219_Write+0x26>
	}

	/* Write register */
	if(!SPI_Tx(reg)) return false;
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f93f 	bl	80016d8 <SPI_Tx>
 800145a:	4603      	mov	r3, r0
 800145c:	f083 0301 	eor.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MAX7219_Write+0x76>
 8001466:	2300      	movs	r3, #0
 8001468:	e02e      	b.n	80014c8 <MAX7219_Write+0xd4>
	if(!SPI_Tx(data)) return false;
 800146a:	797b      	ldrb	r3, [r7, #5]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f933 	bl	80016d8 <SPI_Tx>
 8001472:	4603      	mov	r3, r0
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MAX7219_Write+0x8e>
 800147e:	2300      	movs	r3, #0
 8001480:	e022      	b.n	80014c8 <MAX7219_Write+0xd4>

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	e018      	b.n	80014ba <MAX7219_Write+0xc6>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 8001488:	2000      	movs	r0, #0
 800148a:	f000 f925 	bl	80016d8 <SPI_Tx>
 800148e:	4603      	mov	r3, r0
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MAX7219_Write+0xaa>
 800149a:	2300      	movs	r3, #0
 800149c:	e014      	b.n	80014c8 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 800149e:	2000      	movs	r0, #0
 80014a0:	f000 f91a 	bl	80016d8 <SPI_Tx>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f083 0301 	eor.w	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MAX7219_Write+0xc0>
 80014b0:	2300      	movs	r3, #0
 80014b2:	e009      	b.n	80014c8 <MAX7219_Write+0xd4>
	for(int i = 0; i < index; i++)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbe2      	blt.n	8001488 <MAX7219_Write+0x94>
	}

	SS_Deselect();
 80014c2:	f000 f8f5 	bl	80016b0 <SS_Deselect>

	return true;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MAX7219_Digit>:

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	460b      	mov	r3, r1
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	4613      	mov	r3, r2
 80014e0:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MAX7219_Digit+0x1c>
 80014e8:	2300      	movs	r3, #0
 80014ea:	e015      	b.n	8001518 <MAX7219_Digit+0x48>
	if(digit > 0x07) return false;
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d901      	bls.n	80014f6 <MAX7219_Digit+0x26>
 80014f2:	2300      	movs	r3, #0
 80014f4:	e010      	b.n	8001518 <MAX7219_Digit+0x48>

	if(!MAX7219_Write(index, digit+1, value)) return false;
 80014f6:	79bb      	ldrb	r3, [r7, #6]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2d9      	uxtb	r1, r3
 80014fc:	797a      	ldrb	r2, [r7, #5]
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff77 	bl	80013f4 <MAX7219_Write>
 8001506:	4603      	mov	r3, r0
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MAX7219_Digit+0x46>
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <MAX7219_Digit+0x48>

	return true;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <MAX7219_Decode>:

bool MAX7219_Decode(uint8_t index, uint8_t value)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	460a      	mov	r2, r1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	4613      	mov	r3, r2
 800152e:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MAX7219_Decode+0x1a>
 8001536:	2300      	movs	r3, #0
 8001538:	e00e      	b.n	8001558 <MAX7219_Decode+0x38>

	if(!MAX7219_Write(index, MAX7219_REG_DECODE, value)) return false;
 800153a:	79ba      	ldrb	r2, [r7, #6]
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2109      	movs	r1, #9
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff57 	bl	80013f4 <MAX7219_Write>
 8001546:	4603      	mov	r3, r0
 8001548:	f083 0301 	eor.w	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MAX7219_Decode+0x36>
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <MAX7219_Decode+0x38>

	return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <MAX7219_Intensity>:

bool MAX7219_Intensity(uint8_t index, uint8_t value)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MAX7219_Intensity+0x1a>
 8001576:	2300      	movs	r3, #0
 8001578:	e013      	b.n	80015a2 <MAX7219_Intensity+0x42>
	if(value > 0x0F) value = 0x0F;
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d901      	bls.n	8001584 <MAX7219_Intensity+0x24>
 8001580:	230f      	movs	r3, #15
 8001582:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_INTENSITY, value)) return false;
 8001584:	79ba      	ldrb	r2, [r7, #6]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	210a      	movs	r1, #10
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff32 	bl	80013f4 <MAX7219_Write>
 8001590:	4603      	mov	r3, r0
 8001592:	f083 0301 	eor.w	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MAX7219_Intensity+0x40>
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <MAX7219_Intensity+0x42>

	return true;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <MAX7219_ScanLimit>:

bool MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	460a      	mov	r2, r1
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	4613      	mov	r3, r2
 80015b8:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MAX7219_ScanLimit+0x1a>
 80015c0:	2300      	movs	r3, #0
 80015c2:	e013      	b.n	80015ec <MAX7219_ScanLimit+0x42>
	if(value > 0x07) value = 0x07;
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	d901      	bls.n	80015ce <MAX7219_ScanLimit+0x24>
 80015ca:	2307      	movs	r3, #7
 80015cc:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value)) return false;
 80015ce:	79ba      	ldrb	r2, [r7, #6]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	210b      	movs	r1, #11
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff0d 	bl	80013f4 <MAX7219_Write>
 80015da:	4603      	mov	r3, r0
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MAX7219_ScanLimit+0x40>
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <MAX7219_ScanLimit+0x42>

	return true;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <MAX7219_ShutDown>:

bool MAX7219_ShutDown(uint8_t index, uint8_t value)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	460a      	mov	r2, r1
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	4613      	mov	r3, r2
 8001602:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MAX7219_ShutDown+0x1a>
 800160a:	2300      	movs	r3, #0
 800160c:	e013      	b.n	8001636 <MAX7219_ShutDown+0x42>
	if(value > 0x01) value = 0x01;
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d901      	bls.n	8001618 <MAX7219_ShutDown+0x24>
 8001614:	2301      	movs	r3, #1
 8001616:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value)) return false;
 8001618:	79ba      	ldrb	r2, [r7, #6]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	210c      	movs	r1, #12
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fee8 	bl	80013f4 <MAX7219_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	f083 0301 	eor.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MAX7219_ShutDown+0x40>
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <MAX7219_ShutDown+0x42>

	return true;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <MAX7219_Test>:

bool MAX7219_Test(uint8_t index, uint8_t value)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	460a      	mov	r2, r1
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	4613      	mov	r3, r2
 800164c:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MAX7219_Test+0x1a>
 8001654:	2300      	movs	r3, #0
 8001656:	e013      	b.n	8001680 <MAX7219_Test+0x42>
	if(value > 0x01) value = 0x01;
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d901      	bls.n	8001662 <MAX7219_Test+0x24>
 800165e:	2301      	movs	r3, #1
 8001660:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_TEST, value)) return false;
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	210f      	movs	r1, #15
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fec3 	bl	80013f4 <MAX7219_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MAX7219_Test+0x40>
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <MAX7219_Test+0x42>

	return true;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <SS_Select>:

static void SS_Select()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SS_Select+0x20>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <SS_Select+0x24>)
 8001692:	8811      	ldrh	r1, [r2, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fc5a 	bl	8002f50 <HAL_GPIO_WritePin>
	DelayUS(1);
 800169c:	2001      	movs	r0, #1
 800169e:	f000 f85d 	bl	800175c <DelayUS>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000390 	.word	0x20000390
 80016ac:	20000394 	.word	0x20000394

080016b0 <SS_Deselect>:

static void SS_Deselect()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SS_Deselect+0x20>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <SS_Deselect+0x24>)
 80016ba:	8811      	ldrh	r1, [r2, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 fc46 	bl	8002f50 <HAL_GPIO_WritePin>
	DelayUS(1);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f000 f849 	bl	800175c <DelayUS>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000390 	.word	0x20000390
 80016d4:	20000394 	.word	0x20000394

080016d8 <SPI_Tx>:

static bool SPI_Tx(uint8_t data)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <SPI_Tx+0x30>)
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	1df9      	adds	r1, r7, #7
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	2201      	movs	r2, #1
 80016ee:	f002 fa29 	bl	8003b44 <HAL_SPI_Transmit>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SPI_Tx+0x24>
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <SPI_Tx+0x26>
	return true;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000398 	.word	0x20000398

0800170c <DelayInit>:

static void DelayInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <DelayInit+0x48>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <DelayInit+0x48>)
 8001716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800171a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <DelayInit+0x48>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <DelayInit+0x48>)
 8001722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001726:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <DelayInit+0x4c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <DelayInit+0x4c>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <DelayInit+0x4c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <DelayInit+0x4c>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <DelayInit+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001746:	bf00      	nop
  __ASM volatile ("NOP");
 8001748:	bf00      	nop
  __ASM volatile ("NOP");
 800174a:	bf00      	nop
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	e000edf0 	.word	0xe000edf0
 8001758:	e0001000 	.word	0xe0001000

0800175c <DelayUS>:

static void DelayUS(uint32_t us) {
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <DelayUS+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <DelayUS+0x44>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9a      	lsrs	r2, r3, #18
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <DelayUS+0x48>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <DelayUS+0x48>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f6      	bhi.n	800177e <DelayUS+0x22>
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000000 	.word	0x20000000
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	e0001000 	.word	0xe0001000

080017a8 <MAX7219_MatrixInit>:
};

volatile uint8_t FrameBuffer[MAX7219_IC_NUM][8];

void MAX7219_MatrixInit(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
	/* SPI CS Pin Init Part... */

    GPIO_InitTypeDef GPIO_InitStruct;

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(DOT_MATRIX_SPI_CS_PORT, DOT_MATRIX_SPI_CS_PIN, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	4826      	ldr	r0, [pc, #152]	; (8001850 <MAX7219_MatrixInit+0xa8>)
 80017b6:	f001 fbcb 	bl	8002f50 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PBPin PBPin */
    GPIO_InitStruct.Pin   = DOT_MATRIX_SPI_CS_PIN ;
 80017ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017be:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(DOT_MATRIX_SPI_CS_PORT, &GPIO_InitStruct);
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	481f      	ldr	r0, [pc, #124]	; (8001850 <MAX7219_MatrixInit+0xa8>)
 80017d2:	f001 f97d 	bl	8002ad0 <HAL_GPIO_Init>

	MAX7219_Init(&DOT_MATRIX_SPI, DOT_MATRIX_SPI_CS_PORT, DOT_MATRIX_SPI_CS_PIN);
 80017d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017da:	491d      	ldr	r1, [pc, #116]	; (8001850 <MAX7219_MatrixInit+0xa8>)
 80017dc:	481d      	ldr	r0, [pc, #116]	; (8001854 <MAX7219_MatrixInit+0xac>)
 80017de:	f7ff fdeb 	bl	80013b8 <MAX7219_Init>

	for(int i = 0; i < MAX7219_IC_NUM; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e02a      	b.n	800183e <MAX7219_MatrixInit+0x96>
	{
		MAX7219_MatrixClear(i);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f833 	bl	8001858 <MAX7219_MatrixClear>
		MAX7219_ShutDown(i, 1);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2101      	movs	r1, #1
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fefb 	bl	80015f4 <MAX7219_ShutDown>
		MAX7219_Test(i, 0);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff1a 	bl	800163e <MAX7219_Test>
		MAX7219_Decode(i, 0);
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe85 	bl	8001520 <MAX7219_Decode>
		MAX7219_Intensity(i, 1);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe9f 	bl	8001560 <MAX7219_Intensity>
		MAX7219_ScanLimit(i, 7);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2107      	movs	r1, #7
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff febe 	bl	80015aa <MAX7219_ScanLimit>
		MAX7219_MatrixClear(i);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f810 	bl	8001858 <MAX7219_MatrixClear>
	for(int i = 0; i < MAX7219_IC_NUM; i++)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	ddd1      	ble.n	80017e8 <MAX7219_MatrixInit+0x40>
	}
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010800 	.word	0x40010800
 8001854:	200003a4 	.word	0x200003a4

08001858 <MAX7219_MatrixClear>:

void MAX7219_MatrixClear(uint8_t index)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i < 8; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e00a      	b.n	800187e <MAX7219_MatrixClear+0x26>
	{
		FrameBuffer[index][i] = 0;
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <MAX7219_MatrixClear+0x38>)
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	441a      	add	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b07      	cmp	r3, #7
 8001882:	ddf1      	ble.n	8001868 <MAX7219_MatrixClear+0x10>
	}
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	2000039c 	.word	0x2000039c

08001894 <MAX7219_MatrixSetRow64>:
		FrameBuffer[index][i] = rows[i];
	}
}

void MAX7219_MatrixSetRow64(uint8_t index,  uint64_t rows)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	4601      	mov	r1, r0
 800189c:	e9c7 2300 	strd	r2, r3, [r7]
 80018a0:	460b      	mov	r3, r1
 80018a2:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i < 8; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e01a      	b.n	80018e0 <MAX7219_MatrixSetRow64+0x4c>
	{
		uint8_t row = rows & 0xFF;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	74fb      	strb	r3, [r7, #19]
		FrameBuffer[index][7-i] = row;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	490f      	ldr	r1, [pc, #60]	; (80018f4 <MAX7219_MatrixSetRow64+0x60>)
 80018b8:	00d2      	lsls	r2, r2, #3
 80018ba:	440a      	add	r2, r1
 80018bc:	4413      	add	r3, r2
 80018be:	7cfa      	ldrb	r2, [r7, #19]
 80018c0:	701a      	strb	r2, [r3, #0]
		rows = rows >> 8;
 80018c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	0a02      	lsrs	r2, r0, #8
 80018d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018d4:	0a0b      	lsrs	r3, r1, #8
 80018d6:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i =0; i < 8; i++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	dde1      	ble.n	80018aa <MAX7219_MatrixSetRow64+0x16>
	}
}
 80018e6:	bf00      	nop
 80018e8:	bf00      	nop
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000039c 	.word	0x2000039c

080018f8 <MAX7219_MatrixUpdate>:
		FrameBuffer[3][i] |= lsbD0;
	}
}

bool MAX7219_MatrixUpdate()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e024      	b.n	800194e <MAX7219_MatrixUpdate+0x56>
	{
		for(int digit = 0; digit < 8; digit++)
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	e01b      	b.n	8001942 <MAX7219_MatrixUpdate+0x4a>
		{
			uint8_t row = FrameBuffer[index][digit];
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <MAX7219_MatrixUpdate+0x68>)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	441a      	add	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	71fb      	strb	r3, [r7, #7]
			if(!MAX7219_Digit(index, digit, row)) return false;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fdd2 	bl	80014d0 <MAX7219_Digit>
 800192c:	4603      	mov	r3, r0
 800192e:	f083 0301 	eor.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MAX7219_MatrixUpdate+0x44>
 8001938:	2300      	movs	r3, #0
 800193a:	e00c      	b.n	8001956 <MAX7219_MatrixUpdate+0x5e>
		for(int digit = 0; digit < 8; digit++)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	3301      	adds	r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b07      	cmp	r3, #7
 8001946:	dde0      	ble.n	800190a <MAX7219_MatrixUpdate+0x12>
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	ddd7      	ble.n	8001904 <MAX7219_MatrixUpdate+0xc>
		}
	}

	return true;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000039c 	.word	0x2000039c

08001964 <NRF24L01_Init>:



/* nRF24L01 Pin 변경 시 헤더파일만 변경하면 됨  */
void NRF24L01_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
     /* 클럭 활성화는  bsp.c 에서 처리 함*/

     GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	463b      	mov	r3, r7
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]

     /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(NRF24L01_CE_PORT , NRF24L01_CE_PIN , GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2120      	movs	r1, #32
 800197a:	4812      	ldr	r0, [pc, #72]	; (80019c4 <NRF24L01_Init+0x60>)
 800197c:	f001 fae8 	bl	8002f50 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	2110      	movs	r1, #16
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <NRF24L01_Init+0x60>)
 8001986:	f001 fae3 	bl	8002f50 <HAL_GPIO_WritePin>

     /*Configure GPIO pins : PBPin PBPin */
     GPIO_InitStruct.Pin = NRF24L01_CE_PIN|NRF24L01_SPI_CS_PIN;
 800198a:	2330      	movs	r3, #48	; 0x30
 800198c:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2302      	movs	r3, #2
 8001998:	60fb      	str	r3, [r7, #12]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <NRF24L01_Init+0x60>)
 80019a0:	f001 f896 	bl	8002ad0 <HAL_GPIO_Init>

     /*Configure GPIO pin : PtPin */
     GPIO_InitStruct.Pin =  NRF24L01_IRQ_PIN;
 80019a4:	2308      	movs	r3, #8
 80019a6:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
     HAL_GPIO_Init(NRF24L01_IRQ_PORT , &GPIO_InitStruct);
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <NRF24L01_Init+0x60>)
 80019b6:	f001 f88b 	bl	8002ad0 <HAL_GPIO_Init>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40010c00 	.word	0x40010c00

080019c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <MX_SPI1_Init+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019fc:	2210      	movs	r2, #16
 80019fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a14:	220a      	movs	r2, #10
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a1a:	f002 f80f 	bl	8003a3c <HAL_SPI_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a24:	f7ff f972 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200003fc 	.word	0x200003fc
 8001a30:	40013000 	.word	0x40013000

08001a34 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <MX_SPI2_Init+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a68:	2208      	movs	r2, #8
 8001a6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a80:	220a      	movs	r2, #10
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a86:	f001 ffd9 	bl	8003a3c <HAL_SPI_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a90:	f7ff f93c 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200003a4 	.word	0x200003a4
 8001a9c:	40003800 	.word	0x40003800

08001aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a31      	ldr	r2, [pc, #196]	; (8001b80 <HAL_SPI_MspInit+0xe0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d130      	bne.n	8001b22 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001ac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001af0:	23a0      	movs	r3, #160	; 0xa0
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	4619      	mov	r1, r3
 8001b02:	4821      	ldr	r0, [pc, #132]	; (8001b88 <HAL_SPI_MspInit+0xe8>)
 8001b04:	f000 ffe4 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481b      	ldr	r0, [pc, #108]	; (8001b88 <HAL_SPI_MspInit+0xe8>)
 8001b1c:	f000 ffd8 	bl	8002ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b20:	e029      	b.n	8001b76 <HAL_SPI_MspInit+0xd6>
  else if(spiHandle->Instance==SPI2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_SPI_MspInit+0xec>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d124      	bne.n	8001b76 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	61d3      	str	r3, [r2, #28]
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_SPI_MspInit+0xe4>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b5c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 0318 	add.w	r3, r7, #24
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <HAL_SPI_MspInit+0xf0>)
 8001b72:	f000 ffad 	bl	8002ad0 <HAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40013000 	.word	0x40013000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40003800 	.word	0x40003800
 8001b90:	40010c00 	.word	0x40010c00

08001b94 <uartInit>:




bool uartInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e007      	b.n	8001bb0 <uartInit+0x1c>
  {
    is_open[i] = false;
 8001ba0:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <uartInit+0x30>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3301      	adds	r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	ddf4      	ble.n	8001ba0 <uartInit+0xc>
  }

  return true;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000210 	.word	0x20000210

08001bc8 <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <uartOpen+0x1c>
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d076      	beq.n	8001cd0 <uartOpen+0x108>
 8001be2:	e0eb      	b.n	8001dbc <uartOpen+0x1f4>
  {
    /* UART1 */
    case _DEF_UART1:
      huart1.Instance             = USART1;
 8001be4:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <uartOpen+0x200>)
 8001be6:	4a79      	ldr	r2, [pc, #484]	; (8001dcc <uartOpen+0x204>)
 8001be8:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate        = baud;
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <uartOpen+0x200>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <uartOpen+0x200>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 8001bf6:	4b74      	ldr	r3, [pc, #464]	; (8001dc8 <uartOpen+0x200>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity          = UART_PARITY_NONE;
 8001bfc:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <uartOpen+0x200>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode            = UART_MODE_TX_RX;
 8001c02:	4b71      	ldr	r3, [pc, #452]	; (8001dc8 <uartOpen+0x200>)
 8001c04:	220c      	movs	r2, #12
 8001c06:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <uartOpen+0x200>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 8001c0e:	4b6e      	ldr	r3, [pc, #440]	; (8001dc8 <uartOpen+0x200>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8001c14:	486c      	ldr	r0, [pc, #432]	; (8001dc8 <uartOpen+0x200>)
 8001c16:	f002 f9c4 	bl	8003fa2 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4a6c      	ldr	r2, [pc, #432]	; (8001dd0 <uartOpen+0x208>)
 8001c20:	4413      	add	r3, r2
 8001c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c26:	496b      	ldr	r1, [pc, #428]	; (8001dd4 <uartOpen+0x20c>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f9f6 	bl	800101a <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <uartOpen+0x210>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <uartOpen+0x210>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6153      	str	r3, [r2, #20]
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <uartOpen+0x210>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0); // RX DMA
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f000 fc01 	bl	8002452 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c50:	200f      	movs	r0, #15
 8001c52:	f000 fc1a 	bl	800248a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c56:	485c      	ldr	r0, [pc, #368]	; (8001dc8 <uartOpen+0x200>)
 8001c58:	f002 f956 	bl	8003f08 <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <uartOpen+0xa0>
      {
        ret = false;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]

        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
      }

      break;
 8001c66:	e0a9      	b.n	8001dbc <uartOpen+0x1f4>
        ret = true;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a5b      	ldr	r2, [pc, #364]	; (8001ddc <uartOpen+0x214>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	4956      	ldr	r1, [pc, #344]	; (8001dd4 <uartOpen+0x20c>)
 8001c7a:	4853      	ldr	r0, [pc, #332]	; (8001dc8 <uartOpen+0x200>)
 8001c7c:	f002 f9c0 	bl	8004000 <HAL_UART_Receive_DMA>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <uartOpen+0xc2>
          ret = false;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <uartOpen+0x208>)
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	3308      	adds	r3, #8
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <uartOpen+0x218>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	1a8a      	subs	r2, r1, r2
 8001ca0:	494b      	ldr	r1, [pc, #300]	; (8001dd0 <uartOpen+0x208>)
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	440b      	add	r3, r1
 8001ca6:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8001ca8:	79fa      	ldrb	r2, [r7, #7]
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4948      	ldr	r1, [pc, #288]	; (8001dd0 <uartOpen+0x208>)
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	440a      	add	r2, r1
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4946      	ldr	r1, [pc, #280]	; (8001dd0 <uartOpen+0x208>)
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	3304      	adds	r3, #4
 8001cbc:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	200e      	movs	r0, #14
 8001cc4:	f000 fbc5 	bl	8002452 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001cc8:	200e      	movs	r0, #14
 8001cca:	f000 fbde 	bl	800248a <HAL_NVIC_EnableIRQ>
      break;
 8001cce:	e075      	b.n	8001dbc <uartOpen+0x1f4>


    /* UART2 */
    case _DEF_UART2:
    	  huart2.Instance = USART2;
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <uartOpen+0x21c>)
 8001cd2:	4a45      	ldr	r2, [pc, #276]	; (8001de8 <uartOpen+0x220>)
 8001cd4:	601a      	str	r2, [r3, #0]
    	  huart2.Init.BaudRate = baud;
 8001cd6:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <uartOpen+0x21c>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6053      	str	r3, [r2, #4]
    	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <uartOpen+0x21c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
    	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <uartOpen+0x21c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
    	  huart2.Init.Parity = UART_PARITY_NONE;
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <uartOpen+0x21c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
    	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <uartOpen+0x21c>)
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	615a      	str	r2, [r3, #20]
    	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <uartOpen+0x21c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
    	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <uartOpen+0x21c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61da      	str	r2, [r3, #28]

          HAL_UART_DeInit(&huart2);
 8001d00:	4838      	ldr	r0, [pc, #224]	; (8001de4 <uartOpen+0x21c>)
 8001d02:	f002 f94e 	bl	8003fa2 <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <uartOpen+0x208>)
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d12:	4930      	ldr	r1, [pc, #192]	; (8001dd4 <uartOpen+0x20c>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f980 	bl	800101a <qbufferCreate>

          __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <uartOpen+0x210>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <uartOpen+0x210>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <uartOpen+0x210>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]

          HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);  // RX DMA
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2010      	movs	r0, #16
 8001d38:	f000 fb8b 	bl	8002452 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d3c:	2010      	movs	r0, #16
 8001d3e:	f000 fba4 	bl	800248a <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d42:	4828      	ldr	r0, [pc, #160]	; (8001de4 <uartOpen+0x21c>)
 8001d44:	f002 f8e0 	bl	8003f08 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <uartOpen+0x18c>
          {
            ret = false;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]

            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
          }

          break;
 8001d52:	e032      	b.n	8001dba <uartOpen+0x1f2>
            ret = true;
 8001d54:	2301      	movs	r3, #1
 8001d56:	75fb      	strb	r3, [r7, #23]
            is_open[ch] = true;
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <uartOpen+0x214>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d64:	491b      	ldr	r1, [pc, #108]	; (8001dd4 <uartOpen+0x20c>)
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <uartOpen+0x21c>)
 8001d68:	f002 f94a 	bl	8004000 <HAL_UART_Receive_DMA>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <uartOpen+0x1ae>
              ret = false;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <uartOpen+0x208>)
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3308      	adds	r3, #8
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <uartOpen+0x224>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	1a8a      	subs	r2, r1, r2
 8001d8c:	4910      	ldr	r1, [pc, #64]	; (8001dd0 <uartOpen+0x208>)
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	440b      	add	r3, r1
 8001d92:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <uartOpen+0x208>)
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	440a      	add	r2, r1
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	490b      	ldr	r1, [pc, #44]	; (8001dd0 <uartOpen+0x208>)
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	3304      	adds	r3, #4
 8001da8:	601a      	str	r2, [r3, #0]
            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	2011      	movs	r0, #17
 8001db0:	f000 fb4f 	bl	8002452 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001db4:	2011      	movs	r0, #17
 8001db6:	f000 fb68 	bl	800248a <HAL_NVIC_EnableIRQ>
          break;
 8001dba:	bf00      	nop
  }

  return ret;
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]

}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000564 	.word	0x20000564
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	20000214 	.word	0x20000214
 8001dd4:	20000234 	.word	0x20000234
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	20000210 	.word	0x20000210
 8001de0:	200004dc 	.word	0x200004dc
 8001de4:	200005a8 	.word	0x200005a8
 8001de8:	40004400 	.word	0x40004400
 8001dec:	20000454 	.word	0x20000454

08001df0 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]

}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return;
 8001e1c:	bf00      	nop
}
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a86      	ldr	r2, [pc, #536]	; (800205c <HAL_UART_MspInit+0x234>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d17a      	bne.n	8001f3e <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e48:	4b85      	ldr	r3, [pc, #532]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a84      	ldr	r2, [pc, #528]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b82      	ldr	r3, [pc, #520]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 //   __HAL_RCC_GPIOA_CLK_ENABLE();				/* bsp.c에서 초기화 시킴 */
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0318 	add.w	r3, r7, #24
 8001e72:	4619      	mov	r1, r3
 8001e74:	487b      	ldr	r0, [pc, #492]	; (8002064 <HAL_UART_MspInit+0x23c>)
 8001e76:	f000 fe2b 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0318 	add.w	r3, r7, #24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4875      	ldr	r0, [pc, #468]	; (8002064 <HAL_UART_MspInit+0x23c>)
 8001e90:	f000 fe1e 	bl	8002ad0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e94:	4b74      	ldr	r3, [pc, #464]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001e96:	4a75      	ldr	r2, [pc, #468]	; (800206c <HAL_UART_MspInit+0x244>)
 8001e98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea0:	4b71      	ldr	r3, [pc, #452]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea6:	4b70      	ldr	r3, [pc, #448]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eac:	4b6e      	ldr	r3, [pc, #440]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001eba:	2220      	movs	r2, #32
 8001ebc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ec4:	4868      	ldr	r0, [pc, #416]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001ec6:	f000 fb09 	bl	80024dc <HAL_DMA_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8001ed0:	f7fe ff1c 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a64      	ldr	r2, [pc, #400]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8001eda:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_UART_MspInit+0x240>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001ee0:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001ee2:	4a64      	ldr	r2, [pc, #400]	; (8002074 <HAL_UART_MspInit+0x24c>)
 8001ee4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee6:	4b62      	ldr	r3, [pc, #392]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001ee8:	2210      	movs	r2, #16
 8001eea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eec:	4b60      	ldr	r3, [pc, #384]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef8:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f04:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f0a:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f10:	4857      	ldr	r0, [pc, #348]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001f12:	f000 fae3 	bl	80024dc <HAL_DMA_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001f1c:	f7fe fef6 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
 8001f26:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_UART_MspInit+0x248>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2025      	movs	r0, #37	; 0x25
 8001f32:	f000 fa8e 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f36:	2025      	movs	r0, #37	; 0x25
 8001f38:	f000 faa7 	bl	800248a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f3c:	e089      	b.n	8002052 <HAL_UART_MspInit+0x22a>
  else if(uartHandle->Instance==USART2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4d      	ldr	r2, [pc, #308]	; (8002078 <HAL_UART_MspInit+0x250>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	f040 8084 	bne.w	8002052 <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4a:	4b45      	ldr	r3, [pc, #276]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a44      	ldr	r2, [pc, #272]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b42      	ldr	r3, [pc, #264]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	4a3e      	ldr	r2, [pc, #248]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6193      	str	r3, [r2, #24]
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_UART_MspInit+0x238>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4835      	ldr	r0, [pc, #212]	; (8002064 <HAL_UART_MspInit+0x23c>)
 8001f8e:	f000 fd9f 	bl	8002ad0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f92:	2308      	movs	r3, #8
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	482f      	ldr	r0, [pc, #188]	; (8002064 <HAL_UART_MspInit+0x23c>)
 8001fa6:	f000 fd93 	bl	8002ad0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001faa:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fac:	4a34      	ldr	r2, [pc, #208]	; (8002080 <HAL_UART_MspInit+0x258>)
 8001fae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb0:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fda:	4828      	ldr	r0, [pc, #160]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fdc:	f000 fa7e 	bl	80024dc <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8001fe6:	f7fe fe91 	bl	8000d0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_UART_MspInit+0x254>)
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_UART_MspInit+0x254>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_UART_MspInit+0x25c>)
 8001ff8:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_UART_MspInit+0x260>)
 8001ffa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_UART_MspInit+0x25c>)
 8001ffe:	2210      	movs	r2, #16
 8002000:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_UART_MspInit+0x25c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_UART_MspInit+0x25c>)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_UART_MspInit+0x25c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_UART_MspInit+0x25c>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_UART_MspInit+0x25c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_UART_MspInit+0x25c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002026:	4817      	ldr	r0, [pc, #92]	; (8002084 <HAL_UART_MspInit+0x25c>)
 8002028:	f000 fa58 	bl	80024dc <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_UART_MspInit+0x20e>
      Error_Handler();
 8002032:	f7fe fe6b 	bl	8000d0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a12      	ldr	r2, [pc, #72]	; (8002084 <HAL_UART_MspInit+0x25c>)
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_UART_MspInit+0x25c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	2026      	movs	r0, #38	; 0x26
 8002048:	f000 fa03 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800204c:	2026      	movs	r0, #38	; 0x26
 800204e:	f000 fa1c 	bl	800248a <HAL_NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40013800 	.word	0x40013800
 8002060:	40021000 	.word	0x40021000
 8002064:	40010800 	.word	0x40010800
 8002068:	200004dc 	.word	0x200004dc
 800206c:	40020058 	.word	0x40020058
 8002070:	20000498 	.word	0x20000498
 8002074:	40020044 	.word	0x40020044
 8002078:	40004400 	.word	0x40004400
 800207c:	20000454 	.word	0x20000454
 8002080:	4002006c 	.word	0x4002006c
 8002084:	20000520 	.word	0x20000520
 8002088:	40020080 	.word	0x40020080

0800208c <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_UART_MspDeInit+0x84>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d118      	bne.n	80020d0 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_UART_MspDeInit+0x88>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_UART_MspDeInit+0x88>)
 80020a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a8:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80020aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80020ae:	481a      	ldr	r0, [pc, #104]	; (8002118 <HAL_UART_MspDeInit+0x8c>)
 80020b0:	f000 fe92 	bl	8002dd8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fa69 	bl	8002590 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fa64 	bl	8002590 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f000 f9ec 	bl	80024a6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80020ce:	e01b      	b.n	8002108 <HAL_UART_MspDeInit+0x7c>
  else if(uartHandle->Instance==USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_UART_MspDeInit+0x90>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d116      	bne.n	8002108 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART2_CLK_DISABLE();
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_UART_MspDeInit+0x88>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_UART_MspDeInit+0x88>)
 80020e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80020e4:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80020e6:	210c      	movs	r1, #12
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_UART_MspDeInit+0x8c>)
 80020ea:	f000 fe75 	bl	8002dd8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa4c 	bl	8002590 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fa47 	bl	8002590 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002102:	2026      	movs	r0, #38	; 0x26
 8002104:	f000 f9cf 	bl	80024a6 <HAL_NVIC_DisableIRQ>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40013800 	.word	0x40013800
 8002114:	40021000 	.word	0x40021000
 8002118:	40010800 	.word	0x40010800
 800211c:	40004400 	.word	0x40004400

08002120 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	bspInit();
 8002124:	f7fe fd64 	bl	8000bf0 <bspInit>

/*  TODO: HW 설정 - "하드웨어 초기화" (3) */

	uartInit();
 8002128:	f7ff fd34 	bl	8001b94 <uartInit>
	MX_I2C1_Init();
 800212c:	f7ff f882 	bl	8001234 <MX_I2C1_Init>
	MX_SPI1_Init();
 8002130:	f7ff fc4a 	bl	80019c8 <MX_SPI1_Init>
	MX_SPI2_Init();
 8002134:	f7ff fc7e 	bl	8001a34 <MX_SPI2_Init>
	gpioInit();
 8002138:	f7fe ff92 	bl	8001060 <gpioInit>
	MAX7219_MatrixInit();
 800213c:	f7ff fb34 	bl	80017a8 <MAX7219_MatrixInit>
//	clcd_Init();
	NRF24L01_Init();
 8002140:	f7ff fc10 	bl	8001964 <NRF24L01_Init>
	dfplayer_Init();
 8002144:	f7fe ff83 	bl	800104e <dfplayer_Init>
	ledInit();
 8002148:	f7ff f8e0 	bl	800130c <ledInit>

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_Init+0x28>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_Init+0x28>)
 800215a:	f043 0310 	orr.w	r3, r3, #16
 800215e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 f96b 	bl	800243c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f808 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7fe fdd4 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x54>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x58>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002192:	fbb3 f3f1 	udiv	r3, r3, r1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f991 	bl	80024c2 <HAL_SYSTICK_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00e      	b.n	80021c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d80a      	bhi.n	80021c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 f94b 	bl	8002452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <HAL_InitTick+0x5c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000000 	.word	0x20000000
 80021d4:	2000001c 	.word	0x2000001c
 80021d8:	20000018 	.word	0x20000018

080021dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_IncTick+0x1c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_IncTick+0x20>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a03      	ldr	r2, [pc, #12]	; (80021fc <HAL_IncTick+0x20>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	2000001c 	.word	0x2000001c
 80021fc:	200005ec 	.word	0x200005ec

08002200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_GetTick+0x10>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	200005ec 	.word	0x200005ec

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff fff0 	bl	8002200 <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d005      	beq.n	800223a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_Delay+0x44>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223a:	bf00      	nop
 800223c:	f7ff ffe0 	bl	8002200 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <HAL_Delay+0x28>
  {
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000001c 	.word	0x2000001c

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4906      	ldr	r1, [pc, #24]	; (80022f4 <__NVIC_EnableIRQ+0x34>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db12      	blt.n	8002330 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	490a      	ldr	r1, [pc, #40]	; (800233c <__NVIC_DisableIRQ+0x44>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	3320      	adds	r3, #32
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002324:	f3bf 8f4f 	dsb	sy
}
 8002328:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800232a:	f3bf 8f6f 	isb	sy
}
 800232e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100

08002340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	db0a      	blt.n	800236a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	490c      	ldr	r1, [pc, #48]	; (800238c <__NVIC_SetPriority+0x4c>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002368:	e00a      	b.n	8002380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <__NVIC_SetPriority+0x50>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3b04      	subs	r3, #4
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	440b      	add	r3, r1
 800237e:	761a      	strb	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f1c3 0307 	rsb	r3, r3, #7
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	bf28      	it	cs
 80023b2:	2304      	movcs	r3, #4
 80023b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d902      	bls.n	80023c4 <NVIC_EncodePriority+0x30>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	e000      	b.n	80023c6 <NVIC_EncodePriority+0x32>
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43d9      	mvns	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	4313      	orrs	r3, r2
         );
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002408:	d301      	bcc.n	800240e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <SysTick_Config+0x40>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002416:	210f      	movs	r1, #15
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f7ff ff90 	bl	8002340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SysTick_Config+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SysTick_Config+0x40>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff09 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002464:	f7ff ff1e 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 8002468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f7ff ff90 	bl	8002394 <NVIC_EncodePriority>
 8002474:	4602      	mov	r2, r0
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff5f 	bl	8002340 <__NVIC_SetPriority>
}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff11 	bl	80022c0 <__NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff1f 	bl	80022f8 <__NVIC_DisableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ff94 	bl	80023f8 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e043      	b.n	800257a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_DMA_Init+0xa8>)
 80024fa:	4413      	add	r3, r2
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <HAL_DMA_Init+0xac>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_DMA_Init+0xb0>)
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002526:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800252a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	bffdfff8 	.word	0xbffdfff8
 8002588:	cccccccd 	.word	0xcccccccd
 800258c:	40020000 	.word	0x40020000

08002590 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e046      	b.n	8002630 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_DMA_DeInit+0xac>)
 80025da:	4413      	add	r3, r2
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_DMA_DeInit+0xb0>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	009a      	lsls	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HAL_DMA_DeInit+0xb4>)
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f202 	lsl.w	r2, r1, r2
 80025fe:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	bffdfff8 	.word	0xbffdfff8
 8002640:	cccccccd 	.word	0xcccccccd
 8002644:	40020000 	.word	0x40020000

08002648 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Start_IT+0x20>
 8002664:	2302      	movs	r3, #2
 8002666:	e04a      	b.n	80026fe <HAL_DMA_Start_IT+0xb6>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002676:	2b01      	cmp	r3, #1
 8002678:	d13a      	bne.n	80026f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f9e8 	bl	8002a74 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 020e 	orr.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e00f      	b.n	80026de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0204 	bic.w	r2, r2, #4
 80026cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 020a 	orr.w	r2, r2, #10
 80026dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e005      	b.n	80026fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
 80026fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002718:	2b02      	cmp	r3, #2
 800271a:	d008      	beq.n	800272e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2204      	movs	r2, #4
 8002720:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e020      	b.n	8002770 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 020e 	bic.w	r2, r2, #14
 800273c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
	...

0800277c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278e:	2b02      	cmp	r3, #2
 8002790:	d005      	beq.n	800279e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2204      	movs	r2, #4
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e051      	b.n	8002842 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 020e 	bic.w	r2, r2, #14
 80027ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Abort_IT+0xd0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d029      	beq.n	800281c <HAL_DMA_Abort_IT+0xa0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a20      	ldr	r2, [pc, #128]	; (8002850 <HAL_DMA_Abort_IT+0xd4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d022      	beq.n	8002818 <HAL_DMA_Abort_IT+0x9c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_DMA_Abort_IT+0xd8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d01a      	beq.n	8002812 <HAL_DMA_Abort_IT+0x96>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_DMA_Abort_IT+0xdc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d012      	beq.n	800280c <HAL_DMA_Abort_IT+0x90>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_DMA_Abort_IT+0xe0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00a      	beq.n	8002806 <HAL_DMA_Abort_IT+0x8a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_DMA_Abort_IT+0xe4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d102      	bne.n	8002800 <HAL_DMA_Abort_IT+0x84>
 80027fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027fe:	e00e      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002804:	e00b      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280a:	e008      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 800280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002810:	e005      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002816:	e002      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002818:	2310      	movs	r3, #16
 800281a:	e000      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 800281c:	2301      	movs	r3, #1
 800281e:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_DMA_Abort_IT+0xe8>)
 8002820:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
    } 
  }
  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40020008 	.word	0x40020008
 8002850:	4002001c 	.word	0x4002001c
 8002854:	40020030 	.word	0x40020030
 8002858:	40020044 	.word	0x40020044
 800285c:	40020058 	.word	0x40020058
 8002860:	4002006c 	.word	0x4002006c
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2204      	movs	r2, #4
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d04f      	beq.n	8002930 <HAL_DMA_IRQHandler+0xc8>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d04a      	beq.n	8002930 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <HAL_DMA_IRQHandler+0x1f0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d029      	beq.n	8002916 <HAL_DMA_IRQHandler+0xae>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_DMA_IRQHandler+0x1f4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_IRQHandler+0xaa>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_DMA_IRQHandler+0x1f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01a      	beq.n	800290c <HAL_DMA_IRQHandler+0xa4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a62      	ldr	r2, [pc, #392]	; (8002a64 <HAL_DMA_IRQHandler+0x1fc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0x9e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_DMA_IRQHandler+0x200>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x98>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_DMA_IRQHandler+0x204>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d102      	bne.n	80028fa <HAL_DMA_IRQHandler+0x92>
 80028f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028f8:	e00e      	b.n	8002918 <HAL_DMA_IRQHandler+0xb0>
 80028fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028fe:	e00b      	b.n	8002918 <HAL_DMA_IRQHandler+0xb0>
 8002900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002904:	e008      	b.n	8002918 <HAL_DMA_IRQHandler+0xb0>
 8002906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800290a:	e005      	b.n	8002918 <HAL_DMA_IRQHandler+0xb0>
 800290c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002910:	e002      	b.n	8002918 <HAL_DMA_IRQHandler+0xb0>
 8002912:	2340      	movs	r3, #64	; 0x40
 8002914:	e000      	b.n	8002918 <HAL_DMA_IRQHandler+0xb0>
 8002916:	2304      	movs	r3, #4
 8002918:	4a55      	ldr	r2, [pc, #340]	; (8002a70 <HAL_DMA_IRQHandler+0x208>)
 800291a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8094 	beq.w	8002a4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800292e:	e08e      	b.n	8002a4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2202      	movs	r2, #2
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d056      	beq.n	80029ee <HAL_DMA_IRQHandler+0x186>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d051      	beq.n	80029ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10b      	bne.n	8002970 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020a 	bic.w	r2, r2, #10
 8002966:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <HAL_DMA_IRQHandler+0x1f0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d029      	beq.n	80029ce <HAL_DMA_IRQHandler+0x166>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_DMA_IRQHandler+0x1f4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_DMA_IRQHandler+0x162>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a35      	ldr	r2, [pc, #212]	; (8002a60 <HAL_DMA_IRQHandler+0x1f8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x15c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <HAL_DMA_IRQHandler+0x1fc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d012      	beq.n	80029be <HAL_DMA_IRQHandler+0x156>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a32      	ldr	r2, [pc, #200]	; (8002a68 <HAL_DMA_IRQHandler+0x200>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x150>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <HAL_DMA_IRQHandler+0x204>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d102      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x14a>
 80029ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029b0:	e00e      	b.n	80029d0 <HAL_DMA_IRQHandler+0x168>
 80029b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b6:	e00b      	b.n	80029d0 <HAL_DMA_IRQHandler+0x168>
 80029b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029bc:	e008      	b.n	80029d0 <HAL_DMA_IRQHandler+0x168>
 80029be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c2:	e005      	b.n	80029d0 <HAL_DMA_IRQHandler+0x168>
 80029c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c8:	e002      	b.n	80029d0 <HAL_DMA_IRQHandler+0x168>
 80029ca:	2320      	movs	r3, #32
 80029cc:	e000      	b.n	80029d0 <HAL_DMA_IRQHandler+0x168>
 80029ce:	2302      	movs	r3, #2
 80029d0:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_DMA_IRQHandler+0x208>)
 80029d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d034      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029ec:	e02f      	b.n	8002a4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2208      	movs	r2, #8
 80029f4:	409a      	lsls	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d028      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x1e8>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 020e 	bic.w	r2, r2, #14
 8002a16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
    }
  }
  return;
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
}
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40020008 	.word	0x40020008
 8002a5c:	4002001c 	.word	0x4002001c
 8002a60:	40020030 	.word	0x40020030
 8002a64:	40020044 	.word	0x40020044
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	4002006c 	.word	0x4002006c
 8002a70:	40020000 	.word	0x40020000

08002a74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d108      	bne.n	8002ab4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ab2:	e007      	b.n	8002ac4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b08b      	sub	sp, #44	; 0x2c
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae2:	e169      	b.n	8002db8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f040 8158 	bne.w	8002db2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a9a      	ldr	r2, [pc, #616]	; (8002d70 <HAL_GPIO_Init+0x2a0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d05e      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b0c:	4a98      	ldr	r2, [pc, #608]	; (8002d70 <HAL_GPIO_Init+0x2a0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d875      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b12:	4a98      	ldr	r2, [pc, #608]	; (8002d74 <HAL_GPIO_Init+0x2a4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d058      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b18:	4a96      	ldr	r2, [pc, #600]	; (8002d74 <HAL_GPIO_Init+0x2a4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d86f      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b1e:	4a96      	ldr	r2, [pc, #600]	; (8002d78 <HAL_GPIO_Init+0x2a8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d052      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b24:	4a94      	ldr	r2, [pc, #592]	; (8002d78 <HAL_GPIO_Init+0x2a8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d869      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b2a:	4a94      	ldr	r2, [pc, #592]	; (8002d7c <HAL_GPIO_Init+0x2ac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d04c      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b30:	4a92      	ldr	r2, [pc, #584]	; (8002d7c <HAL_GPIO_Init+0x2ac>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d863      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b36:	4a92      	ldr	r2, [pc, #584]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d046      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b3c:	4a90      	ldr	r2, [pc, #576]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d85d      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b42:	2b12      	cmp	r3, #18
 8002b44:	d82a      	bhi.n	8002b9c <HAL_GPIO_Init+0xcc>
 8002b46:	2b12      	cmp	r3, #18
 8002b48:	d859      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b4a:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <HAL_GPIO_Init+0x80>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002bcb 	.word	0x08002bcb
 8002b54:	08002ba5 	.word	0x08002ba5
 8002b58:	08002bb7 	.word	0x08002bb7
 8002b5c:	08002bf9 	.word	0x08002bf9
 8002b60:	08002bff 	.word	0x08002bff
 8002b64:	08002bff 	.word	0x08002bff
 8002b68:	08002bff 	.word	0x08002bff
 8002b6c:	08002bff 	.word	0x08002bff
 8002b70:	08002bff 	.word	0x08002bff
 8002b74:	08002bff 	.word	0x08002bff
 8002b78:	08002bff 	.word	0x08002bff
 8002b7c:	08002bff 	.word	0x08002bff
 8002b80:	08002bff 	.word	0x08002bff
 8002b84:	08002bff 	.word	0x08002bff
 8002b88:	08002bff 	.word	0x08002bff
 8002b8c:	08002bff 	.word	0x08002bff
 8002b90:	08002bff 	.word	0x08002bff
 8002b94:	08002bad 	.word	0x08002bad
 8002b98:	08002bc1 	.word	0x08002bc1
 8002b9c:	4a79      	ldr	r2, [pc, #484]	; (8002d84 <HAL_GPIO_Init+0x2b4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba2:	e02c      	b.n	8002bfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	623b      	str	r3, [r7, #32]
          break;
 8002baa:	e029      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	623b      	str	r3, [r7, #32]
          break;
 8002bb4:	e024      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	623b      	str	r3, [r7, #32]
          break;
 8002bbe:	e01f      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	623b      	str	r3, [r7, #32]
          break;
 8002bc8:	e01a      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	623b      	str	r3, [r7, #32]
          break;
 8002bd6:	e013      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d105      	bne.n	8002bec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be0:	2308      	movs	r3, #8
 8002be2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	611a      	str	r2, [r3, #16]
          break;
 8002bea:	e009      	b.n	8002c00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bec:	2308      	movs	r3, #8
 8002bee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	615a      	str	r2, [r3, #20]
          break;
 8002bf6:	e003      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	623b      	str	r3, [r7, #32]
          break;
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          break;
 8002bfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d801      	bhi.n	8002c0a <HAL_GPIO_Init+0x13a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	e001      	b.n	8002c0e <HAL_GPIO_Init+0x13e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2bff      	cmp	r3, #255	; 0xff
 8002c14:	d802      	bhi.n	8002c1c <HAL_GPIO_Init+0x14c>
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	e002      	b.n	8002c22 <HAL_GPIO_Init+0x152>
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	3b08      	subs	r3, #8
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	210f      	movs	r1, #15
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80b1 	beq.w	8002db2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c50:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <HAL_GPIO_Init+0x2b8>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <HAL_GPIO_Init+0x2b8>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6193      	str	r3, [r2, #24]
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_GPIO_Init+0x2b8>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c68:	4a48      	ldr	r2, [pc, #288]	; (8002d8c <HAL_GPIO_Init+0x2bc>)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	; (8002d90 <HAL_GPIO_Init+0x2c0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_GPIO_Init+0x1ec>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3f      	ldr	r2, [pc, #252]	; (8002d94 <HAL_GPIO_Init+0x2c4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_GPIO_Init+0x1e8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3e      	ldr	r2, [pc, #248]	; (8002d98 <HAL_GPIO_Init+0x2c8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <HAL_GPIO_Init+0x1e4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <HAL_GPIO_Init+0x2cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_GPIO_Init+0x1e0>
 8002cac:	2303      	movs	r3, #3
 8002cae:	e006      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e004      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e002      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	f002 0203 	and.w	r2, r2, #3
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	4093      	lsls	r3, r2
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cce:	492f      	ldr	r1, [pc, #188]	; (8002d8c <HAL_GPIO_Init+0x2bc>)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	492c      	ldr	r1, [pc, #176]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	4928      	ldr	r1, [pc, #160]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	4922      	ldr	r1, [pc, #136]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
 8002d1c:	e006      	b.n	8002d2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	491e      	ldr	r1, [pc, #120]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4918      	ldr	r1, [pc, #96]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	4914      	ldr	r1, [pc, #80]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d021      	beq.n	8002da4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	490e      	ldr	r1, [pc, #56]	; (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
 8002d6c:	e021      	b.n	8002db2 <HAL_GPIO_Init+0x2e2>
 8002d6e:	bf00      	nop
 8002d70:	10320000 	.word	0x10320000
 8002d74:	10310000 	.word	0x10310000
 8002d78:	10220000 	.word	0x10220000
 8002d7c:	10210000 	.word	0x10210000
 8002d80:	10120000 	.word	0x10120000
 8002d84:	10110000 	.word	0x10110000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40010800 	.word	0x40010800
 8002d94:	40010c00 	.word	0x40010c00
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	3301      	adds	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f47f ae8e 	bne.w	8002ae4 <HAL_GPIO_Init+0x14>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	372c      	adds	r7, #44	; 0x2c
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002de6:	e09a      	b.n	8002f1e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 808d 	beq.w	8002f18 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002dfe:	4a4e      	ldr	r2, [pc, #312]	; (8002f38 <HAL_GPIO_DeInit+0x160>)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_GPIO_DeInit+0x164>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_DeInit+0x78>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_GPIO_DeInit+0x168>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_DeInit+0x74>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a44      	ldr	r2, [pc, #272]	; (8002f44 <HAL_GPIO_DeInit+0x16c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_DeInit+0x70>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a43      	ldr	r2, [pc, #268]	; (8002f48 <HAL_GPIO_DeInit+0x170>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_DeInit+0x6c>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_DeInit+0x7a>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e004      	b.n	8002e52 <HAL_GPIO_DeInit+0x7a>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_DeInit+0x7a>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_GPIO_DeInit+0x7a>
 8002e50:	2300      	movs	r3, #0
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	f002 0203 	and.w	r2, r2, #3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d132      	bne.n	8002ec8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002e72:	4a31      	ldr	r2, [pc, #196]	; (8002f38 <HAL_GPIO_DeInit+0x160>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	43da      	mvns	r2, r3
 8002e82:	482d      	ldr	r0, [pc, #180]	; (8002f38 <HAL_GPIO_DeInit+0x160>)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	400a      	ands	r2, r1
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	492c      	ldr	r1, [pc, #176]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4929      	ldr	r1, [pc, #164]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	4925      	ldr	r1, [pc, #148]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	4922      	ldr	r1, [pc, #136]	; (8002f4c <HAL_GPIO_DeInit+0x174>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2bff      	cmp	r3, #255	; 0xff
 8002ecc:	d801      	bhi.n	8002ed2 <HAL_GPIO_DeInit+0xfa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	e001      	b.n	8002ed6 <HAL_GPIO_DeInit+0xfe>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2bff      	cmp	r3, #255	; 0xff
 8002edc:	d802      	bhi.n	8002ee4 <HAL_GPIO_DeInit+0x10c>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_DeInit+0x112>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3b08      	subs	r3, #8
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	2104      	movs	r1, #4
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	431a      	orrs	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f47f af5e 	bne.w	8002de8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40010800 	.word	0x40010800
 8002f40:	40010c00 	.word	0x40010c00
 8002f44:	40011000 	.word	0x40011000
 8002f48:	40011400 	.word	0x40011400
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	611a      	str	r2, [r3, #16]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e12b      	b.n	80031ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fe f972 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f000 fce4 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8002fe8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a81      	ldr	r2, [pc, #516]	; (80031f4 <HAL_I2C_Init+0x274>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d807      	bhi.n	8003004 <HAL_I2C_Init+0x84>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4a80      	ldr	r2, [pc, #512]	; (80031f8 <HAL_I2C_Init+0x278>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bf94      	ite	ls
 8002ffc:	2301      	movls	r3, #1
 8002ffe:	2300      	movhi	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e006      	b.n	8003012 <HAL_I2C_Init+0x92>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a7d      	ldr	r2, [pc, #500]	; (80031fc <HAL_I2C_Init+0x27c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0e7      	b.n	80031ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4a78      	ldr	r2, [pc, #480]	; (8003200 <HAL_I2C_Init+0x280>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0c9b      	lsrs	r3, r3, #18
 8003024:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a6a      	ldr	r2, [pc, #424]	; (80031f4 <HAL_I2C_Init+0x274>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d802      	bhi.n	8003054 <HAL_I2C_Init+0xd4>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3301      	adds	r3, #1
 8003052:	e009      	b.n	8003068 <HAL_I2C_Init+0xe8>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	4a69      	ldr	r2, [pc, #420]	; (8003204 <HAL_I2C_Init+0x284>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	3301      	adds	r3, #1
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	430b      	orrs	r3, r1
 800306e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800307a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	495c      	ldr	r1, [pc, #368]	; (80031f4 <HAL_I2C_Init+0x274>)
 8003084:	428b      	cmp	r3, r1
 8003086:	d819      	bhi.n	80030bc <HAL_I2C_Init+0x13c>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1e59      	subs	r1, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fbb1 f3f3 	udiv	r3, r1, r3
 8003096:	1c59      	adds	r1, r3, #1
 8003098:	f640 73fc 	movw	r3, #4092	; 0xffc
 800309c:	400b      	ands	r3, r1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_I2C_Init+0x138>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e59      	subs	r1, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b6:	e051      	b.n	800315c <HAL_I2C_Init+0x1dc>
 80030b8:	2304      	movs	r3, #4
 80030ba:	e04f      	b.n	800315c <HAL_I2C_Init+0x1dc>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d111      	bne.n	80030e8 <HAL_I2C_Init+0x168>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e58      	subs	r0, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e012      	b.n	800310e <HAL_I2C_Init+0x18e>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e58      	subs	r0, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	0099      	lsls	r1, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Init+0x196>
 8003112:	2301      	movs	r3, #1
 8003114:	e022      	b.n	800315c <HAL_I2C_Init+0x1dc>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10e      	bne.n	800313c <HAL_I2C_Init+0x1bc>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e58      	subs	r0, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	440b      	add	r3, r1
 800312c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313a:	e00f      	b.n	800315c <HAL_I2C_Init+0x1dc>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	0099      	lsls	r1, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	6809      	ldr	r1, [r1, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800318a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6911      	ldr	r1, [r2, #16]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68d2      	ldr	r2, [r2, #12]
 8003196:	4311      	orrs	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	430b      	orrs	r3, r1
 800319e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	000186a0 	.word	0x000186a0
 80031f8:	001e847f 	.word	0x001e847f
 80031fc:	003d08ff 	.word	0x003d08ff
 8003200:	431bde83 	.word	0x431bde83
 8003204:	10624dd3 	.word	0x10624dd3

08003208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e26c      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8087 	beq.w	8003336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003228:	4b92      	ldr	r3, [pc, #584]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b04      	cmp	r3, #4
 8003232:	d00c      	beq.n	800324e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003234:	4b8f      	ldr	r3, [pc, #572]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d112      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
 8003240:	4b8c      	ldr	r3, [pc, #560]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b89      	ldr	r3, [pc, #548]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d06c      	beq.n	8003334 <HAL_RCC_OscConfig+0x12c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d168      	bne.n	8003334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e246      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x76>
 8003270:	4b80      	ldr	r3, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7f      	ldr	r2, [pc, #508]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7a      	ldr	r2, [pc, #488]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a77      	ldr	r2, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0xbc>
 80032aa:	4b72      	ldr	r3, [pc, #456]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a71      	ldr	r2, [pc, #452]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a6e      	ldr	r2, [pc, #440]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032c4:	4b6b      	ldr	r3, [pc, #428]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6a      	ldr	r2, [pc, #424]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b68      	ldr	r3, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a67      	ldr	r2, [pc, #412]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe ff8c 	bl	8002200 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe ff88 	bl	8002200 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1fa      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xe4>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe ff78 	bl	8002200 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7fe ff74 	bl	8002200 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1e6      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x10c>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d063      	beq.n	800340a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003342:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334e:	4b49      	ldr	r3, [pc, #292]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x18c>
 800335a:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x176>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1ba      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b3d      	ldr	r3, [pc, #244]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4939      	ldr	r1, [pc, #228]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e03a      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe ff2d 	bl	8002200 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fe ff29 	bl	8002200 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e19b      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4927      	ldr	r1, [pc, #156]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe ff0c 	bl	8002200 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ec:	f7fe ff08 	bl	8002200 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e17a      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03a      	beq.n	800348c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d019      	beq.n	8003452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_RCC_OscConfig+0x274>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7fe feec 	bl	8002200 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7fe fee8 	bl	8002200 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e15a      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800344a:	2001      	movs	r0, #1
 800344c:	f000 fad8 	bl	8003a00 <RCC_Delay>
 8003450:	e01c      	b.n	800348c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_RCC_OscConfig+0x274>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003458:	f7fe fed2 	bl	8002200 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345e:	e00f      	b.n	8003480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003460:	f7fe fece 	bl	8002200 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d908      	bls.n	8003480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e140      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	42420000 	.word	0x42420000
 800347c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b9e      	ldr	r3, [pc, #632]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e9      	bne.n	8003460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a6 	beq.w	80035e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b97      	ldr	r3, [pc, #604]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	4b94      	ldr	r3, [pc, #592]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a93      	ldr	r2, [pc, #588]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]
 80034b6:	4b91      	ldr	r3, [pc, #580]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b8e      	ldr	r3, [pc, #568]	; (8003700 <HAL_RCC_OscConfig+0x4f8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b8b      	ldr	r3, [pc, #556]	; (8003700 <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a8a      	ldr	r2, [pc, #552]	; (8003700 <HAL_RCC_OscConfig+0x4f8>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fe fe8f 	bl	8002200 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe fe8b 	bl	8002200 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	; 0x64
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0fd      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b81      	ldr	r3, [pc, #516]	; (8003700 <HAL_RCC_OscConfig+0x4f8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x312>
 800350c:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a7a      	ldr	r2, [pc, #488]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6213      	str	r3, [r2, #32]
 8003518:	e02d      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x334>
 8003522:	4b76      	ldr	r3, [pc, #472]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a75      	ldr	r2, [pc, #468]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a72      	ldr	r2, [pc, #456]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6213      	str	r3, [r2, #32]
 800353a:	e01c      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b05      	cmp	r3, #5
 8003542:	d10c      	bne.n	800355e <HAL_RCC_OscConfig+0x356>
 8003544:	4b6d      	ldr	r3, [pc, #436]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4a6c      	ldr	r2, [pc, #432]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	6213      	str	r3, [r2, #32]
 8003550:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a69      	ldr	r2, [pc, #420]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	e00b      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800355e:	4b67      	ldr	r3, [pc, #412]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a66      	ldr	r2, [pc, #408]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	4b64      	ldr	r3, [pc, #400]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a63      	ldr	r2, [pc, #396]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d015      	beq.n	80035aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fe fe3f 	bl	8002200 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fe3b 	bl	8002200 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0ab      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	4b57      	ldr	r3, [pc, #348]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ee      	beq.n	8003586 <HAL_RCC_OscConfig+0x37e>
 80035a8:	e014      	b.n	80035d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fe29 	bl	8002200 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fe25 	bl	8002200 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e095      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ee      	bne.n	80035b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d105      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035da:	4b48      	ldr	r3, [pc, #288]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4a47      	ldr	r2, [pc, #284]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8081 	beq.w	80036f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f0:	4b42      	ldr	r3, [pc, #264]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d061      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d146      	bne.n	8003692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003604:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_OscConfig+0x4fc>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fdf9 	bl	8002200 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fdf5 	bl	8002200 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e067      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d108      	bne.n	800364c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	492d      	ldr	r1, [pc, #180]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364c:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a19      	ldr	r1, [r3, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	430b      	orrs	r3, r1
 800365e:	4927      	ldr	r1, [pc, #156]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x4fc>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fdc9 	bl	8002200 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fdc5 	bl	8002200 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e037      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x46a>
 8003690:	e02f      	b.n	80036f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_RCC_OscConfig+0x4fc>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fdb2 	bl	8002200 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fdae 	bl	8002200 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e020      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x498>
 80036be:	e018      	b.n	80036f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e013      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_OscConfig+0x4f4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
 8003704:	42420060 	.word	0x42420060

08003708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0d0      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d910      	bls.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4965      	ldr	r1, [pc, #404]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0b8      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800376e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003788:	4b50      	ldr	r3, [pc, #320]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	494d      	ldr	r1, [pc, #308]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d040      	beq.n	8003828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d115      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07f      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e073      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e06b      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4936      	ldr	r1, [pc, #216]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f8:	f7fe fd02 	bl	8002200 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fe fcfe 	bl	8002200 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e053      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d210      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	4922      	ldr	r1, [pc, #136]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e032      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4916      	ldr	r1, [pc, #88]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	490e      	ldr	r1, [pc, #56]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003896:	f000 f821 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	490a      	ldr	r1, [pc, #40]	; (80038d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <HAL_RCC_ClockConfig+0x1cc>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1d0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fc60 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08007440 	.word	0x08007440
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000018 	.word	0x20000018

080038dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b490      	push	{r4, r7}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCC_GetSysClockFreq+0xb0>)
 80038e4:	1d3c      	adds	r4, r7, #4
 80038e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038ec:	f240 2301 	movw	r3, #513	; 0x201
 80038f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d002      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x40>
 8003916:	2b08      	cmp	r3, #8
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x46>
 800391a:	e02d      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800391e:	623b      	str	r3, [r7, #32]
      break;
 8003920:	e02d      	b.n	800397e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	0c9b      	lsrs	r3, r3, #18
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800392e:	4413      	add	r3, r2
 8003930:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003934:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c5b      	lsrs	r3, r3, #17
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800394e:	4413      	add	r3, r2
 8003950:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003954:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800395a:	fb02 f203 	mul.w	r2, r2, r3
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	e004      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800396c:	fb02 f303 	mul.w	r3, r2, r3
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	623b      	str	r3, [r7, #32]
      break;
 8003976:	e002      	b.n	800397e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397a:	623b      	str	r3, [r7, #32]
      break;
 800397c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397e:	6a3b      	ldr	r3, [r7, #32]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bc90      	pop	{r4, r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	08007430 	.word	0x08007430
 8003990:	40021000 	.word	0x40021000
 8003994:	007a1200 	.word	0x007a1200
 8003998:	003d0900 	.word	0x003d0900

0800399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <HAL_RCC_GetHCLKFreq+0x10>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	20000000 	.word	0x20000000

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff2 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	08007450 	.word	0x08007450

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffde 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0adb      	lsrs	r3, r3, #11
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08007450 	.word	0x08007450

08003a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <RCC_Delay+0x34>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <RCC_Delay+0x38>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0a5b      	lsrs	r3, r3, #9
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a1c:	bf00      	nop
  }
  while (Delay --);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e5a      	subs	r2, r3, #1
 8003a22:	60fa      	str	r2, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f9      	bne.n	8003a1c <RCC_Delay+0x1c>
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	20000000 	.word	0x20000000
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e076      	b.n	8003b3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5e:	d009      	beq.n	8003a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
 8003a66:	e005      	b.n	8003a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe f806 	bl	8001aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	ea42 0103 	orr.w	r1, r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	0c1a      	lsrs	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f002 0204 	and.w	r2, r2, #4
 8003b1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	4613      	mov	r3, r2
 8003b52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_Transmit+0x22>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e126      	b.n	8003db4 <HAL_SPI_Transmit+0x270>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6e:	f7fe fb47 	bl	8002200 <HAL_GetTick>
 8003b72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b88:	e10b      	b.n	8003da2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_SPI_Transmit+0x52>
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b9a:	e102      	b.n	8003da2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be2:	d10f      	bne.n	8003c04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d007      	beq.n	8003c22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2a:	d14b      	bne.n	8003cc4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_SPI_Transmit+0xf6>
 8003c34:	8afb      	ldrh	r3, [r7, #22]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d13e      	bne.n	8003cb8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	881a      	ldrh	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	1c9a      	adds	r2, r3, #2
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c5e:	e02b      	b.n	8003cb8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d112      	bne.n	8003c94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	1c9a      	adds	r2, r3, #2
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c92:	e011      	b.n	8003cb8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c94:	f7fe fab4 	bl	8002200 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d803      	bhi.n	8003cac <HAL_SPI_Transmit+0x168>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d102      	bne.n	8003cb2 <HAL_SPI_Transmit+0x16e>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cb6:	e074      	b.n	8003da2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ce      	bne.n	8003c60 <HAL_SPI_Transmit+0x11c>
 8003cc2:	e04c      	b.n	8003d5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit+0x18e>
 8003ccc:	8afb      	ldrh	r3, [r7, #22]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d140      	bne.n	8003d54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cf8:	e02c      	b.n	8003d54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d113      	bne.n	8003d30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d2e:	e011      	b.n	8003d54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d30:	f7fe fa66 	bl	8002200 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d803      	bhi.n	8003d48 <HAL_SPI_Transmit+0x204>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d102      	bne.n	8003d4e <HAL_SPI_Transmit+0x20a>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d52:	e026      	b.n	8003da2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1cd      	bne.n	8003cfa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f8b2 	bl	8003ecc <SPI_EndRxTxTransaction>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e000      	b.n	8003da2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003da0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dcc:	f7fe fa18 	bl	8002200 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ddc:	f7fe fa10 	bl	8002200 <HAL_GetTick>
 8003de0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003de2:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	015b      	lsls	r3, r3, #5
 8003de8:	0d1b      	lsrs	r3, r3, #20
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003df2:	e054      	b.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d050      	beq.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dfc:	f7fe fa00 	bl	8002200 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d902      	bls.n	8003e12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d13d      	bne.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e2a:	d111      	bne.n	8003e50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e34:	d004      	beq.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d107      	bne.n	8003e50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d10f      	bne.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e017      	b.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d19b      	bne.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000000 	.word	0x20000000

08003ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff ff6a 	bl	8003dbc <SPI_WaitFlagStateUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e000      	b.n	8003f00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e03f      	b.n	8003f9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd ff7a 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fcbf 	bl	80048d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e021      	b.n	8003ff8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fca:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fe f85d 	bl	800208c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	4613      	mov	r3, r2
 800400c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b20      	cmp	r3, #32
 8004018:	d11d      	bne.n	8004056 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_Receive_DMA+0x26>
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e016      	b.n	8004058 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_UART_Receive_DMA+0x38>
 8004034:	2302      	movs	r3, #2
 8004036:	e00f      	b.n	8004058 <HAL_UART_Receive_DMA+0x58>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	461a      	mov	r2, r3
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fa75 	bl	800453c <UART_Start_Receive_DMA>
 8004052:	4603      	mov	r3, r0
 8004054:	e000      	b.n	8004058 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_UART_IRQHandler+0x52>
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fb66 	bl	800477c <UART_Receive_IT>
      return;
 80040b0:	e17b      	b.n	80043aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80b1 	beq.w	800421c <HAL_UART_IRQHandler+0x1bc>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_UART_IRQHandler+0x70>
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80a6 	beq.w	800421c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_UART_IRQHandler+0x90>
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_UART_IRQHandler+0xb0>
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0202 	orr.w	r2, r3, #2
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_UART_IRQHandler+0xd0>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00f      	beq.n	800415a <HAL_UART_IRQHandler+0xfa>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <HAL_UART_IRQHandler+0xee>
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0208 	orr.w	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 811e 	beq.w	80043a0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_UART_IRQHandler+0x11e>
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 faff 	bl	800477c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_UART_IRQHandler+0x146>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d031      	beq.n	800420a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa41 	bl	800462e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d023      	beq.n	8004202 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d013      	beq.n	80041fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	4a76      	ldr	r2, [pc, #472]	; (80043b0 <HAL_UART_IRQHandler+0x350>)
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe facc 	bl	800277c <HAL_DMA_Abort_IT>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f4:	4610      	mov	r0, r2
 80041f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	e00e      	b.n	8004218 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fdf8 	bl	8001df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	e00a      	b.n	8004218 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fdf4 	bl	8001df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	e006      	b.n	8004218 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd fdf0 	bl	8001df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004216:	e0c3      	b.n	80043a0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004218:	bf00      	nop
    return;
 800421a:	e0c1      	b.n	80043a0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2b01      	cmp	r3, #1
 8004222:	f040 80a1 	bne.w	8004368 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 809b 	beq.w	8004368 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8095 	beq.w	8004368 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d04e      	beq.n	8004300 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800426c:	8a3b      	ldrh	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8098 	beq.w	80043a4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004278:	8a3a      	ldrh	r2, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	f080 8092 	bcs.w	80043a4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8a3a      	ldrh	r2, [r7, #16]
 8004284:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b20      	cmp	r3, #32
 800428e:	d02b      	beq.n	80042e8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800429e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042be:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0210 	bic.w	r2, r2, #16
 80042dc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fa0f 	bl	8002706 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f864 	bl	80043c6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042fe:	e051      	b.n	80043a4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004308:	b29b      	uxth	r3, r3
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d047      	beq.n	80043a8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004318:	8a7b      	ldrh	r3, [r7, #18]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d044      	beq.n	80043a8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800432c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0210 	bic.w	r2, r2, #16
 800435a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800435c:	8a7b      	ldrh	r3, [r7, #18]
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f830 	bl	80043c6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004366:	e01f      	b.n	80043a8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_UART_IRQHandler+0x324>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f996 	bl	80046ae <UART_Transmit_IT>
    return;
 8004382:	e012      	b.n	80043aa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <HAL_UART_IRQHandler+0x34a>
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f9d7 	bl	800474c <UART_EndTransmit_IT>
    return;
 800439e:	e004      	b.n	80043aa <HAL_UART_IRQHandler+0x34a>
    return;
 80043a0:	bf00      	nop
 80043a2:	e002      	b.n	80043aa <HAL_UART_IRQHandler+0x34a>
      return;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_UART_IRQHandler+0x34a>
      return;
 80043a8:	bf00      	nop
  }
}
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	08004687 	.word	0x08004687

080043b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d12a      	bne.n	800444e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800440c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0210 	bic.w	r2, r2, #16
 800444c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	2b01      	cmp	r3, #1
 8004454:	d106      	bne.n	8004464 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800445a:	4619      	mov	r1, r3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff ffb2 	bl	80043c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004462:	e002      	b.n	800446a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7fd fccc 	bl	8001e02 <HAL_UART_RxCpltCallback>
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	d108      	bne.n	800449a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	b29b      	uxth	r3, r3
 8004490:	4619      	mov	r1, r3
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ff97 	bl	80043c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004498:	e002      	b.n	80044a0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff8a 	bl	80043b4 <HAL_UART_RxHalfCpltCallback>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b21      	cmp	r3, #33	; 0x21
 80044da:	d108      	bne.n	80044ee <UART_DMAError+0x46>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f000 f88b 	bl	8004604 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b22      	cmp	r3, #34	; 0x22
 800450e:	d108      	bne.n	8004522 <UART_DMAError+0x7a>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2200      	movs	r2, #0
 800451a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800451c:	68b8      	ldr	r0, [r7, #8]
 800451e:	f000 f886 	bl	800462e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800452e:	68b8      	ldr	r0, [r7, #8]
 8004530:	f7fd fc5e 	bl	8001df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	; 0x22
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <UART_Start_Receive_DMA+0xbc>)
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <UART_Start_Receive_DMA+0xc0>)
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	4a21      	ldr	r2, [pc, #132]	; (8004600 <UART_Start_Receive_DMA+0xc4>)
 800457a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	2200      	movs	r2, #0
 8004582:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	f7fe f854 	bl	8002648 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	080043dd 	.word	0x080043dd
 80045fc:	08004473 	.word	0x08004473
 8004600:	080044a9 	.word	0x080044a9

08004604 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800461a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004644:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0210 	bic.w	r2, r2, #16
 800466c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7fd fba5 	bl	8001df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b21      	cmp	r3, #33	; 0x21
 80046c0:	d13e      	bne.n	8004740 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d114      	bne.n	80046f6 <UART_Transmit_IT+0x48>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d110      	bne.n	80046f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	621a      	str	r2, [r3, #32]
 80046f4:	e008      	b.n	8004708 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6211      	str	r1, [r2, #32]
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10f      	bne.n	800473c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004762:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fd fb51 	bl	8001e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b22      	cmp	r3, #34	; 0x22
 800478e:	f040 8099 	bne.w	80048c4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d117      	bne.n	80047cc <UART_Receive_IT+0x50>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d113      	bne.n	80047cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	1c9a      	adds	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
 80047ca:	e026      	b.n	800481a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d007      	beq.n	80047f0 <UART_Receive_IT+0x74>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <UART_Receive_IT+0x82>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	e008      	b.n	8004810 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480a:	b2da      	uxtb	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4619      	mov	r1, r3
 8004828:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800482a:	2b00      	cmp	r3, #0
 800482c:	d148      	bne.n	80048c0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0220 	bic.w	r2, r2, #32
 800483c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	2b01      	cmp	r3, #1
 800486c:	d123      	bne.n	80048b6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0210 	bic.w	r2, r2, #16
 8004882:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b10      	cmp	r3, #16
 8004890:	d10a      	bne.n	80048a8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fd89 	bl	80043c6 <HAL_UARTEx_RxEventCallback>
 80048b4:	e002      	b.n	80048bc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd faa3 	bl	8001e02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e002      	b.n	80048c6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800490a:	f023 030c 	bic.w	r3, r3, #12
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	430b      	orrs	r3, r1
 8004916:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2c      	ldr	r2, [pc, #176]	; (80049e4 <UART_SetConfig+0x114>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d103      	bne.n	8004940 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004938:	f7ff f84e 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	e002      	b.n	8004946 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7ff f836 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8004944:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009a      	lsls	r2, r3, #2
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <UART_SetConfig+0x118>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	0119      	lsls	r1, r3, #4
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	fbb2 f2f3 	udiv	r2, r2, r3
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <UART_SetConfig+0x118>)
 800497e:	fba3 0302 	umull	r0, r3, r3, r2
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2064      	movs	r0, #100	; 0x64
 8004986:	fb00 f303 	mul.w	r3, r0, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <UART_SetConfig+0x118>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800499c:	4419      	add	r1, r3
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009a      	lsls	r2, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <UART_SetConfig+0x118>)
 80049b6:	fba3 0302 	umull	r0, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2064      	movs	r0, #100	; 0x64
 80049be:	fb00 f303 	mul.w	r3, r0, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	3332      	adds	r3, #50	; 0x32
 80049c8:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <UART_SetConfig+0x118>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	f003 020f 	and.w	r2, r3, #15
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	440a      	add	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40013800 	.word	0x40013800
 80049e8:	51eb851f 	.word	0x51eb851f

080049ec <main>:
#include "main.h"



int main(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	hwInit();
 80049f0:	f7fd fb96 	bl	8002120 <hwInit>
	apInit();
 80049f4:	f7fc f848 	bl	8000a88 <apInit>
//	apGpioTest();
//  apDFPlayerTest();
//	apNRF24L01RxTest();
//	apNRF24L01TxTest();
//	apCLCDTest();
	apDotMatrixTest();
 80049f8:	f7fc f854 	bl	8000aa4 <apDotMatrixTest>

	return 0;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <__errno>:
 8004a04:	4b01      	ldr	r3, [pc, #4]	; (8004a0c <__errno+0x8>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000020 	.word	0x20000020

08004a10 <__libc_init_array>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	2600      	movs	r6, #0
 8004a14:	4d0c      	ldr	r5, [pc, #48]	; (8004a48 <__libc_init_array+0x38>)
 8004a16:	4c0d      	ldr	r4, [pc, #52]	; (8004a4c <__libc_init_array+0x3c>)
 8004a18:	1b64      	subs	r4, r4, r5
 8004a1a:	10a4      	asrs	r4, r4, #2
 8004a1c:	42a6      	cmp	r6, r4
 8004a1e:	d109      	bne.n	8004a34 <__libc_init_array+0x24>
 8004a20:	f002 fcf8 	bl	8007414 <_init>
 8004a24:	2600      	movs	r6, #0
 8004a26:	4d0a      	ldr	r5, [pc, #40]	; (8004a50 <__libc_init_array+0x40>)
 8004a28:	4c0a      	ldr	r4, [pc, #40]	; (8004a54 <__libc_init_array+0x44>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	42a6      	cmp	r6, r4
 8004a30:	d105      	bne.n	8004a3e <__libc_init_array+0x2e>
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a38:	4798      	blx	r3
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7ee      	b.n	8004a1c <__libc_init_array+0xc>
 8004a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a42:	4798      	blx	r3
 8004a44:	3601      	adds	r6, #1
 8004a46:	e7f2      	b.n	8004a2e <__libc_init_array+0x1e>
 8004a48:	08007a74 	.word	0x08007a74
 8004a4c:	08007a74 	.word	0x08007a74
 8004a50:	08007a74 	.word	0x08007a74
 8004a54:	08007a78 	.word	0x08007a78

08004a58 <memset>:
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4402      	add	r2, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <__cvt>:
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6e:	461f      	mov	r7, r3
 8004a70:	bfbb      	ittet	lt
 8004a72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a76:	461f      	movlt	r7, r3
 8004a78:	2300      	movge	r3, #0
 8004a7a:	232d      	movlt	r3, #45	; 0x2d
 8004a7c:	b088      	sub	sp, #32
 8004a7e:	4614      	mov	r4, r2
 8004a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a84:	7013      	strb	r3, [r2, #0]
 8004a86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a8c:	f023 0820 	bic.w	r8, r3, #32
 8004a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a94:	d005      	beq.n	8004aa2 <__cvt+0x3a>
 8004a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a9a:	d100      	bne.n	8004a9e <__cvt+0x36>
 8004a9c:	3501      	adds	r5, #1
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e000      	b.n	8004aa4 <__cvt+0x3c>
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	aa07      	add	r2, sp, #28
 8004aa6:	9204      	str	r2, [sp, #16]
 8004aa8:	aa06      	add	r2, sp, #24
 8004aaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004aae:	e9cd 3500 	strd	r3, r5, [sp]
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	f000 fcc7 	bl	8005448 <_dtoa_r>
 8004aba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004abe:	4606      	mov	r6, r0
 8004ac0:	d102      	bne.n	8004ac8 <__cvt+0x60>
 8004ac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ac4:	07db      	lsls	r3, r3, #31
 8004ac6:	d522      	bpl.n	8004b0e <__cvt+0xa6>
 8004ac8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004acc:	eb06 0905 	add.w	r9, r6, r5
 8004ad0:	d110      	bne.n	8004af4 <__cvt+0x8c>
 8004ad2:	7833      	ldrb	r3, [r6, #0]
 8004ad4:	2b30      	cmp	r3, #48	; 0x30
 8004ad6:	d10a      	bne.n	8004aee <__cvt+0x86>
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2300      	movs	r3, #0
 8004adc:	4620      	mov	r0, r4
 8004ade:	4639      	mov	r1, r7
 8004ae0:	f7fb ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8004ae4:	b918      	cbnz	r0, 8004aee <__cvt+0x86>
 8004ae6:	f1c5 0501 	rsb	r5, r5, #1
 8004aea:	f8ca 5000 	str.w	r5, [sl]
 8004aee:	f8da 3000 	ldr.w	r3, [sl]
 8004af2:	4499      	add	r9, r3
 8004af4:	2200      	movs	r2, #0
 8004af6:	2300      	movs	r3, #0
 8004af8:	4620      	mov	r0, r4
 8004afa:	4639      	mov	r1, r7
 8004afc:	f7fb ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8004b00:	b108      	cbz	r0, 8004b06 <__cvt+0x9e>
 8004b02:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b06:	2230      	movs	r2, #48	; 0x30
 8004b08:	9b07      	ldr	r3, [sp, #28]
 8004b0a:	454b      	cmp	r3, r9
 8004b0c:	d307      	bcc.n	8004b1e <__cvt+0xb6>
 8004b0e:	4630      	mov	r0, r6
 8004b10:	9b07      	ldr	r3, [sp, #28]
 8004b12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b14:	1b9b      	subs	r3, r3, r6
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	b008      	add	sp, #32
 8004b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	9107      	str	r1, [sp, #28]
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e7f0      	b.n	8004b08 <__cvt+0xa0>

08004b26 <__exponent>:
 8004b26:	4603      	mov	r3, r0
 8004b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b2a:	2900      	cmp	r1, #0
 8004b2c:	f803 2b02 	strb.w	r2, [r3], #2
 8004b30:	bfb6      	itet	lt
 8004b32:	222d      	movlt	r2, #45	; 0x2d
 8004b34:	222b      	movge	r2, #43	; 0x2b
 8004b36:	4249      	neglt	r1, r1
 8004b38:	2909      	cmp	r1, #9
 8004b3a:	7042      	strb	r2, [r0, #1]
 8004b3c:	dd2b      	ble.n	8004b96 <__exponent+0x70>
 8004b3e:	f10d 0407 	add.w	r4, sp, #7
 8004b42:	46a4      	mov	ip, r4
 8004b44:	270a      	movs	r7, #10
 8004b46:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	46a6      	mov	lr, r4
 8004b4e:	fb07 1516 	mls	r5, r7, r6, r1
 8004b52:	2a63      	cmp	r2, #99	; 0x63
 8004b54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b58:	4631      	mov	r1, r6
 8004b5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b62:	dcf0      	bgt.n	8004b46 <__exponent+0x20>
 8004b64:	3130      	adds	r1, #48	; 0x30
 8004b66:	f1ae 0502 	sub.w	r5, lr, #2
 8004b6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b6e:	4629      	mov	r1, r5
 8004b70:	1c44      	adds	r4, r0, #1
 8004b72:	4561      	cmp	r1, ip
 8004b74:	d30a      	bcc.n	8004b8c <__exponent+0x66>
 8004b76:	f10d 0209 	add.w	r2, sp, #9
 8004b7a:	eba2 020e 	sub.w	r2, r2, lr
 8004b7e:	4565      	cmp	r5, ip
 8004b80:	bf88      	it	hi
 8004b82:	2200      	movhi	r2, #0
 8004b84:	4413      	add	r3, r2
 8004b86:	1a18      	subs	r0, r3, r0
 8004b88:	b003      	add	sp, #12
 8004b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b90:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b94:	e7ed      	b.n	8004b72 <__exponent+0x4c>
 8004b96:	2330      	movs	r3, #48	; 0x30
 8004b98:	3130      	adds	r1, #48	; 0x30
 8004b9a:	7083      	strb	r3, [r0, #2]
 8004b9c:	70c1      	strb	r1, [r0, #3]
 8004b9e:	1d03      	adds	r3, r0, #4
 8004ba0:	e7f1      	b.n	8004b86 <__exponent+0x60>
	...

08004ba4 <_printf_float>:
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	b091      	sub	sp, #68	; 0x44
 8004baa:	460c      	mov	r4, r1
 8004bac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	461f      	mov	r7, r3
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	f001 fa35 	bl	8006024 <_localeconv_r>
 8004bba:	6803      	ldr	r3, [r0, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc0:	f7fb fac6 	bl	8000150 <strlen>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8004bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bcc:	900a      	str	r0, [sp, #40]	; 0x28
 8004bce:	3307      	adds	r3, #7
 8004bd0:	f023 0307 	bic.w	r3, r3, #7
 8004bd4:	f103 0208 	add.w	r2, r3, #8
 8004bd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8004be0:	f8c8 2000 	str.w	r2, [r8]
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004bf0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	4b9c      	ldr	r3, [pc, #624]	; (8004e70 <_printf_float+0x2cc>)
 8004bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c00:	f7fb ff04 	bl	8000a0c <__aeabi_dcmpun>
 8004c04:	bb70      	cbnz	r0, 8004c64 <_printf_float+0xc0>
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	4b98      	ldr	r3, [pc, #608]	; (8004e70 <_printf_float+0x2cc>)
 8004c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c10:	f7fb fede 	bl	80009d0 <__aeabi_dcmple>
 8004c14:	bb30      	cbnz	r0, 8004c64 <_printf_float+0xc0>
 8004c16:	2200      	movs	r2, #0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	f7fb fecd 	bl	80009bc <__aeabi_dcmplt>
 8004c22:	b110      	cbz	r0, 8004c2a <_printf_float+0x86>
 8004c24:	232d      	movs	r3, #45	; 0x2d
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2a:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <_printf_float+0x2d0>)
 8004c2c:	4892      	ldr	r0, [pc, #584]	; (8004e78 <_printf_float+0x2d4>)
 8004c2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c32:	bf94      	ite	ls
 8004c34:	4698      	movls	r8, r3
 8004c36:	4680      	movhi	r8, r0
 8004c38:	2303      	movs	r3, #3
 8004c3a:	f04f 0a00 	mov.w	sl, #0
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	f02b 0304 	bic.w	r3, fp, #4
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	4633      	mov	r3, r6
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	9700      	str	r7, [sp, #0]
 8004c4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c50:	f000 f9d4 	bl	8004ffc <_printf_common>
 8004c54:	3001      	adds	r0, #1
 8004c56:	f040 8090 	bne.w	8004d7a <_printf_float+0x1d6>
 8004c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5e:	b011      	add	sp, #68	; 0x44
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c64:	4642      	mov	r2, r8
 8004c66:	4653      	mov	r3, sl
 8004c68:	4640      	mov	r0, r8
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	f7fb fece 	bl	8000a0c <__aeabi_dcmpun>
 8004c70:	b148      	cbz	r0, 8004c86 <_printf_float+0xe2>
 8004c72:	f1ba 0f00 	cmp.w	sl, #0
 8004c76:	bfb8      	it	lt
 8004c78:	232d      	movlt	r3, #45	; 0x2d
 8004c7a:	4880      	ldr	r0, [pc, #512]	; (8004e7c <_printf_float+0x2d8>)
 8004c7c:	bfb8      	it	lt
 8004c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c82:	4b7f      	ldr	r3, [pc, #508]	; (8004e80 <_printf_float+0x2dc>)
 8004c84:	e7d3      	b.n	8004c2e <_printf_float+0x8a>
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	d142      	bne.n	8004d16 <_printf_float+0x172>
 8004c90:	2306      	movs	r3, #6
 8004c92:	6063      	str	r3, [r4, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	9206      	str	r2, [sp, #24]
 8004c98:	aa0e      	add	r2, sp, #56	; 0x38
 8004c9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c9e:	aa0d      	add	r2, sp, #52	; 0x34
 8004ca0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ca4:	9203      	str	r2, [sp, #12]
 8004ca6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004caa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	4653      	mov	r3, sl
 8004cba:	910b      	str	r1, [sp, #44]	; 0x2c
 8004cbc:	f7ff fed4 	bl	8004a68 <__cvt>
 8004cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	2947      	cmp	r1, #71	; 0x47
 8004cc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cc8:	d108      	bne.n	8004cdc <_printf_float+0x138>
 8004cca:	1cc8      	adds	r0, r1, #3
 8004ccc:	db02      	blt.n	8004cd4 <_printf_float+0x130>
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	4299      	cmp	r1, r3
 8004cd2:	dd40      	ble.n	8004d56 <_printf_float+0x1b2>
 8004cd4:	f1a9 0902 	sub.w	r9, r9, #2
 8004cd8:	fa5f f989 	uxtb.w	r9, r9
 8004cdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ce0:	d81f      	bhi.n	8004d22 <_printf_float+0x17e>
 8004ce2:	464a      	mov	r2, r9
 8004ce4:	3901      	subs	r1, #1
 8004ce6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cea:	910d      	str	r1, [sp, #52]	; 0x34
 8004cec:	f7ff ff1b 	bl	8004b26 <__exponent>
 8004cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cf2:	4682      	mov	sl, r0
 8004cf4:	1813      	adds	r3, r2, r0
 8004cf6:	2a01      	cmp	r2, #1
 8004cf8:	6123      	str	r3, [r4, #16]
 8004cfa:	dc02      	bgt.n	8004d02 <_printf_float+0x15e>
 8004cfc:	6822      	ldr	r2, [r4, #0]
 8004cfe:	07d2      	lsls	r2, r2, #31
 8004d00:	d501      	bpl.n	8004d06 <_printf_float+0x162>
 8004d02:	3301      	adds	r3, #1
 8004d04:	6123      	str	r3, [r4, #16]
 8004d06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d09b      	beq.n	8004c46 <_printf_float+0xa2>
 8004d0e:	232d      	movs	r3, #45	; 0x2d
 8004d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d14:	e797      	b.n	8004c46 <_printf_float+0xa2>
 8004d16:	2947      	cmp	r1, #71	; 0x47
 8004d18:	d1bc      	bne.n	8004c94 <_printf_float+0xf0>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1ba      	bne.n	8004c94 <_printf_float+0xf0>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e7b7      	b.n	8004c92 <_printf_float+0xee>
 8004d22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d26:	d118      	bne.n	8004d5a <_printf_float+0x1b6>
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	6863      	ldr	r3, [r4, #4]
 8004d2c:	dd0b      	ble.n	8004d46 <_printf_float+0x1a2>
 8004d2e:	6121      	str	r1, [r4, #16]
 8004d30:	b913      	cbnz	r3, 8004d38 <_printf_float+0x194>
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	07d0      	lsls	r0, r2, #31
 8004d36:	d502      	bpl.n	8004d3e <_printf_float+0x19a>
 8004d38:	3301      	adds	r3, #1
 8004d3a:	440b      	add	r3, r1
 8004d3c:	6123      	str	r3, [r4, #16]
 8004d3e:	f04f 0a00 	mov.w	sl, #0
 8004d42:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d44:	e7df      	b.n	8004d06 <_printf_float+0x162>
 8004d46:	b913      	cbnz	r3, 8004d4e <_printf_float+0x1aa>
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	07d2      	lsls	r2, r2, #31
 8004d4c:	d501      	bpl.n	8004d52 <_printf_float+0x1ae>
 8004d4e:	3302      	adds	r3, #2
 8004d50:	e7f4      	b.n	8004d3c <_printf_float+0x198>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e7f2      	b.n	8004d3c <_printf_float+0x198>
 8004d56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d5c:	4299      	cmp	r1, r3
 8004d5e:	db05      	blt.n	8004d6c <_printf_float+0x1c8>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	6121      	str	r1, [r4, #16]
 8004d64:	07d8      	lsls	r0, r3, #31
 8004d66:	d5ea      	bpl.n	8004d3e <_printf_float+0x19a>
 8004d68:	1c4b      	adds	r3, r1, #1
 8004d6a:	e7e7      	b.n	8004d3c <_printf_float+0x198>
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	bfcc      	ite	gt
 8004d70:	2201      	movgt	r2, #1
 8004d72:	f1c1 0202 	rsble	r2, r1, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	e7e0      	b.n	8004d3c <_printf_float+0x198>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	055a      	lsls	r2, r3, #21
 8004d7e:	d407      	bmi.n	8004d90 <_printf_float+0x1ec>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	4642      	mov	r2, r8
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d12b      	bne.n	8004de6 <_printf_float+0x242>
 8004d8e:	e764      	b.n	8004c5a <_printf_float+0xb6>
 8004d90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d94:	f240 80dd 	bls.w	8004f52 <_printf_float+0x3ae>
 8004d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f7fb fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d033      	beq.n	8004e10 <_printf_float+0x26c>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	4a35      	ldr	r2, [pc, #212]	; (8004e84 <_printf_float+0x2e0>)
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	f43f af51 	beq.w	8004c5a <_printf_float+0xb6>
 8004db8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	db02      	blt.n	8004dc6 <_printf_float+0x222>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07d8      	lsls	r0, r3, #31
 8004dc4:	d50f      	bpl.n	8004de6 <_printf_float+0x242>
 8004dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f af42 	beq.w	8004c5a <_printf_float+0xb6>
 8004dd6:	f04f 0800 	mov.w	r8, #0
 8004dda:	f104 091a 	add.w	r9, r4, #26
 8004dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de0:	3b01      	subs	r3, #1
 8004de2:	4543      	cmp	r3, r8
 8004de4:	dc09      	bgt.n	8004dfa <_printf_float+0x256>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	079b      	lsls	r3, r3, #30
 8004dea:	f100 8102 	bmi.w	8004ff2 <_printf_float+0x44e>
 8004dee:	68e0      	ldr	r0, [r4, #12]
 8004df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004df2:	4298      	cmp	r0, r3
 8004df4:	bfb8      	it	lt
 8004df6:	4618      	movlt	r0, r3
 8004df8:	e731      	b.n	8004c5e <_printf_float+0xba>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f af28 	beq.w	8004c5a <_printf_float+0xb6>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	e7e6      	b.n	8004dde <_printf_float+0x23a>
 8004e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dc38      	bgt.n	8004e88 <_printf_float+0x2e4>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <_printf_float+0x2e0>)
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f af1a 	beq.w	8004c5a <_printf_float+0xb6>
 8004e26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	d102      	bne.n	8004e34 <_printf_float+0x290>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	07d9      	lsls	r1, r3, #31
 8004e32:	d5d8      	bpl.n	8004de6 <_printf_float+0x242>
 8004e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	f43f af0b 	beq.w	8004c5a <_printf_float+0xb6>
 8004e44:	f04f 0900 	mov.w	r9, #0
 8004e48:	f104 0a1a 	add.w	sl, r4, #26
 8004e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e4e:	425b      	negs	r3, r3
 8004e50:	454b      	cmp	r3, r9
 8004e52:	dc01      	bgt.n	8004e58 <_printf_float+0x2b4>
 8004e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e56:	e794      	b.n	8004d82 <_printf_float+0x1de>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f aef9 	beq.w	8004c5a <_printf_float+0xb6>
 8004e68:	f109 0901 	add.w	r9, r9, #1
 8004e6c:	e7ee      	b.n	8004e4c <_printf_float+0x2a8>
 8004e6e:	bf00      	nop
 8004e70:	7fefffff 	.word	0x7fefffff
 8004e74:	08007694 	.word	0x08007694
 8004e78:	08007698 	.word	0x08007698
 8004e7c:	080076a0 	.word	0x080076a0
 8004e80:	0800769c 	.word	0x0800769c
 8004e84:	080076a4 	.word	0x080076a4
 8004e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	bfa8      	it	ge
 8004e90:	461a      	movge	r2, r3
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	4691      	mov	r9, r2
 8004e96:	dc37      	bgt.n	8004f08 <_printf_float+0x364>
 8004e98:	f04f 0b00 	mov.w	fp, #0
 8004e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ea0:	f104 021a 	add.w	r2, r4, #26
 8004ea4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ea8:	ebaa 0309 	sub.w	r3, sl, r9
 8004eac:	455b      	cmp	r3, fp
 8004eae:	dc33      	bgt.n	8004f18 <_printf_float+0x374>
 8004eb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	db3b      	blt.n	8004f30 <_printf_float+0x38c>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	07da      	lsls	r2, r3, #31
 8004ebc:	d438      	bmi.n	8004f30 <_printf_float+0x38c>
 8004ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ec0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ec2:	eba2 030a 	sub.w	r3, r2, sl
 8004ec6:	eba2 0901 	sub.w	r9, r2, r1
 8004eca:	4599      	cmp	r9, r3
 8004ecc:	bfa8      	it	ge
 8004ece:	4699      	movge	r9, r3
 8004ed0:	f1b9 0f00 	cmp.w	r9, #0
 8004ed4:	dc34      	bgt.n	8004f40 <_printf_float+0x39c>
 8004ed6:	f04f 0800 	mov.w	r8, #0
 8004eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ede:	f104 0a1a 	add.w	sl, r4, #26
 8004ee2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	eba3 0309 	sub.w	r3, r3, r9
 8004eec:	4543      	cmp	r3, r8
 8004eee:	f77f af7a 	ble.w	8004de6 <_printf_float+0x242>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4652      	mov	r2, sl
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	f43f aeac 	beq.w	8004c5a <_printf_float+0xb6>
 8004f02:	f108 0801 	add.w	r8, r8, #1
 8004f06:	e7ec      	b.n	8004ee2 <_printf_float+0x33e>
 8004f08:	4613      	mov	r3, r2
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b8      	blx	r7
 8004f12:	3001      	adds	r0, #1
 8004f14:	d1c0      	bne.n	8004e98 <_printf_float+0x2f4>
 8004f16:	e6a0      	b.n	8004c5a <_printf_float+0xb6>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f ae99 	beq.w	8004c5a <_printf_float+0xb6>
 8004f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f2a:	f10b 0b01 	add.w	fp, fp, #1
 8004f2e:	e7b9      	b.n	8004ea4 <_printf_float+0x300>
 8004f30:	4631      	mov	r1, r6
 8004f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d1bf      	bne.n	8004ebe <_printf_float+0x31a>
 8004f3e:	e68c      	b.n	8004c5a <_printf_float+0xb6>
 8004f40:	464b      	mov	r3, r9
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	eb08 020a 	add.w	r2, r8, sl
 8004f4a:	47b8      	blx	r7
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d1c2      	bne.n	8004ed6 <_printf_float+0x332>
 8004f50:	e683      	b.n	8004c5a <_printf_float+0xb6>
 8004f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f54:	2a01      	cmp	r2, #1
 8004f56:	dc01      	bgt.n	8004f5c <_printf_float+0x3b8>
 8004f58:	07db      	lsls	r3, r3, #31
 8004f5a:	d537      	bpl.n	8004fcc <_printf_float+0x428>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4642      	mov	r2, r8
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	f43f ae77 	beq.w	8004c5a <_printf_float+0xb6>
 8004f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f ae6f 	beq.w	8004c5a <_printf_float+0xb6>
 8004f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f80:	2200      	movs	r2, #0
 8004f82:	2300      	movs	r3, #0
 8004f84:	f7fb fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8004f88:	b9d8      	cbnz	r0, 8004fc2 <_printf_float+0x41e>
 8004f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f8c:	f108 0201 	add.w	r2, r8, #1
 8004f90:	3b01      	subs	r3, #1
 8004f92:	4631      	mov	r1, r6
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b8      	blx	r7
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d10e      	bne.n	8004fba <_printf_float+0x416>
 8004f9c:	e65d      	b.n	8004c5a <_printf_float+0xb6>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	464a      	mov	r2, r9
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f43f ae56 	beq.w	8004c5a <_printf_float+0xb6>
 8004fae:	f108 0801 	add.w	r8, r8, #1
 8004fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	4543      	cmp	r3, r8
 8004fb8:	dcf1      	bgt.n	8004f9e <_printf_float+0x3fa>
 8004fba:	4653      	mov	r3, sl
 8004fbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fc0:	e6e0      	b.n	8004d84 <_printf_float+0x1e0>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	f104 091a 	add.w	r9, r4, #26
 8004fca:	e7f2      	b.n	8004fb2 <_printf_float+0x40e>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4642      	mov	r2, r8
 8004fd0:	e7df      	b.n	8004f92 <_printf_float+0x3ee>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	464a      	mov	r2, r9
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	4628      	mov	r0, r5
 8004fda:	47b8      	blx	r7
 8004fdc:	3001      	adds	r0, #1
 8004fde:	f43f ae3c 	beq.w	8004c5a <_printf_float+0xb6>
 8004fe2:	f108 0801 	add.w	r8, r8, #1
 8004fe6:	68e3      	ldr	r3, [r4, #12]
 8004fe8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fea:	1a5b      	subs	r3, r3, r1
 8004fec:	4543      	cmp	r3, r8
 8004fee:	dcf0      	bgt.n	8004fd2 <_printf_float+0x42e>
 8004ff0:	e6fd      	b.n	8004dee <_printf_float+0x24a>
 8004ff2:	f04f 0800 	mov.w	r8, #0
 8004ff6:	f104 0919 	add.w	r9, r4, #25
 8004ffa:	e7f4      	b.n	8004fe6 <_printf_float+0x442>

08004ffc <_printf_common>:
 8004ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005000:	4616      	mov	r6, r2
 8005002:	4699      	mov	r9, r3
 8005004:	688a      	ldr	r2, [r1, #8]
 8005006:	690b      	ldr	r3, [r1, #16]
 8005008:	4607      	mov	r7, r0
 800500a:	4293      	cmp	r3, r2
 800500c:	bfb8      	it	lt
 800500e:	4613      	movlt	r3, r2
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005016:	460c      	mov	r4, r1
 8005018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800501c:	b10a      	cbz	r2, 8005022 <_printf_common+0x26>
 800501e:	3301      	adds	r3, #1
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	0699      	lsls	r1, r3, #26
 8005026:	bf42      	ittt	mi
 8005028:	6833      	ldrmi	r3, [r6, #0]
 800502a:	3302      	addmi	r3, #2
 800502c:	6033      	strmi	r3, [r6, #0]
 800502e:	6825      	ldr	r5, [r4, #0]
 8005030:	f015 0506 	ands.w	r5, r5, #6
 8005034:	d106      	bne.n	8005044 <_printf_common+0x48>
 8005036:	f104 0a19 	add.w	sl, r4, #25
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	6832      	ldr	r2, [r6, #0]
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	42ab      	cmp	r3, r5
 8005042:	dc28      	bgt.n	8005096 <_printf_common+0x9a>
 8005044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005048:	1e13      	subs	r3, r2, #0
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	bf18      	it	ne
 800504e:	2301      	movne	r3, #1
 8005050:	0692      	lsls	r2, r2, #26
 8005052:	d42d      	bmi.n	80050b0 <_printf_common+0xb4>
 8005054:	4649      	mov	r1, r9
 8005056:	4638      	mov	r0, r7
 8005058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d020      	beq.n	80050a4 <_printf_common+0xa8>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	68e5      	ldr	r5, [r4, #12]
 8005066:	f003 0306 	and.w	r3, r3, #6
 800506a:	2b04      	cmp	r3, #4
 800506c:	bf18      	it	ne
 800506e:	2500      	movne	r5, #0
 8005070:	6832      	ldr	r2, [r6, #0]
 8005072:	f04f 0600 	mov.w	r6, #0
 8005076:	68a3      	ldr	r3, [r4, #8]
 8005078:	bf08      	it	eq
 800507a:	1aad      	subeq	r5, r5, r2
 800507c:	6922      	ldr	r2, [r4, #16]
 800507e:	bf08      	it	eq
 8005080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005084:	4293      	cmp	r3, r2
 8005086:	bfc4      	itt	gt
 8005088:	1a9b      	subgt	r3, r3, r2
 800508a:	18ed      	addgt	r5, r5, r3
 800508c:	341a      	adds	r4, #26
 800508e:	42b5      	cmp	r5, r6
 8005090:	d11a      	bne.n	80050c8 <_printf_common+0xcc>
 8005092:	2000      	movs	r0, #0
 8005094:	e008      	b.n	80050a8 <_printf_common+0xac>
 8005096:	2301      	movs	r3, #1
 8005098:	4652      	mov	r2, sl
 800509a:	4649      	mov	r1, r9
 800509c:	4638      	mov	r0, r7
 800509e:	47c0      	blx	r8
 80050a0:	3001      	adds	r0, #1
 80050a2:	d103      	bne.n	80050ac <_printf_common+0xb0>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ac:	3501      	adds	r5, #1
 80050ae:	e7c4      	b.n	800503a <_printf_common+0x3e>
 80050b0:	2030      	movs	r0, #48	; 0x30
 80050b2:	18e1      	adds	r1, r4, r3
 80050b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050be:	4422      	add	r2, r4
 80050c0:	3302      	adds	r3, #2
 80050c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c6:	e7c5      	b.n	8005054 <_printf_common+0x58>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4622      	mov	r2, r4
 80050cc:	4649      	mov	r1, r9
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d0e6      	beq.n	80050a4 <_printf_common+0xa8>
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7d9      	b.n	800508e <_printf_common+0x92>
	...

080050dc <_printf_i>:
 80050dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	460c      	mov	r4, r1
 80050e2:	7e27      	ldrb	r7, [r4, #24]
 80050e4:	4691      	mov	r9, r2
 80050e6:	2f78      	cmp	r7, #120	; 0x78
 80050e8:	4680      	mov	r8, r0
 80050ea:	469a      	mov	sl, r3
 80050ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050f2:	d807      	bhi.n	8005104 <_printf_i+0x28>
 80050f4:	2f62      	cmp	r7, #98	; 0x62
 80050f6:	d80a      	bhi.n	800510e <_printf_i+0x32>
 80050f8:	2f00      	cmp	r7, #0
 80050fa:	f000 80d9 	beq.w	80052b0 <_printf_i+0x1d4>
 80050fe:	2f58      	cmp	r7, #88	; 0x58
 8005100:	f000 80a4 	beq.w	800524c <_printf_i+0x170>
 8005104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800510c:	e03a      	b.n	8005184 <_printf_i+0xa8>
 800510e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005112:	2b15      	cmp	r3, #21
 8005114:	d8f6      	bhi.n	8005104 <_printf_i+0x28>
 8005116:	a001      	add	r0, pc, #4	; (adr r0, 800511c <_printf_i+0x40>)
 8005118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800511c:	08005175 	.word	0x08005175
 8005120:	08005189 	.word	0x08005189
 8005124:	08005105 	.word	0x08005105
 8005128:	08005105 	.word	0x08005105
 800512c:	08005105 	.word	0x08005105
 8005130:	08005105 	.word	0x08005105
 8005134:	08005189 	.word	0x08005189
 8005138:	08005105 	.word	0x08005105
 800513c:	08005105 	.word	0x08005105
 8005140:	08005105 	.word	0x08005105
 8005144:	08005105 	.word	0x08005105
 8005148:	08005297 	.word	0x08005297
 800514c:	080051b9 	.word	0x080051b9
 8005150:	08005279 	.word	0x08005279
 8005154:	08005105 	.word	0x08005105
 8005158:	08005105 	.word	0x08005105
 800515c:	080052b9 	.word	0x080052b9
 8005160:	08005105 	.word	0x08005105
 8005164:	080051b9 	.word	0x080051b9
 8005168:	08005105 	.word	0x08005105
 800516c:	08005105 	.word	0x08005105
 8005170:	08005281 	.word	0x08005281
 8005174:	680b      	ldr	r3, [r1, #0]
 8005176:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	600a      	str	r2, [r1, #0]
 8005180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005184:	2301      	movs	r3, #1
 8005186:	e0a4      	b.n	80052d2 <_printf_i+0x1f6>
 8005188:	6825      	ldr	r5, [r4, #0]
 800518a:	6808      	ldr	r0, [r1, #0]
 800518c:	062e      	lsls	r6, r5, #24
 800518e:	f100 0304 	add.w	r3, r0, #4
 8005192:	d50a      	bpl.n	80051aa <_printf_i+0xce>
 8005194:	6805      	ldr	r5, [r0, #0]
 8005196:	600b      	str	r3, [r1, #0]
 8005198:	2d00      	cmp	r5, #0
 800519a:	da03      	bge.n	80051a4 <_printf_i+0xc8>
 800519c:	232d      	movs	r3, #45	; 0x2d
 800519e:	426d      	negs	r5, r5
 80051a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a4:	230a      	movs	r3, #10
 80051a6:	485e      	ldr	r0, [pc, #376]	; (8005320 <_printf_i+0x244>)
 80051a8:	e019      	b.n	80051de <_printf_i+0x102>
 80051aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051ae:	6805      	ldr	r5, [r0, #0]
 80051b0:	600b      	str	r3, [r1, #0]
 80051b2:	bf18      	it	ne
 80051b4:	b22d      	sxthne	r5, r5
 80051b6:	e7ef      	b.n	8005198 <_printf_i+0xbc>
 80051b8:	680b      	ldr	r3, [r1, #0]
 80051ba:	6825      	ldr	r5, [r4, #0]
 80051bc:	1d18      	adds	r0, r3, #4
 80051be:	6008      	str	r0, [r1, #0]
 80051c0:	0628      	lsls	r0, r5, #24
 80051c2:	d501      	bpl.n	80051c8 <_printf_i+0xec>
 80051c4:	681d      	ldr	r5, [r3, #0]
 80051c6:	e002      	b.n	80051ce <_printf_i+0xf2>
 80051c8:	0669      	lsls	r1, r5, #25
 80051ca:	d5fb      	bpl.n	80051c4 <_printf_i+0xe8>
 80051cc:	881d      	ldrh	r5, [r3, #0]
 80051ce:	2f6f      	cmp	r7, #111	; 0x6f
 80051d0:	bf0c      	ite	eq
 80051d2:	2308      	moveq	r3, #8
 80051d4:	230a      	movne	r3, #10
 80051d6:	4852      	ldr	r0, [pc, #328]	; (8005320 <_printf_i+0x244>)
 80051d8:	2100      	movs	r1, #0
 80051da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051de:	6866      	ldr	r6, [r4, #4]
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	bfa8      	it	ge
 80051e4:	6821      	ldrge	r1, [r4, #0]
 80051e6:	60a6      	str	r6, [r4, #8]
 80051e8:	bfa4      	itt	ge
 80051ea:	f021 0104 	bicge.w	r1, r1, #4
 80051ee:	6021      	strge	r1, [r4, #0]
 80051f0:	b90d      	cbnz	r5, 80051f6 <_printf_i+0x11a>
 80051f2:	2e00      	cmp	r6, #0
 80051f4:	d04d      	beq.n	8005292 <_printf_i+0x1b6>
 80051f6:	4616      	mov	r6, r2
 80051f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80051fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005200:	5dc7      	ldrb	r7, [r0, r7]
 8005202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005206:	462f      	mov	r7, r5
 8005208:	42bb      	cmp	r3, r7
 800520a:	460d      	mov	r5, r1
 800520c:	d9f4      	bls.n	80051f8 <_printf_i+0x11c>
 800520e:	2b08      	cmp	r3, #8
 8005210:	d10b      	bne.n	800522a <_printf_i+0x14e>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	07df      	lsls	r7, r3, #31
 8005216:	d508      	bpl.n	800522a <_printf_i+0x14e>
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	6861      	ldr	r1, [r4, #4]
 800521c:	4299      	cmp	r1, r3
 800521e:	bfde      	ittt	le
 8005220:	2330      	movle	r3, #48	; 0x30
 8005222:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005226:	f106 36ff 	addle.w	r6, r6, #4294967295
 800522a:	1b92      	subs	r2, r2, r6
 800522c:	6122      	str	r2, [r4, #16]
 800522e:	464b      	mov	r3, r9
 8005230:	4621      	mov	r1, r4
 8005232:	4640      	mov	r0, r8
 8005234:	f8cd a000 	str.w	sl, [sp]
 8005238:	aa03      	add	r2, sp, #12
 800523a:	f7ff fedf 	bl	8004ffc <_printf_common>
 800523e:	3001      	adds	r0, #1
 8005240:	d14c      	bne.n	80052dc <_printf_i+0x200>
 8005242:	f04f 30ff 	mov.w	r0, #4294967295
 8005246:	b004      	add	sp, #16
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524c:	4834      	ldr	r0, [pc, #208]	; (8005320 <_printf_i+0x244>)
 800524e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005252:	680e      	ldr	r6, [r1, #0]
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	f856 5b04 	ldr.w	r5, [r6], #4
 800525a:	061f      	lsls	r7, r3, #24
 800525c:	600e      	str	r6, [r1, #0]
 800525e:	d514      	bpl.n	800528a <_printf_i+0x1ae>
 8005260:	07d9      	lsls	r1, r3, #31
 8005262:	bf44      	itt	mi
 8005264:	f043 0320 	orrmi.w	r3, r3, #32
 8005268:	6023      	strmi	r3, [r4, #0]
 800526a:	b91d      	cbnz	r5, 8005274 <_printf_i+0x198>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	f023 0320 	bic.w	r3, r3, #32
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	2310      	movs	r3, #16
 8005276:	e7af      	b.n	80051d8 <_printf_i+0xfc>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	f043 0320 	orr.w	r3, r3, #32
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	2378      	movs	r3, #120	; 0x78
 8005282:	4828      	ldr	r0, [pc, #160]	; (8005324 <_printf_i+0x248>)
 8005284:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005288:	e7e3      	b.n	8005252 <_printf_i+0x176>
 800528a:	065e      	lsls	r6, r3, #25
 800528c:	bf48      	it	mi
 800528e:	b2ad      	uxthmi	r5, r5
 8005290:	e7e6      	b.n	8005260 <_printf_i+0x184>
 8005292:	4616      	mov	r6, r2
 8005294:	e7bb      	b.n	800520e <_printf_i+0x132>
 8005296:	680b      	ldr	r3, [r1, #0]
 8005298:	6826      	ldr	r6, [r4, #0]
 800529a:	1d1d      	adds	r5, r3, #4
 800529c:	6960      	ldr	r0, [r4, #20]
 800529e:	600d      	str	r5, [r1, #0]
 80052a0:	0635      	lsls	r5, r6, #24
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	d501      	bpl.n	80052aa <_printf_i+0x1ce>
 80052a6:	6018      	str	r0, [r3, #0]
 80052a8:	e002      	b.n	80052b0 <_printf_i+0x1d4>
 80052aa:	0671      	lsls	r1, r6, #25
 80052ac:	d5fb      	bpl.n	80052a6 <_printf_i+0x1ca>
 80052ae:	8018      	strh	r0, [r3, #0]
 80052b0:	2300      	movs	r3, #0
 80052b2:	4616      	mov	r6, r2
 80052b4:	6123      	str	r3, [r4, #16]
 80052b6:	e7ba      	b.n	800522e <_printf_i+0x152>
 80052b8:	680b      	ldr	r3, [r1, #0]
 80052ba:	1d1a      	adds	r2, r3, #4
 80052bc:	600a      	str	r2, [r1, #0]
 80052be:	681e      	ldr	r6, [r3, #0]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4630      	mov	r0, r6
 80052c4:	6862      	ldr	r2, [r4, #4]
 80052c6:	f000 feb9 	bl	800603c <memchr>
 80052ca:	b108      	cbz	r0, 80052d0 <_printf_i+0x1f4>
 80052cc:	1b80      	subs	r0, r0, r6
 80052ce:	6060      	str	r0, [r4, #4]
 80052d0:	6863      	ldr	r3, [r4, #4]
 80052d2:	6123      	str	r3, [r4, #16]
 80052d4:	2300      	movs	r3, #0
 80052d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052da:	e7a8      	b.n	800522e <_printf_i+0x152>
 80052dc:	4632      	mov	r2, r6
 80052de:	4649      	mov	r1, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	47d0      	blx	sl
 80052e6:	3001      	adds	r0, #1
 80052e8:	d0ab      	beq.n	8005242 <_printf_i+0x166>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	079b      	lsls	r3, r3, #30
 80052ee:	d413      	bmi.n	8005318 <_printf_i+0x23c>
 80052f0:	68e0      	ldr	r0, [r4, #12]
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	4298      	cmp	r0, r3
 80052f6:	bfb8      	it	lt
 80052f8:	4618      	movlt	r0, r3
 80052fa:	e7a4      	b.n	8005246 <_printf_i+0x16a>
 80052fc:	2301      	movs	r3, #1
 80052fe:	4632      	mov	r2, r6
 8005300:	4649      	mov	r1, r9
 8005302:	4640      	mov	r0, r8
 8005304:	47d0      	blx	sl
 8005306:	3001      	adds	r0, #1
 8005308:	d09b      	beq.n	8005242 <_printf_i+0x166>
 800530a:	3501      	adds	r5, #1
 800530c:	68e3      	ldr	r3, [r4, #12]
 800530e:	9903      	ldr	r1, [sp, #12]
 8005310:	1a5b      	subs	r3, r3, r1
 8005312:	42ab      	cmp	r3, r5
 8005314:	dcf2      	bgt.n	80052fc <_printf_i+0x220>
 8005316:	e7eb      	b.n	80052f0 <_printf_i+0x214>
 8005318:	2500      	movs	r5, #0
 800531a:	f104 0619 	add.w	r6, r4, #25
 800531e:	e7f5      	b.n	800530c <_printf_i+0x230>
 8005320:	080076a6 	.word	0x080076a6
 8005324:	080076b7 	.word	0x080076b7

08005328 <quorem>:
 8005328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	6903      	ldr	r3, [r0, #16]
 800532e:	690c      	ldr	r4, [r1, #16]
 8005330:	4607      	mov	r7, r0
 8005332:	42a3      	cmp	r3, r4
 8005334:	f2c0 8083 	blt.w	800543e <quorem+0x116>
 8005338:	3c01      	subs	r4, #1
 800533a:	f100 0514 	add.w	r5, r0, #20
 800533e:	f101 0814 	add.w	r8, r1, #20
 8005342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800534c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005350:	3301      	adds	r3, #1
 8005352:	429a      	cmp	r2, r3
 8005354:	fbb2 f6f3 	udiv	r6, r2, r3
 8005358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800535c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005360:	d332      	bcc.n	80053c8 <quorem+0xa0>
 8005362:	f04f 0e00 	mov.w	lr, #0
 8005366:	4640      	mov	r0, r8
 8005368:	46ac      	mov	ip, r5
 800536a:	46f2      	mov	sl, lr
 800536c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005370:	b293      	uxth	r3, r2
 8005372:	fb06 e303 	mla	r3, r6, r3, lr
 8005376:	0c12      	lsrs	r2, r2, #16
 8005378:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800537c:	fb06 e202 	mla	r2, r6, r2, lr
 8005380:	b29b      	uxth	r3, r3
 8005382:	ebaa 0303 	sub.w	r3, sl, r3
 8005386:	f8dc a000 	ldr.w	sl, [ip]
 800538a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800538e:	fa1f fa8a 	uxth.w	sl, sl
 8005392:	4453      	add	r3, sl
 8005394:	fa1f fa82 	uxth.w	sl, r2
 8005398:	f8dc 2000 	ldr.w	r2, [ip]
 800539c:	4581      	cmp	r9, r0
 800539e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80053a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053b0:	f84c 3b04 	str.w	r3, [ip], #4
 80053b4:	d2da      	bcs.n	800536c <quorem+0x44>
 80053b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80053ba:	b92b      	cbnz	r3, 80053c8 <quorem+0xa0>
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	3b04      	subs	r3, #4
 80053c0:	429d      	cmp	r5, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	d32f      	bcc.n	8005426 <quorem+0xfe>
 80053c6:	613c      	str	r4, [r7, #16]
 80053c8:	4638      	mov	r0, r7
 80053ca:	f001 f8cd 	bl	8006568 <__mcmp>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	db25      	blt.n	800541e <quorem+0xf6>
 80053d2:	4628      	mov	r0, r5
 80053d4:	f04f 0c00 	mov.w	ip, #0
 80053d8:	3601      	adds	r6, #1
 80053da:	f858 1b04 	ldr.w	r1, [r8], #4
 80053de:	f8d0 e000 	ldr.w	lr, [r0]
 80053e2:	b28b      	uxth	r3, r1
 80053e4:	ebac 0303 	sub.w	r3, ip, r3
 80053e8:	fa1f f28e 	uxth.w	r2, lr
 80053ec:	4413      	add	r3, r2
 80053ee:	0c0a      	lsrs	r2, r1, #16
 80053f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053fe:	45c1      	cmp	r9, r8
 8005400:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005404:	f840 3b04 	str.w	r3, [r0], #4
 8005408:	d2e7      	bcs.n	80053da <quorem+0xb2>
 800540a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800540e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005412:	b922      	cbnz	r2, 800541e <quorem+0xf6>
 8005414:	3b04      	subs	r3, #4
 8005416:	429d      	cmp	r5, r3
 8005418:	461a      	mov	r2, r3
 800541a:	d30a      	bcc.n	8005432 <quorem+0x10a>
 800541c:	613c      	str	r4, [r7, #16]
 800541e:	4630      	mov	r0, r6
 8005420:	b003      	add	sp, #12
 8005422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	3b04      	subs	r3, #4
 800542a:	2a00      	cmp	r2, #0
 800542c:	d1cb      	bne.n	80053c6 <quorem+0x9e>
 800542e:	3c01      	subs	r4, #1
 8005430:	e7c6      	b.n	80053c0 <quorem+0x98>
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	3b04      	subs	r3, #4
 8005436:	2a00      	cmp	r2, #0
 8005438:	d1f0      	bne.n	800541c <quorem+0xf4>
 800543a:	3c01      	subs	r4, #1
 800543c:	e7eb      	b.n	8005416 <quorem+0xee>
 800543e:	2000      	movs	r0, #0
 8005440:	e7ee      	b.n	8005420 <quorem+0xf8>
 8005442:	0000      	movs	r0, r0
 8005444:	0000      	movs	r0, r0
	...

08005448 <_dtoa_r>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	4616      	mov	r6, r2
 800544e:	461f      	mov	r7, r3
 8005450:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005452:	b099      	sub	sp, #100	; 0x64
 8005454:	4605      	mov	r5, r0
 8005456:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800545a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800545e:	b974      	cbnz	r4, 800547e <_dtoa_r+0x36>
 8005460:	2010      	movs	r0, #16
 8005462:	f000 fde3 	bl	800602c <malloc>
 8005466:	4602      	mov	r2, r0
 8005468:	6268      	str	r0, [r5, #36]	; 0x24
 800546a:	b920      	cbnz	r0, 8005476 <_dtoa_r+0x2e>
 800546c:	21ea      	movs	r1, #234	; 0xea
 800546e:	4bae      	ldr	r3, [pc, #696]	; (8005728 <_dtoa_r+0x2e0>)
 8005470:	48ae      	ldr	r0, [pc, #696]	; (800572c <_dtoa_r+0x2e4>)
 8005472:	f001 fa45 	bl	8006900 <__assert_func>
 8005476:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800547a:	6004      	str	r4, [r0, #0]
 800547c:	60c4      	str	r4, [r0, #12]
 800547e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	b151      	cbz	r1, 800549a <_dtoa_r+0x52>
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	2301      	movs	r3, #1
 8005488:	4093      	lsls	r3, r2
 800548a:	604a      	str	r2, [r1, #4]
 800548c:	608b      	str	r3, [r1, #8]
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fe30 	bl	80060f4 <_Bfree>
 8005494:	2200      	movs	r2, #0
 8005496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	1e3b      	subs	r3, r7, #0
 800549c:	bfaf      	iteee	ge
 800549e:	2300      	movge	r3, #0
 80054a0:	2201      	movlt	r2, #1
 80054a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	9305      	strlt	r3, [sp, #20]
 80054a8:	bfa8      	it	ge
 80054aa:	f8c8 3000 	strge.w	r3, [r8]
 80054ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054b2:	4b9f      	ldr	r3, [pc, #636]	; (8005730 <_dtoa_r+0x2e8>)
 80054b4:	bfb8      	it	lt
 80054b6:	f8c8 2000 	strlt.w	r2, [r8]
 80054ba:	ea33 0309 	bics.w	r3, r3, r9
 80054be:	d119      	bne.n	80054f4 <_dtoa_r+0xac>
 80054c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80054c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054cc:	4333      	orrs	r3, r6
 80054ce:	f000 8580 	beq.w	8005fd2 <_dtoa_r+0xb8a>
 80054d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054d4:	b953      	cbnz	r3, 80054ec <_dtoa_r+0xa4>
 80054d6:	4b97      	ldr	r3, [pc, #604]	; (8005734 <_dtoa_r+0x2ec>)
 80054d8:	e022      	b.n	8005520 <_dtoa_r+0xd8>
 80054da:	4b97      	ldr	r3, [pc, #604]	; (8005738 <_dtoa_r+0x2f0>)
 80054dc:	9308      	str	r3, [sp, #32]
 80054de:	3308      	adds	r3, #8
 80054e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	9808      	ldr	r0, [sp, #32]
 80054e6:	b019      	add	sp, #100	; 0x64
 80054e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ec:	4b91      	ldr	r3, [pc, #580]	; (8005734 <_dtoa_r+0x2ec>)
 80054ee:	9308      	str	r3, [sp, #32]
 80054f0:	3303      	adds	r3, #3
 80054f2:	e7f5      	b.n	80054e0 <_dtoa_r+0x98>
 80054f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80054fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	f7fb fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8005508:	4680      	mov	r8, r0
 800550a:	b158      	cbz	r0, 8005524 <_dtoa_r+0xdc>
 800550c:	2301      	movs	r3, #1
 800550e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8559 	beq.w	8005fcc <_dtoa_r+0xb84>
 800551a:	4888      	ldr	r0, [pc, #544]	; (800573c <_dtoa_r+0x2f4>)
 800551c:	6018      	str	r0, [r3, #0]
 800551e:	1e43      	subs	r3, r0, #1
 8005520:	9308      	str	r3, [sp, #32]
 8005522:	e7df      	b.n	80054e4 <_dtoa_r+0x9c>
 8005524:	ab16      	add	r3, sp, #88	; 0x58
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	ab17      	add	r3, sp, #92	; 0x5c
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4628      	mov	r0, r5
 800552e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005532:	f001 f8c5 	bl	80066c0 <__d2b>
 8005536:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800553a:	4682      	mov	sl, r0
 800553c:	2c00      	cmp	r4, #0
 800553e:	d07e      	beq.n	800563e <_dtoa_r+0x1f6>
 8005540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005546:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800554a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800554e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005552:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005556:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800555a:	2200      	movs	r2, #0
 800555c:	4b78      	ldr	r3, [pc, #480]	; (8005740 <_dtoa_r+0x2f8>)
 800555e:	f7fa fe03 	bl	8000168 <__aeabi_dsub>
 8005562:	a36b      	add	r3, pc, #428	; (adr r3, 8005710 <_dtoa_r+0x2c8>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fa ffb6 	bl	80004d8 <__aeabi_dmul>
 800556c:	a36a      	add	r3, pc, #424	; (adr r3, 8005718 <_dtoa_r+0x2d0>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f7fa fdfb 	bl	800016c <__adddf3>
 8005576:	4606      	mov	r6, r0
 8005578:	4620      	mov	r0, r4
 800557a:	460f      	mov	r7, r1
 800557c:	f7fa ff42 	bl	8000404 <__aeabi_i2d>
 8005580:	a367      	add	r3, pc, #412	; (adr r3, 8005720 <_dtoa_r+0x2d8>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fa ffa7 	bl	80004d8 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa fdeb 	bl	800016c <__adddf3>
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	f7fb fa4d 	bl	8000a38 <__aeabi_d2iz>
 800559e:	2200      	movs	r2, #0
 80055a0:	4681      	mov	r9, r0
 80055a2:	2300      	movs	r3, #0
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fb fa08 	bl	80009bc <__aeabi_dcmplt>
 80055ac:	b148      	cbz	r0, 80055c2 <_dtoa_r+0x17a>
 80055ae:	4648      	mov	r0, r9
 80055b0:	f7fa ff28 	bl	8000404 <__aeabi_i2d>
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	f7fb f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80055bc:	b908      	cbnz	r0, 80055c2 <_dtoa_r+0x17a>
 80055be:	f109 39ff 	add.w	r9, r9, #4294967295
 80055c2:	f1b9 0f16 	cmp.w	r9, #22
 80055c6:	d857      	bhi.n	8005678 <_dtoa_r+0x230>
 80055c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055cc:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <_dtoa_r+0x2fc>)
 80055ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb f9f1 	bl	80009bc <__aeabi_dcmplt>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d04e      	beq.n	800567c <_dtoa_r+0x234>
 80055de:	2300      	movs	r3, #0
 80055e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80055e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055e8:	1b1c      	subs	r4, r3, r4
 80055ea:	1e63      	subs	r3, r4, #1
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	bf49      	itett	mi
 80055f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80055f4:	2300      	movpl	r3, #0
 80055f6:	9306      	strmi	r3, [sp, #24]
 80055f8:	2300      	movmi	r3, #0
 80055fa:	bf54      	ite	pl
 80055fc:	9306      	strpl	r3, [sp, #24]
 80055fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005600:	f1b9 0f00 	cmp.w	r9, #0
 8005604:	db3c      	blt.n	8005680 <_dtoa_r+0x238>
 8005606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005608:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800560c:	444b      	add	r3, r9
 800560e:	9309      	str	r3, [sp, #36]	; 0x24
 8005610:	2300      	movs	r3, #0
 8005612:	930a      	str	r3, [sp, #40]	; 0x28
 8005614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005616:	2b09      	cmp	r3, #9
 8005618:	d86c      	bhi.n	80056f4 <_dtoa_r+0x2ac>
 800561a:	2b05      	cmp	r3, #5
 800561c:	bfc4      	itt	gt
 800561e:	3b04      	subgt	r3, #4
 8005620:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005624:	bfc8      	it	gt
 8005626:	2400      	movgt	r4, #0
 8005628:	f1a3 0302 	sub.w	r3, r3, #2
 800562c:	bfd8      	it	le
 800562e:	2401      	movle	r4, #1
 8005630:	2b03      	cmp	r3, #3
 8005632:	f200 808b 	bhi.w	800574c <_dtoa_r+0x304>
 8005636:	e8df f003 	tbb	[pc, r3]
 800563a:	4f2d      	.short	0x4f2d
 800563c:	5b4d      	.short	0x5b4d
 800563e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005642:	441c      	add	r4, r3
 8005644:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005648:	2b20      	cmp	r3, #32
 800564a:	bfc3      	ittte	gt
 800564c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005650:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005654:	fa09 f303 	lslgt.w	r3, r9, r3
 8005658:	f1c3 0320 	rsble	r3, r3, #32
 800565c:	bfc6      	itte	gt
 800565e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005662:	4318      	orrgt	r0, r3
 8005664:	fa06 f003 	lslle.w	r0, r6, r3
 8005668:	f7fa febc 	bl	80003e4 <__aeabi_ui2d>
 800566c:	2301      	movs	r3, #1
 800566e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005672:	3c01      	subs	r4, #1
 8005674:	9313      	str	r3, [sp, #76]	; 0x4c
 8005676:	e770      	b.n	800555a <_dtoa_r+0x112>
 8005678:	2301      	movs	r3, #1
 800567a:	e7b3      	b.n	80055e4 <_dtoa_r+0x19c>
 800567c:	900f      	str	r0, [sp, #60]	; 0x3c
 800567e:	e7b2      	b.n	80055e6 <_dtoa_r+0x19e>
 8005680:	9b06      	ldr	r3, [sp, #24]
 8005682:	eba3 0309 	sub.w	r3, r3, r9
 8005686:	9306      	str	r3, [sp, #24]
 8005688:	f1c9 0300 	rsb	r3, r9, #0
 800568c:	930a      	str	r3, [sp, #40]	; 0x28
 800568e:	2300      	movs	r3, #0
 8005690:	930e      	str	r3, [sp, #56]	; 0x38
 8005692:	e7bf      	b.n	8005614 <_dtoa_r+0x1cc>
 8005694:	2300      	movs	r3, #0
 8005696:	930b      	str	r3, [sp, #44]	; 0x2c
 8005698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800569a:	2b00      	cmp	r3, #0
 800569c:	dc59      	bgt.n	8005752 <_dtoa_r+0x30a>
 800569e:	f04f 0b01 	mov.w	fp, #1
 80056a2:	465b      	mov	r3, fp
 80056a4:	f8cd b008 	str.w	fp, [sp, #8]
 80056a8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80056ac:	2200      	movs	r2, #0
 80056ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80056b0:	6042      	str	r2, [r0, #4]
 80056b2:	2204      	movs	r2, #4
 80056b4:	f102 0614 	add.w	r6, r2, #20
 80056b8:	429e      	cmp	r6, r3
 80056ba:	6841      	ldr	r1, [r0, #4]
 80056bc:	d94f      	bls.n	800575e <_dtoa_r+0x316>
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 fcd8 	bl	8006074 <_Balloc>
 80056c4:	9008      	str	r0, [sp, #32]
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d14d      	bne.n	8005766 <_dtoa_r+0x31e>
 80056ca:	4602      	mov	r2, r0
 80056cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056d0:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <_dtoa_r+0x300>)
 80056d2:	e6cd      	b.n	8005470 <_dtoa_r+0x28>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e7de      	b.n	8005696 <_dtoa_r+0x24e>
 80056d8:	2300      	movs	r3, #0
 80056da:	930b      	str	r3, [sp, #44]	; 0x2c
 80056dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056de:	eb09 0b03 	add.w	fp, r9, r3
 80056e2:	f10b 0301 	add.w	r3, fp, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	9302      	str	r3, [sp, #8]
 80056ea:	bfb8      	it	lt
 80056ec:	2301      	movlt	r3, #1
 80056ee:	e7dd      	b.n	80056ac <_dtoa_r+0x264>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e7f2      	b.n	80056da <_dtoa_r+0x292>
 80056f4:	2401      	movs	r4, #1
 80056f6:	2300      	movs	r3, #0
 80056f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80056fa:	9322      	str	r3, [sp, #136]	; 0x88
 80056fc:	f04f 3bff 	mov.w	fp, #4294967295
 8005700:	2200      	movs	r2, #0
 8005702:	2312      	movs	r3, #18
 8005704:	f8cd b008 	str.w	fp, [sp, #8]
 8005708:	9223      	str	r2, [sp, #140]	; 0x8c
 800570a:	e7cf      	b.n	80056ac <_dtoa_r+0x264>
 800570c:	f3af 8000 	nop.w
 8005710:	636f4361 	.word	0x636f4361
 8005714:	3fd287a7 	.word	0x3fd287a7
 8005718:	8b60c8b3 	.word	0x8b60c8b3
 800571c:	3fc68a28 	.word	0x3fc68a28
 8005720:	509f79fb 	.word	0x509f79fb
 8005724:	3fd34413 	.word	0x3fd34413
 8005728:	080076d5 	.word	0x080076d5
 800572c:	080076ec 	.word	0x080076ec
 8005730:	7ff00000 	.word	0x7ff00000
 8005734:	080076d1 	.word	0x080076d1
 8005738:	080076c8 	.word	0x080076c8
 800573c:	080076a5 	.word	0x080076a5
 8005740:	3ff80000 	.word	0x3ff80000
 8005744:	080077e8 	.word	0x080077e8
 8005748:	0800774b 	.word	0x0800774b
 800574c:	2301      	movs	r3, #1
 800574e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005750:	e7d4      	b.n	80056fc <_dtoa_r+0x2b4>
 8005752:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005756:	465b      	mov	r3, fp
 8005758:	f8cd b008 	str.w	fp, [sp, #8]
 800575c:	e7a6      	b.n	80056ac <_dtoa_r+0x264>
 800575e:	3101      	adds	r1, #1
 8005760:	6041      	str	r1, [r0, #4]
 8005762:	0052      	lsls	r2, r2, #1
 8005764:	e7a6      	b.n	80056b4 <_dtoa_r+0x26c>
 8005766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005768:	9a08      	ldr	r2, [sp, #32]
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	9b02      	ldr	r3, [sp, #8]
 800576e:	2b0e      	cmp	r3, #14
 8005770:	f200 80a8 	bhi.w	80058c4 <_dtoa_r+0x47c>
 8005774:	2c00      	cmp	r4, #0
 8005776:	f000 80a5 	beq.w	80058c4 <_dtoa_r+0x47c>
 800577a:	f1b9 0f00 	cmp.w	r9, #0
 800577e:	dd34      	ble.n	80057ea <_dtoa_r+0x3a2>
 8005780:	4a9a      	ldr	r2, [pc, #616]	; (80059ec <_dtoa_r+0x5a4>)
 8005782:	f009 030f 	and.w	r3, r9, #15
 8005786:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800578a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800578e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005792:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005796:	ea4f 1429 	mov.w	r4, r9, asr #4
 800579a:	d016      	beq.n	80057ca <_dtoa_r+0x382>
 800579c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057a0:	4b93      	ldr	r3, [pc, #588]	; (80059f0 <_dtoa_r+0x5a8>)
 80057a2:	2703      	movs	r7, #3
 80057a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057a8:	f7fa ffc0 	bl	800072c <__aeabi_ddiv>
 80057ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057b0:	f004 040f 	and.w	r4, r4, #15
 80057b4:	4e8e      	ldr	r6, [pc, #568]	; (80059f0 <_dtoa_r+0x5a8>)
 80057b6:	b954      	cbnz	r4, 80057ce <_dtoa_r+0x386>
 80057b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c0:	f7fa ffb4 	bl	800072c <__aeabi_ddiv>
 80057c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c8:	e029      	b.n	800581e <_dtoa_r+0x3d6>
 80057ca:	2702      	movs	r7, #2
 80057cc:	e7f2      	b.n	80057b4 <_dtoa_r+0x36c>
 80057ce:	07e1      	lsls	r1, r4, #31
 80057d0:	d508      	bpl.n	80057e4 <_dtoa_r+0x39c>
 80057d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057da:	f7fa fe7d 	bl	80004d8 <__aeabi_dmul>
 80057de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057e2:	3701      	adds	r7, #1
 80057e4:	1064      	asrs	r4, r4, #1
 80057e6:	3608      	adds	r6, #8
 80057e8:	e7e5      	b.n	80057b6 <_dtoa_r+0x36e>
 80057ea:	f000 80a5 	beq.w	8005938 <_dtoa_r+0x4f0>
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f2:	f1c9 0400 	rsb	r4, r9, #0
 80057f6:	4b7d      	ldr	r3, [pc, #500]	; (80059ec <_dtoa_r+0x5a4>)
 80057f8:	f004 020f 	and.w	r2, r4, #15
 80057fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	2702      	movs	r7, #2
 800580a:	2300      	movs	r3, #0
 800580c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005810:	4e77      	ldr	r6, [pc, #476]	; (80059f0 <_dtoa_r+0x5a8>)
 8005812:	1124      	asrs	r4, r4, #4
 8005814:	2c00      	cmp	r4, #0
 8005816:	f040 8084 	bne.w	8005922 <_dtoa_r+0x4da>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1d2      	bne.n	80057c4 <_dtoa_r+0x37c>
 800581e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 808b 	beq.w	800593c <_dtoa_r+0x4f4>
 8005826:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800582a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800582e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005832:	2200      	movs	r2, #0
 8005834:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <_dtoa_r+0x5ac>)
 8005836:	f7fb f8c1 	bl	80009bc <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	d07e      	beq.n	800593c <_dtoa_r+0x4f4>
 800583e:	9b02      	ldr	r3, [sp, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d07b      	beq.n	800593c <_dtoa_r+0x4f4>
 8005844:	f1bb 0f00 	cmp.w	fp, #0
 8005848:	dd38      	ble.n	80058bc <_dtoa_r+0x474>
 800584a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800584e:	2200      	movs	r2, #0
 8005850:	4b69      	ldr	r3, [pc, #420]	; (80059f8 <_dtoa_r+0x5b0>)
 8005852:	f7fa fe41 	bl	80004d8 <__aeabi_dmul>
 8005856:	465c      	mov	r4, fp
 8005858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800585c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005860:	3701      	adds	r7, #1
 8005862:	4638      	mov	r0, r7
 8005864:	f7fa fdce 	bl	8000404 <__aeabi_i2d>
 8005868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800586c:	f7fa fe34 	bl	80004d8 <__aeabi_dmul>
 8005870:	2200      	movs	r2, #0
 8005872:	4b62      	ldr	r3, [pc, #392]	; (80059fc <_dtoa_r+0x5b4>)
 8005874:	f7fa fc7a 	bl	800016c <__adddf3>
 8005878:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800587c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005880:	9611      	str	r6, [sp, #68]	; 0x44
 8005882:	2c00      	cmp	r4, #0
 8005884:	d15d      	bne.n	8005942 <_dtoa_r+0x4fa>
 8005886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800588a:	2200      	movs	r2, #0
 800588c:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <_dtoa_r+0x5b8>)
 800588e:	f7fa fc6b 	bl	8000168 <__aeabi_dsub>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800589a:	4633      	mov	r3, r6
 800589c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800589e:	f7fb f8ab 	bl	80009f8 <__aeabi_dcmpgt>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f040 829e 	bne.w	8005de4 <_dtoa_r+0x99c>
 80058a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058b2:	f7fb f883 	bl	80009bc <__aeabi_dcmplt>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	f040 8292 	bne.w	8005de0 <_dtoa_r+0x998>
 80058bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80058c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f2c0 8153 	blt.w	8005b72 <_dtoa_r+0x72a>
 80058cc:	f1b9 0f0e 	cmp.w	r9, #14
 80058d0:	f300 814f 	bgt.w	8005b72 <_dtoa_r+0x72a>
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <_dtoa_r+0x5a4>)
 80058d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80058da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f280 80db 	bge.w	8005aa0 <_dtoa_r+0x658>
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f300 80d7 	bgt.w	8005aa0 <_dtoa_r+0x658>
 80058f2:	f040 8274 	bne.w	8005dde <_dtoa_r+0x996>
 80058f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fa:	2200      	movs	r2, #0
 80058fc:	4b40      	ldr	r3, [pc, #256]	; (8005a00 <_dtoa_r+0x5b8>)
 80058fe:	f7fa fdeb 	bl	80004d8 <__aeabi_dmul>
 8005902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005906:	f7fb f86d 	bl	80009e4 <__aeabi_dcmpge>
 800590a:	9c02      	ldr	r4, [sp, #8]
 800590c:	4626      	mov	r6, r4
 800590e:	2800      	cmp	r0, #0
 8005910:	f040 824a 	bne.w	8005da8 <_dtoa_r+0x960>
 8005914:	2331      	movs	r3, #49	; 0x31
 8005916:	9f08      	ldr	r7, [sp, #32]
 8005918:	f109 0901 	add.w	r9, r9, #1
 800591c:	f807 3b01 	strb.w	r3, [r7], #1
 8005920:	e246      	b.n	8005db0 <_dtoa_r+0x968>
 8005922:	07e2      	lsls	r2, r4, #31
 8005924:	d505      	bpl.n	8005932 <_dtoa_r+0x4ea>
 8005926:	e9d6 2300 	ldrd	r2, r3, [r6]
 800592a:	f7fa fdd5 	bl	80004d8 <__aeabi_dmul>
 800592e:	2301      	movs	r3, #1
 8005930:	3701      	adds	r7, #1
 8005932:	1064      	asrs	r4, r4, #1
 8005934:	3608      	adds	r6, #8
 8005936:	e76d      	b.n	8005814 <_dtoa_r+0x3cc>
 8005938:	2702      	movs	r7, #2
 800593a:	e770      	b.n	800581e <_dtoa_r+0x3d6>
 800593c:	46c8      	mov	r8, r9
 800593e:	9c02      	ldr	r4, [sp, #8]
 8005940:	e78f      	b.n	8005862 <_dtoa_r+0x41a>
 8005942:	9908      	ldr	r1, [sp, #32]
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <_dtoa_r+0x5a4>)
 8005946:	4421      	add	r1, r4
 8005948:	9112      	str	r1, [sp, #72]	; 0x48
 800594a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800594c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005950:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005954:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005958:	2900      	cmp	r1, #0
 800595a:	d055      	beq.n	8005a08 <_dtoa_r+0x5c0>
 800595c:	2000      	movs	r0, #0
 800595e:	4929      	ldr	r1, [pc, #164]	; (8005a04 <_dtoa_r+0x5bc>)
 8005960:	f7fa fee4 	bl	800072c <__aeabi_ddiv>
 8005964:	463b      	mov	r3, r7
 8005966:	4632      	mov	r2, r6
 8005968:	f7fa fbfe 	bl	8000168 <__aeabi_dsub>
 800596c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005970:	9f08      	ldr	r7, [sp, #32]
 8005972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005976:	f7fb f85f 	bl	8000a38 <__aeabi_d2iz>
 800597a:	4604      	mov	r4, r0
 800597c:	f7fa fd42 	bl	8000404 <__aeabi_i2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005988:	f7fa fbee 	bl	8000168 <__aeabi_dsub>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	3430      	adds	r4, #48	; 0x30
 8005992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800599a:	f807 4b01 	strb.w	r4, [r7], #1
 800599e:	f7fb f80d 	bl	80009bc <__aeabi_dcmplt>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d174      	bne.n	8005a90 <_dtoa_r+0x648>
 80059a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059aa:	2000      	movs	r0, #0
 80059ac:	4911      	ldr	r1, [pc, #68]	; (80059f4 <_dtoa_r+0x5ac>)
 80059ae:	f7fa fbdb 	bl	8000168 <__aeabi_dsub>
 80059b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059b6:	f7fb f801 	bl	80009bc <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f040 80b6 	bne.w	8005b2c <_dtoa_r+0x6e4>
 80059c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059c2:	429f      	cmp	r7, r3
 80059c4:	f43f af7a 	beq.w	80058bc <_dtoa_r+0x474>
 80059c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059cc:	2200      	movs	r2, #0
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <_dtoa_r+0x5b0>)
 80059d0:	f7fa fd82 	bl	80004d8 <__aeabi_dmul>
 80059d4:	2200      	movs	r2, #0
 80059d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <_dtoa_r+0x5b0>)
 80059e0:	f7fa fd7a 	bl	80004d8 <__aeabi_dmul>
 80059e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e8:	e7c3      	b.n	8005972 <_dtoa_r+0x52a>
 80059ea:	bf00      	nop
 80059ec:	080077e8 	.word	0x080077e8
 80059f0:	080077c0 	.word	0x080077c0
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	401c0000 	.word	0x401c0000
 8005a00:	40140000 	.word	0x40140000
 8005a04:	3fe00000 	.word	0x3fe00000
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fd64 	bl	80004d8 <__aeabi_dmul>
 8005a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a16:	9c08      	ldr	r4, [sp, #32]
 8005a18:	9314      	str	r3, [sp, #80]	; 0x50
 8005a1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a1e:	f7fb f80b 	bl	8000a38 <__aeabi_d2iz>
 8005a22:	9015      	str	r0, [sp, #84]	; 0x54
 8005a24:	f7fa fcee 	bl	8000404 <__aeabi_i2d>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a30:	f7fa fb9a 	bl	8000168 <__aeabi_dsub>
 8005a34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a36:	4606      	mov	r6, r0
 8005a38:	3330      	adds	r3, #48	; 0x30
 8005a3a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a40:	460f      	mov	r7, r1
 8005a42:	429c      	cmp	r4, r3
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	d124      	bne.n	8005a94 <_dtoa_r+0x64c>
 8005a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a4e:	4bb3      	ldr	r3, [pc, #716]	; (8005d1c <_dtoa_r+0x8d4>)
 8005a50:	f7fa fb8c 	bl	800016c <__adddf3>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	f7fa ffcc 	bl	80009f8 <__aeabi_dcmpgt>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d162      	bne.n	8005b2a <_dtoa_r+0x6e2>
 8005a64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a68:	2000      	movs	r0, #0
 8005a6a:	49ac      	ldr	r1, [pc, #688]	; (8005d1c <_dtoa_r+0x8d4>)
 8005a6c:	f7fa fb7c 	bl	8000168 <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa ffa0 	bl	80009bc <__aeabi_dcmplt>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f43f af1d 	beq.w	80058bc <_dtoa_r+0x474>
 8005a82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a84:	1e7b      	subs	r3, r7, #1
 8005a86:	9314      	str	r3, [sp, #80]	; 0x50
 8005a88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d0f8      	beq.n	8005a82 <_dtoa_r+0x63a>
 8005a90:	46c1      	mov	r9, r8
 8005a92:	e03a      	b.n	8005b0a <_dtoa_r+0x6c2>
 8005a94:	4ba2      	ldr	r3, [pc, #648]	; (8005d20 <_dtoa_r+0x8d8>)
 8005a96:	f7fa fd1f 	bl	80004d8 <__aeabi_dmul>
 8005a9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a9e:	e7bc      	b.n	8005a1a <_dtoa_r+0x5d2>
 8005aa0:	9f08      	ldr	r7, [sp, #32]
 8005aa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aaa:	f7fa fe3f 	bl	800072c <__aeabi_ddiv>
 8005aae:	f7fa ffc3 	bl	8000a38 <__aeabi_d2iz>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	f7fa fca6 	bl	8000404 <__aeabi_i2d>
 8005ab8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005abc:	f7fa fd0c 	bl	80004d8 <__aeabi_dmul>
 8005ac0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005acc:	f7fa fb4c 	bl	8000168 <__aeabi_dsub>
 8005ad0:	f807 6b01 	strb.w	r6, [r7], #1
 8005ad4:	9e08      	ldr	r6, [sp, #32]
 8005ad6:	9b02      	ldr	r3, [sp, #8]
 8005ad8:	1bbe      	subs	r6, r7, r6
 8005ada:	42b3      	cmp	r3, r6
 8005adc:	d13a      	bne.n	8005b54 <_dtoa_r+0x70c>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	f7fa fb43 	bl	800016c <__adddf3>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005aee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005af2:	f7fa ff81 	bl	80009f8 <__aeabi_dcmpgt>
 8005af6:	bb58      	cbnz	r0, 8005b50 <_dtoa_r+0x708>
 8005af8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b00:	f7fa ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8005b04:	b108      	cbz	r0, 8005b0a <_dtoa_r+0x6c2>
 8005b06:	07e1      	lsls	r1, r4, #31
 8005b08:	d422      	bmi.n	8005b50 <_dtoa_r+0x708>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	4651      	mov	r1, sl
 8005b0e:	f000 faf1 	bl	80060f4 <_Bfree>
 8005b12:	2300      	movs	r3, #0
 8005b14:	703b      	strb	r3, [r7, #0]
 8005b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b18:	f109 0001 	add.w	r0, r9, #1
 8005b1c:	6018      	str	r0, [r3, #0]
 8005b1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f43f acdf 	beq.w	80054e4 <_dtoa_r+0x9c>
 8005b26:	601f      	str	r7, [r3, #0]
 8005b28:	e4dc      	b.n	80054e4 <_dtoa_r+0x9c>
 8005b2a:	4627      	mov	r7, r4
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	461f      	mov	r7, r3
 8005b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b34:	2a39      	cmp	r2, #57	; 0x39
 8005b36:	d107      	bne.n	8005b48 <_dtoa_r+0x700>
 8005b38:	9a08      	ldr	r2, [sp, #32]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d1f7      	bne.n	8005b2e <_dtoa_r+0x6e6>
 8005b3e:	2230      	movs	r2, #48	; 0x30
 8005b40:	9908      	ldr	r1, [sp, #32]
 8005b42:	f108 0801 	add.w	r8, r8, #1
 8005b46:	700a      	strb	r2, [r1, #0]
 8005b48:	781a      	ldrb	r2, [r3, #0]
 8005b4a:	3201      	adds	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e79f      	b.n	8005a90 <_dtoa_r+0x648>
 8005b50:	46c8      	mov	r8, r9
 8005b52:	e7eb      	b.n	8005b2c <_dtoa_r+0x6e4>
 8005b54:	2200      	movs	r2, #0
 8005b56:	4b72      	ldr	r3, [pc, #456]	; (8005d20 <_dtoa_r+0x8d8>)
 8005b58:	f7fa fcbe 	bl	80004d8 <__aeabi_dmul>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2300      	movs	r3, #0
 8005b68:	f7fa ff1e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d098      	beq.n	8005aa2 <_dtoa_r+0x65a>
 8005b70:	e7cb      	b.n	8005b0a <_dtoa_r+0x6c2>
 8005b72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	f000 80cd 	beq.w	8005d14 <_dtoa_r+0x8cc>
 8005b7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b7c:	2a01      	cmp	r2, #1
 8005b7e:	f300 80af 	bgt.w	8005ce0 <_dtoa_r+0x898>
 8005b82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b84:	2a00      	cmp	r2, #0
 8005b86:	f000 80a7 	beq.w	8005cd8 <_dtoa_r+0x890>
 8005b8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b90:	9f06      	ldr	r7, [sp, #24]
 8005b92:	9a06      	ldr	r2, [sp, #24]
 8005b94:	2101      	movs	r1, #1
 8005b96:	441a      	add	r2, r3
 8005b98:	9206      	str	r2, [sp, #24]
 8005b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	441a      	add	r2, r3
 8005ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba2:	f000 fb61 	bl	8006268 <__i2b>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	dd0c      	ble.n	8005bc6 <_dtoa_r+0x77e>
 8005bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd09      	ble.n	8005bc6 <_dtoa_r+0x77e>
 8005bb2:	42bb      	cmp	r3, r7
 8005bb4:	bfa8      	it	ge
 8005bb6:	463b      	movge	r3, r7
 8005bb8:	9a06      	ldr	r2, [sp, #24]
 8005bba:	1aff      	subs	r7, r7, r3
 8005bbc:	1ad2      	subs	r2, r2, r3
 8005bbe:	9206      	str	r2, [sp, #24]
 8005bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc8:	b1f3      	cbz	r3, 8005c08 <_dtoa_r+0x7c0>
 8005bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80a9 	beq.w	8005d24 <_dtoa_r+0x8dc>
 8005bd2:	2c00      	cmp	r4, #0
 8005bd4:	dd10      	ble.n	8005bf8 <_dtoa_r+0x7b0>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 fbfe 	bl	80063dc <__pow5mult>
 8005be0:	4652      	mov	r2, sl
 8005be2:	4601      	mov	r1, r0
 8005be4:	4606      	mov	r6, r0
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fb54 	bl	8006294 <__multiply>
 8005bec:	4680      	mov	r8, r0
 8005bee:	4651      	mov	r1, sl
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 fa7f 	bl	80060f4 <_Bfree>
 8005bf6:	46c2      	mov	sl, r8
 8005bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfa:	1b1a      	subs	r2, r3, r4
 8005bfc:	d004      	beq.n	8005c08 <_dtoa_r+0x7c0>
 8005bfe:	4651      	mov	r1, sl
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 fbeb 	bl	80063dc <__pow5mult>
 8005c06:	4682      	mov	sl, r0
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 fb2c 	bl	8006268 <__i2b>
 8005c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c12:	4604      	mov	r4, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f340 8087 	ble.w	8005d28 <_dtoa_r+0x8e0>
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4601      	mov	r1, r0
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 fbdc 	bl	80063dc <__pow5mult>
 8005c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c26:	4604      	mov	r4, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f340 8080 	ble.w	8005d2e <_dtoa_r+0x8e6>
 8005c2e:	f04f 0800 	mov.w	r8, #0
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c38:	6918      	ldr	r0, [r3, #16]
 8005c3a:	f000 fac7 	bl	80061cc <__hi0bits>
 8005c3e:	f1c0 0020 	rsb	r0, r0, #32
 8005c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c44:	4418      	add	r0, r3
 8005c46:	f010 001f 	ands.w	r0, r0, #31
 8005c4a:	f000 8092 	beq.w	8005d72 <_dtoa_r+0x92a>
 8005c4e:	f1c0 0320 	rsb	r3, r0, #32
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	f340 808a 	ble.w	8005d6c <_dtoa_r+0x924>
 8005c58:	f1c0 001c 	rsb	r0, r0, #28
 8005c5c:	9b06      	ldr	r3, [sp, #24]
 8005c5e:	4407      	add	r7, r0
 8005c60:	4403      	add	r3, r0
 8005c62:	9306      	str	r3, [sp, #24]
 8005c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c66:	4403      	add	r3, r0
 8005c68:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6a:	9b06      	ldr	r3, [sp, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dd05      	ble.n	8005c7c <_dtoa_r+0x834>
 8005c70:	4651      	mov	r1, sl
 8005c72:	461a      	mov	r2, r3
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 fc0b 	bl	8006490 <__lshift>
 8005c7a:	4682      	mov	sl, r0
 8005c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dd05      	ble.n	8005c8e <_dtoa_r+0x846>
 8005c82:	4621      	mov	r1, r4
 8005c84:	461a      	mov	r2, r3
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 fc02 	bl	8006490 <__lshift>
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d070      	beq.n	8005d76 <_dtoa_r+0x92e>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4650      	mov	r0, sl
 8005c98:	f000 fc66 	bl	8006568 <__mcmp>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	da6a      	bge.n	8005d76 <_dtoa_r+0x92e>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4651      	mov	r1, sl
 8005ca4:	220a      	movs	r2, #10
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fa46 	bl	8006138 <__multadd>
 8005cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cae:	4682      	mov	sl, r0
 8005cb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8193 	beq.w	8005fe0 <_dtoa_r+0xb98>
 8005cba:	4631      	mov	r1, r6
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	220a      	movs	r2, #10
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f000 fa39 	bl	8006138 <__multadd>
 8005cc6:	f1bb 0f00 	cmp.w	fp, #0
 8005cca:	4606      	mov	r6, r0
 8005ccc:	f300 8093 	bgt.w	8005df6 <_dtoa_r+0x9ae>
 8005cd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	dc57      	bgt.n	8005d86 <_dtoa_r+0x93e>
 8005cd6:	e08e      	b.n	8005df6 <_dtoa_r+0x9ae>
 8005cd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cde:	e756      	b.n	8005b8e <_dtoa_r+0x746>
 8005ce0:	9b02      	ldr	r3, [sp, #8]
 8005ce2:	1e5c      	subs	r4, r3, #1
 8005ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	bfb7      	itett	lt
 8005cea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005cec:	1b1c      	subge	r4, r3, r4
 8005cee:	1ae2      	sublt	r2, r4, r3
 8005cf0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005cf2:	bfbe      	ittt	lt
 8005cf4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005cf6:	189b      	addlt	r3, r3, r2
 8005cf8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005cfa:	9b02      	ldr	r3, [sp, #8]
 8005cfc:	bfb8      	it	lt
 8005cfe:	2400      	movlt	r4, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bfbb      	ittet	lt
 8005d04:	9b06      	ldrlt	r3, [sp, #24]
 8005d06:	9a02      	ldrlt	r2, [sp, #8]
 8005d08:	9f06      	ldrge	r7, [sp, #24]
 8005d0a:	1a9f      	sublt	r7, r3, r2
 8005d0c:	bfac      	ite	ge
 8005d0e:	9b02      	ldrge	r3, [sp, #8]
 8005d10:	2300      	movlt	r3, #0
 8005d12:	e73e      	b.n	8005b92 <_dtoa_r+0x74a>
 8005d14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d16:	9f06      	ldr	r7, [sp, #24]
 8005d18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d1a:	e745      	b.n	8005ba8 <_dtoa_r+0x760>
 8005d1c:	3fe00000 	.word	0x3fe00000
 8005d20:	40240000 	.word	0x40240000
 8005d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d26:	e76a      	b.n	8005bfe <_dtoa_r+0x7b6>
 8005d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	dc19      	bgt.n	8005d62 <_dtoa_r+0x91a>
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	b9bb      	cbnz	r3, 8005d62 <_dtoa_r+0x91a>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d38:	b99b      	cbnz	r3, 8005d62 <_dtoa_r+0x91a>
 8005d3a:	9b05      	ldr	r3, [sp, #20]
 8005d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d40:	0d1b      	lsrs	r3, r3, #20
 8005d42:	051b      	lsls	r3, r3, #20
 8005d44:	b183      	cbz	r3, 8005d68 <_dtoa_r+0x920>
 8005d46:	f04f 0801 	mov.w	r8, #1
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	9306      	str	r3, [sp, #24]
 8005d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d52:	3301      	adds	r3, #1
 8005d54:	9309      	str	r3, [sp, #36]	; 0x24
 8005d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f47f af6a 	bne.w	8005c32 <_dtoa_r+0x7ea>
 8005d5e:	2001      	movs	r0, #1
 8005d60:	e76f      	b.n	8005c42 <_dtoa_r+0x7fa>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	e7f6      	b.n	8005d56 <_dtoa_r+0x90e>
 8005d68:	4698      	mov	r8, r3
 8005d6a:	e7f4      	b.n	8005d56 <_dtoa_r+0x90e>
 8005d6c:	f43f af7d 	beq.w	8005c6a <_dtoa_r+0x822>
 8005d70:	4618      	mov	r0, r3
 8005d72:	301c      	adds	r0, #28
 8005d74:	e772      	b.n	8005c5c <_dtoa_r+0x814>
 8005d76:	9b02      	ldr	r3, [sp, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dc36      	bgt.n	8005dea <_dtoa_r+0x9a2>
 8005d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	dd33      	ble.n	8005dea <_dtoa_r+0x9a2>
 8005d82:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005d86:	f1bb 0f00 	cmp.w	fp, #0
 8005d8a:	d10d      	bne.n	8005da8 <_dtoa_r+0x960>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	465b      	mov	r3, fp
 8005d90:	2205      	movs	r2, #5
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 f9d0 	bl	8006138 <__multadd>
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	f000 fbe3 	bl	8006568 <__mcmp>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	f73f adb6 	bgt.w	8005914 <_dtoa_r+0x4cc>
 8005da8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005daa:	9f08      	ldr	r7, [sp, #32]
 8005dac:	ea6f 0903 	mvn.w	r9, r3
 8005db0:	f04f 0800 	mov.w	r8, #0
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f99c 	bl	80060f4 <_Bfree>
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	f43f aea4 	beq.w	8005b0a <_dtoa_r+0x6c2>
 8005dc2:	f1b8 0f00 	cmp.w	r8, #0
 8005dc6:	d005      	beq.n	8005dd4 <_dtoa_r+0x98c>
 8005dc8:	45b0      	cmp	r8, r6
 8005dca:	d003      	beq.n	8005dd4 <_dtoa_r+0x98c>
 8005dcc:	4641      	mov	r1, r8
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 f990 	bl	80060f4 <_Bfree>
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f98c 	bl	80060f4 <_Bfree>
 8005ddc:	e695      	b.n	8005b0a <_dtoa_r+0x6c2>
 8005dde:	2400      	movs	r4, #0
 8005de0:	4626      	mov	r6, r4
 8005de2:	e7e1      	b.n	8005da8 <_dtoa_r+0x960>
 8005de4:	46c1      	mov	r9, r8
 8005de6:	4626      	mov	r6, r4
 8005de8:	e594      	b.n	8005914 <_dtoa_r+0x4cc>
 8005dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dec:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80fc 	beq.w	8005fee <_dtoa_r+0xba6>
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	dd05      	ble.n	8005e06 <_dtoa_r+0x9be>
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	463a      	mov	r2, r7
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 fb46 	bl	8006490 <__lshift>
 8005e04:	4606      	mov	r6, r0
 8005e06:	f1b8 0f00 	cmp.w	r8, #0
 8005e0a:	d05c      	beq.n	8005ec6 <_dtoa_r+0xa7e>
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	6871      	ldr	r1, [r6, #4]
 8005e10:	f000 f930 	bl	8006074 <_Balloc>
 8005e14:	4607      	mov	r7, r0
 8005e16:	b928      	cbnz	r0, 8005e24 <_dtoa_r+0x9dc>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e1e:	4b7e      	ldr	r3, [pc, #504]	; (8006018 <_dtoa_r+0xbd0>)
 8005e20:	f7ff bb26 	b.w	8005470 <_dtoa_r+0x28>
 8005e24:	6932      	ldr	r2, [r6, #16]
 8005e26:	f106 010c 	add.w	r1, r6, #12
 8005e2a:	3202      	adds	r2, #2
 8005e2c:	0092      	lsls	r2, r2, #2
 8005e2e:	300c      	adds	r0, #12
 8005e30:	f000 f912 	bl	8006058 <memcpy>
 8005e34:	2201      	movs	r2, #1
 8005e36:	4639      	mov	r1, r7
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f000 fb29 	bl	8006490 <__lshift>
 8005e3e:	46b0      	mov	r8, r6
 8005e40:	4606      	mov	r6, r0
 8005e42:	9b08      	ldr	r3, [sp, #32]
 8005e44:	3301      	adds	r3, #1
 8005e46:	9302      	str	r3, [sp, #8]
 8005e48:	9b08      	ldr	r3, [sp, #32]
 8005e4a:	445b      	add	r3, fp
 8005e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	9309      	str	r3, [sp, #36]	; 0x24
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e60:	f7ff fa62 	bl	8005328 <quorem>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4641      	mov	r1, r8
 8005e68:	3330      	adds	r3, #48	; 0x30
 8005e6a:	9004      	str	r0, [sp, #16]
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e70:	f000 fb7a 	bl	8006568 <__mcmp>
 8005e74:	4632      	mov	r2, r6
 8005e76:	9006      	str	r0, [sp, #24]
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 fb90 	bl	80065a0 <__mdiff>
 8005e80:	68c2      	ldr	r2, [r0, #12]
 8005e82:	4607      	mov	r7, r0
 8005e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e86:	bb02      	cbnz	r2, 8005eca <_dtoa_r+0xa82>
 8005e88:	4601      	mov	r1, r0
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	f000 fb6c 	bl	8006568 <__mcmp>
 8005e90:	4602      	mov	r2, r0
 8005e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e94:	4639      	mov	r1, r7
 8005e96:	4628      	mov	r0, r5
 8005e98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005e9c:	f000 f92a 	bl	80060f4 <_Bfree>
 8005ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ea4:	9f02      	ldr	r7, [sp, #8]
 8005ea6:	ea43 0102 	orr.w	r1, r3, r2
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	430b      	orrs	r3, r1
 8005eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb0:	d10d      	bne.n	8005ece <_dtoa_r+0xa86>
 8005eb2:	2b39      	cmp	r3, #57	; 0x39
 8005eb4:	d027      	beq.n	8005f06 <_dtoa_r+0xabe>
 8005eb6:	9a06      	ldr	r2, [sp, #24]
 8005eb8:	2a00      	cmp	r2, #0
 8005eba:	dd01      	ble.n	8005ec0 <_dtoa_r+0xa78>
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	3331      	adds	r3, #49	; 0x31
 8005ec0:	f88b 3000 	strb.w	r3, [fp]
 8005ec4:	e776      	b.n	8005db4 <_dtoa_r+0x96c>
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	e7b9      	b.n	8005e3e <_dtoa_r+0x9f6>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	e7e2      	b.n	8005e94 <_dtoa_r+0xa4c>
 8005ece:	9906      	ldr	r1, [sp, #24]
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	db04      	blt.n	8005ede <_dtoa_r+0xa96>
 8005ed4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005ed6:	4301      	orrs	r1, r0
 8005ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eda:	4301      	orrs	r1, r0
 8005edc:	d120      	bne.n	8005f20 <_dtoa_r+0xad8>
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	ddee      	ble.n	8005ec0 <_dtoa_r+0xa78>
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	9302      	str	r3, [sp, #8]
 8005eea:	f000 fad1 	bl	8006490 <__lshift>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	f000 fb39 	bl	8006568 <__mcmp>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	9b02      	ldr	r3, [sp, #8]
 8005efa:	dc02      	bgt.n	8005f02 <_dtoa_r+0xaba>
 8005efc:	d1e0      	bne.n	8005ec0 <_dtoa_r+0xa78>
 8005efe:	07da      	lsls	r2, r3, #31
 8005f00:	d5de      	bpl.n	8005ec0 <_dtoa_r+0xa78>
 8005f02:	2b39      	cmp	r3, #57	; 0x39
 8005f04:	d1da      	bne.n	8005ebc <_dtoa_r+0xa74>
 8005f06:	2339      	movs	r3, #57	; 0x39
 8005f08:	f88b 3000 	strb.w	r3, [fp]
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	461f      	mov	r7, r3
 8005f10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	2a39      	cmp	r2, #57	; 0x39
 8005f18:	d050      	beq.n	8005fbc <_dtoa_r+0xb74>
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e749      	b.n	8005db4 <_dtoa_r+0x96c>
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	dd03      	ble.n	8005f2c <_dtoa_r+0xae4>
 8005f24:	2b39      	cmp	r3, #57	; 0x39
 8005f26:	d0ee      	beq.n	8005f06 <_dtoa_r+0xabe>
 8005f28:	3301      	adds	r3, #1
 8005f2a:	e7c9      	b.n	8005ec0 <_dtoa_r+0xa78>
 8005f2c:	9a02      	ldr	r2, [sp, #8]
 8005f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f34:	428a      	cmp	r2, r1
 8005f36:	d02a      	beq.n	8005f8e <_dtoa_r+0xb46>
 8005f38:	4651      	mov	r1, sl
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f8fa 	bl	8006138 <__multadd>
 8005f44:	45b0      	cmp	r8, r6
 8005f46:	4682      	mov	sl, r0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	f04f 020a 	mov.w	r2, #10
 8005f50:	4641      	mov	r1, r8
 8005f52:	4628      	mov	r0, r5
 8005f54:	d107      	bne.n	8005f66 <_dtoa_r+0xb1e>
 8005f56:	f000 f8ef 	bl	8006138 <__multadd>
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	9b02      	ldr	r3, [sp, #8]
 8005f60:	3301      	adds	r3, #1
 8005f62:	9302      	str	r3, [sp, #8]
 8005f64:	e777      	b.n	8005e56 <_dtoa_r+0xa0e>
 8005f66:	f000 f8e7 	bl	8006138 <__multadd>
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	2300      	movs	r3, #0
 8005f70:	220a      	movs	r2, #10
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 f8e0 	bl	8006138 <__multadd>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	e7f0      	b.n	8005f5e <_dtoa_r+0xb16>
 8005f7c:	f1bb 0f00 	cmp.w	fp, #0
 8005f80:	bfcc      	ite	gt
 8005f82:	465f      	movgt	r7, fp
 8005f84:	2701      	movle	r7, #1
 8005f86:	f04f 0800 	mov.w	r8, #0
 8005f8a:	9a08      	ldr	r2, [sp, #32]
 8005f8c:	4417      	add	r7, r2
 8005f8e:	4651      	mov	r1, sl
 8005f90:	2201      	movs	r2, #1
 8005f92:	4628      	mov	r0, r5
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	f000 fa7b 	bl	8006490 <__lshift>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4682      	mov	sl, r0
 8005f9e:	f000 fae3 	bl	8006568 <__mcmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	dcb2      	bgt.n	8005f0c <_dtoa_r+0xac4>
 8005fa6:	d102      	bne.n	8005fae <_dtoa_r+0xb66>
 8005fa8:	9b02      	ldr	r3, [sp, #8]
 8005faa:	07db      	lsls	r3, r3, #31
 8005fac:	d4ae      	bmi.n	8005f0c <_dtoa_r+0xac4>
 8005fae:	463b      	mov	r3, r7
 8005fb0:	461f      	mov	r7, r3
 8005fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fb6:	2a30      	cmp	r2, #48	; 0x30
 8005fb8:	d0fa      	beq.n	8005fb0 <_dtoa_r+0xb68>
 8005fba:	e6fb      	b.n	8005db4 <_dtoa_r+0x96c>
 8005fbc:	9a08      	ldr	r2, [sp, #32]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d1a5      	bne.n	8005f0e <_dtoa_r+0xac6>
 8005fc2:	2331      	movs	r3, #49	; 0x31
 8005fc4:	f109 0901 	add.w	r9, r9, #1
 8005fc8:	7013      	strb	r3, [r2, #0]
 8005fca:	e6f3      	b.n	8005db4 <_dtoa_r+0x96c>
 8005fcc:	4b13      	ldr	r3, [pc, #76]	; (800601c <_dtoa_r+0xbd4>)
 8005fce:	f7ff baa7 	b.w	8005520 <_dtoa_r+0xd8>
 8005fd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f47f aa80 	bne.w	80054da <_dtoa_r+0x92>
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <_dtoa_r+0xbd8>)
 8005fdc:	f7ff baa0 	b.w	8005520 <_dtoa_r+0xd8>
 8005fe0:	f1bb 0f00 	cmp.w	fp, #0
 8005fe4:	dc03      	bgt.n	8005fee <_dtoa_r+0xba6>
 8005fe6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	f73f aecc 	bgt.w	8005d86 <_dtoa_r+0x93e>
 8005fee:	9f08      	ldr	r7, [sp, #32]
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	f7ff f998 	bl	8005328 <quorem>
 8005ff8:	9a08      	ldr	r2, [sp, #32]
 8005ffa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ffe:	f807 3b01 	strb.w	r3, [r7], #1
 8006002:	1aba      	subs	r2, r7, r2
 8006004:	4593      	cmp	fp, r2
 8006006:	ddb9      	ble.n	8005f7c <_dtoa_r+0xb34>
 8006008:	4651      	mov	r1, sl
 800600a:	2300      	movs	r3, #0
 800600c:	220a      	movs	r2, #10
 800600e:	4628      	mov	r0, r5
 8006010:	f000 f892 	bl	8006138 <__multadd>
 8006014:	4682      	mov	sl, r0
 8006016:	e7eb      	b.n	8005ff0 <_dtoa_r+0xba8>
 8006018:	0800774b 	.word	0x0800774b
 800601c:	080076a4 	.word	0x080076a4
 8006020:	080076c8 	.word	0x080076c8

08006024 <_localeconv_r>:
 8006024:	4800      	ldr	r0, [pc, #0]	; (8006028 <_localeconv_r+0x4>)
 8006026:	4770      	bx	lr
 8006028:	20000174 	.word	0x20000174

0800602c <malloc>:
 800602c:	4b02      	ldr	r3, [pc, #8]	; (8006038 <malloc+0xc>)
 800602e:	4601      	mov	r1, r0
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	f000 bbfb 	b.w	800682c <_malloc_r>
 8006036:	bf00      	nop
 8006038:	20000020 	.word	0x20000020

0800603c <memchr>:
 800603c:	4603      	mov	r3, r0
 800603e:	b510      	push	{r4, lr}
 8006040:	b2c9      	uxtb	r1, r1
 8006042:	4402      	add	r2, r0
 8006044:	4293      	cmp	r3, r2
 8006046:	4618      	mov	r0, r3
 8006048:	d101      	bne.n	800604e <memchr+0x12>
 800604a:	2000      	movs	r0, #0
 800604c:	e003      	b.n	8006056 <memchr+0x1a>
 800604e:	7804      	ldrb	r4, [r0, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	428c      	cmp	r4, r1
 8006054:	d1f6      	bne.n	8006044 <memchr+0x8>
 8006056:	bd10      	pop	{r4, pc}

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	4291      	cmp	r1, r2
 800606c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <_Balloc>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006078:	4604      	mov	r4, r0
 800607a:	460d      	mov	r5, r1
 800607c:	b976      	cbnz	r6, 800609c <_Balloc+0x28>
 800607e:	2010      	movs	r0, #16
 8006080:	f7ff ffd4 	bl	800602c <malloc>
 8006084:	4602      	mov	r2, r0
 8006086:	6260      	str	r0, [r4, #36]	; 0x24
 8006088:	b920      	cbnz	r0, 8006094 <_Balloc+0x20>
 800608a:	2166      	movs	r1, #102	; 0x66
 800608c:	4b17      	ldr	r3, [pc, #92]	; (80060ec <_Balloc+0x78>)
 800608e:	4818      	ldr	r0, [pc, #96]	; (80060f0 <_Balloc+0x7c>)
 8006090:	f000 fc36 	bl	8006900 <__assert_func>
 8006094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006098:	6006      	str	r6, [r0, #0]
 800609a:	60c6      	str	r6, [r0, #12]
 800609c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800609e:	68f3      	ldr	r3, [r6, #12]
 80060a0:	b183      	cbz	r3, 80060c4 <_Balloc+0x50>
 80060a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060aa:	b9b8      	cbnz	r0, 80060dc <_Balloc+0x68>
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f605 	lsl.w	r6, r1, r5
 80060b2:	1d72      	adds	r2, r6, #5
 80060b4:	4620      	mov	r0, r4
 80060b6:	0092      	lsls	r2, r2, #2
 80060b8:	f000 fb5e 	bl	8006778 <_calloc_r>
 80060bc:	b160      	cbz	r0, 80060d8 <_Balloc+0x64>
 80060be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060c2:	e00e      	b.n	80060e2 <_Balloc+0x6e>
 80060c4:	2221      	movs	r2, #33	; 0x21
 80060c6:	2104      	movs	r1, #4
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fb55 	bl	8006778 <_calloc_r>
 80060ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060d0:	60f0      	str	r0, [r6, #12]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e4      	bne.n	80060a2 <_Balloc+0x2e>
 80060d8:	2000      	movs	r0, #0
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	6802      	ldr	r2, [r0, #0]
 80060de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060e2:	2300      	movs	r3, #0
 80060e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060e8:	e7f7      	b.n	80060da <_Balloc+0x66>
 80060ea:	bf00      	nop
 80060ec:	080076d5 	.word	0x080076d5
 80060f0:	0800775c 	.word	0x0800775c

080060f4 <_Bfree>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060f8:	4605      	mov	r5, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	b976      	cbnz	r6, 800611c <_Bfree+0x28>
 80060fe:	2010      	movs	r0, #16
 8006100:	f7ff ff94 	bl	800602c <malloc>
 8006104:	4602      	mov	r2, r0
 8006106:	6268      	str	r0, [r5, #36]	; 0x24
 8006108:	b920      	cbnz	r0, 8006114 <_Bfree+0x20>
 800610a:	218a      	movs	r1, #138	; 0x8a
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <_Bfree+0x3c>)
 800610e:	4809      	ldr	r0, [pc, #36]	; (8006134 <_Bfree+0x40>)
 8006110:	f000 fbf6 	bl	8006900 <__assert_func>
 8006114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006118:	6006      	str	r6, [r0, #0]
 800611a:	60c6      	str	r6, [r0, #12]
 800611c:	b13c      	cbz	r4, 800612e <_Bfree+0x3a>
 800611e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006120:	6862      	ldr	r2, [r4, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006128:	6021      	str	r1, [r4, #0]
 800612a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	080076d5 	.word	0x080076d5
 8006134:	0800775c 	.word	0x0800775c

08006138 <__multadd>:
 8006138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613c:	4698      	mov	r8, r3
 800613e:	460c      	mov	r4, r1
 8006140:	2300      	movs	r3, #0
 8006142:	690e      	ldr	r6, [r1, #16]
 8006144:	4607      	mov	r7, r0
 8006146:	f101 0014 	add.w	r0, r1, #20
 800614a:	6805      	ldr	r5, [r0, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	b2a9      	uxth	r1, r5
 8006150:	fb02 8101 	mla	r1, r2, r1, r8
 8006154:	0c2d      	lsrs	r5, r5, #16
 8006156:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800615a:	fb02 c505 	mla	r5, r2, r5, ip
 800615e:	b289      	uxth	r1, r1
 8006160:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006164:	429e      	cmp	r6, r3
 8006166:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800616a:	f840 1b04 	str.w	r1, [r0], #4
 800616e:	dcec      	bgt.n	800614a <__multadd+0x12>
 8006170:	f1b8 0f00 	cmp.w	r8, #0
 8006174:	d022      	beq.n	80061bc <__multadd+0x84>
 8006176:	68a3      	ldr	r3, [r4, #8]
 8006178:	42b3      	cmp	r3, r6
 800617a:	dc19      	bgt.n	80061b0 <__multadd+0x78>
 800617c:	6861      	ldr	r1, [r4, #4]
 800617e:	4638      	mov	r0, r7
 8006180:	3101      	adds	r1, #1
 8006182:	f7ff ff77 	bl	8006074 <_Balloc>
 8006186:	4605      	mov	r5, r0
 8006188:	b928      	cbnz	r0, 8006196 <__multadd+0x5e>
 800618a:	4602      	mov	r2, r0
 800618c:	21b5      	movs	r1, #181	; 0xb5
 800618e:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <__multadd+0x8c>)
 8006190:	480d      	ldr	r0, [pc, #52]	; (80061c8 <__multadd+0x90>)
 8006192:	f000 fbb5 	bl	8006900 <__assert_func>
 8006196:	6922      	ldr	r2, [r4, #16]
 8006198:	f104 010c 	add.w	r1, r4, #12
 800619c:	3202      	adds	r2, #2
 800619e:	0092      	lsls	r2, r2, #2
 80061a0:	300c      	adds	r0, #12
 80061a2:	f7ff ff59 	bl	8006058 <memcpy>
 80061a6:	4621      	mov	r1, r4
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff ffa3 	bl	80060f4 <_Bfree>
 80061ae:	462c      	mov	r4, r5
 80061b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80061b4:	3601      	adds	r6, #1
 80061b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80061ba:	6126      	str	r6, [r4, #16]
 80061bc:	4620      	mov	r0, r4
 80061be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c2:	bf00      	nop
 80061c4:	0800774b 	.word	0x0800774b
 80061c8:	0800775c 	.word	0x0800775c

080061cc <__hi0bits>:
 80061cc:	0c02      	lsrs	r2, r0, #16
 80061ce:	0412      	lsls	r2, r2, #16
 80061d0:	4603      	mov	r3, r0
 80061d2:	b9ca      	cbnz	r2, 8006208 <__hi0bits+0x3c>
 80061d4:	0403      	lsls	r3, r0, #16
 80061d6:	2010      	movs	r0, #16
 80061d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061dc:	bf04      	itt	eq
 80061de:	021b      	lsleq	r3, r3, #8
 80061e0:	3008      	addeq	r0, #8
 80061e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061e6:	bf04      	itt	eq
 80061e8:	011b      	lsleq	r3, r3, #4
 80061ea:	3004      	addeq	r0, #4
 80061ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061f0:	bf04      	itt	eq
 80061f2:	009b      	lsleq	r3, r3, #2
 80061f4:	3002      	addeq	r0, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db05      	blt.n	8006206 <__hi0bits+0x3a>
 80061fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061fe:	f100 0001 	add.w	r0, r0, #1
 8006202:	bf08      	it	eq
 8006204:	2020      	moveq	r0, #32
 8006206:	4770      	bx	lr
 8006208:	2000      	movs	r0, #0
 800620a:	e7e5      	b.n	80061d8 <__hi0bits+0xc>

0800620c <__lo0bits>:
 800620c:	6803      	ldr	r3, [r0, #0]
 800620e:	4602      	mov	r2, r0
 8006210:	f013 0007 	ands.w	r0, r3, #7
 8006214:	d00b      	beq.n	800622e <__lo0bits+0x22>
 8006216:	07d9      	lsls	r1, r3, #31
 8006218:	d422      	bmi.n	8006260 <__lo0bits+0x54>
 800621a:	0798      	lsls	r0, r3, #30
 800621c:	bf49      	itett	mi
 800621e:	085b      	lsrmi	r3, r3, #1
 8006220:	089b      	lsrpl	r3, r3, #2
 8006222:	2001      	movmi	r0, #1
 8006224:	6013      	strmi	r3, [r2, #0]
 8006226:	bf5c      	itt	pl
 8006228:	2002      	movpl	r0, #2
 800622a:	6013      	strpl	r3, [r2, #0]
 800622c:	4770      	bx	lr
 800622e:	b299      	uxth	r1, r3
 8006230:	b909      	cbnz	r1, 8006236 <__lo0bits+0x2a>
 8006232:	2010      	movs	r0, #16
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	f013 0fff 	tst.w	r3, #255	; 0xff
 800623a:	bf04      	itt	eq
 800623c:	0a1b      	lsreq	r3, r3, #8
 800623e:	3008      	addeq	r0, #8
 8006240:	0719      	lsls	r1, r3, #28
 8006242:	bf04      	itt	eq
 8006244:	091b      	lsreq	r3, r3, #4
 8006246:	3004      	addeq	r0, #4
 8006248:	0799      	lsls	r1, r3, #30
 800624a:	bf04      	itt	eq
 800624c:	089b      	lsreq	r3, r3, #2
 800624e:	3002      	addeq	r0, #2
 8006250:	07d9      	lsls	r1, r3, #31
 8006252:	d403      	bmi.n	800625c <__lo0bits+0x50>
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	f100 0001 	add.w	r0, r0, #1
 800625a:	d003      	beq.n	8006264 <__lo0bits+0x58>
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4770      	bx	lr
 8006260:	2000      	movs	r0, #0
 8006262:	4770      	bx	lr
 8006264:	2020      	movs	r0, #32
 8006266:	4770      	bx	lr

08006268 <__i2b>:
 8006268:	b510      	push	{r4, lr}
 800626a:	460c      	mov	r4, r1
 800626c:	2101      	movs	r1, #1
 800626e:	f7ff ff01 	bl	8006074 <_Balloc>
 8006272:	4602      	mov	r2, r0
 8006274:	b928      	cbnz	r0, 8006282 <__i2b+0x1a>
 8006276:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800627a:	4b04      	ldr	r3, [pc, #16]	; (800628c <__i2b+0x24>)
 800627c:	4804      	ldr	r0, [pc, #16]	; (8006290 <__i2b+0x28>)
 800627e:	f000 fb3f 	bl	8006900 <__assert_func>
 8006282:	2301      	movs	r3, #1
 8006284:	6144      	str	r4, [r0, #20]
 8006286:	6103      	str	r3, [r0, #16]
 8006288:	bd10      	pop	{r4, pc}
 800628a:	bf00      	nop
 800628c:	0800774b 	.word	0x0800774b
 8006290:	0800775c 	.word	0x0800775c

08006294 <__multiply>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	4614      	mov	r4, r2
 800629a:	690a      	ldr	r2, [r1, #16]
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	460d      	mov	r5, r1
 80062a0:	429a      	cmp	r2, r3
 80062a2:	bfbe      	ittt	lt
 80062a4:	460b      	movlt	r3, r1
 80062a6:	4625      	movlt	r5, r4
 80062a8:	461c      	movlt	r4, r3
 80062aa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80062ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062b2:	68ab      	ldr	r3, [r5, #8]
 80062b4:	6869      	ldr	r1, [r5, #4]
 80062b6:	eb0a 0709 	add.w	r7, sl, r9
 80062ba:	42bb      	cmp	r3, r7
 80062bc:	b085      	sub	sp, #20
 80062be:	bfb8      	it	lt
 80062c0:	3101      	addlt	r1, #1
 80062c2:	f7ff fed7 	bl	8006074 <_Balloc>
 80062c6:	b930      	cbnz	r0, 80062d6 <__multiply+0x42>
 80062c8:	4602      	mov	r2, r0
 80062ca:	f240 115d 	movw	r1, #349	; 0x15d
 80062ce:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <__multiply+0x140>)
 80062d0:	4841      	ldr	r0, [pc, #260]	; (80063d8 <__multiply+0x144>)
 80062d2:	f000 fb15 	bl	8006900 <__assert_func>
 80062d6:	f100 0614 	add.w	r6, r0, #20
 80062da:	4633      	mov	r3, r6
 80062dc:	2200      	movs	r2, #0
 80062de:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80062e2:	4543      	cmp	r3, r8
 80062e4:	d31e      	bcc.n	8006324 <__multiply+0x90>
 80062e6:	f105 0c14 	add.w	ip, r5, #20
 80062ea:	f104 0314 	add.w	r3, r4, #20
 80062ee:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80062f2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80062f6:	9202      	str	r2, [sp, #8]
 80062f8:	ebac 0205 	sub.w	r2, ip, r5
 80062fc:	3a15      	subs	r2, #21
 80062fe:	f022 0203 	bic.w	r2, r2, #3
 8006302:	3204      	adds	r2, #4
 8006304:	f105 0115 	add.w	r1, r5, #21
 8006308:	458c      	cmp	ip, r1
 800630a:	bf38      	it	cc
 800630c:	2204      	movcc	r2, #4
 800630e:	9201      	str	r2, [sp, #4]
 8006310:	9a02      	ldr	r2, [sp, #8]
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d808      	bhi.n	800632a <__multiply+0x96>
 8006318:	2f00      	cmp	r7, #0
 800631a:	dc55      	bgt.n	80063c8 <__multiply+0x134>
 800631c:	6107      	str	r7, [r0, #16]
 800631e:	b005      	add	sp, #20
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	f843 2b04 	str.w	r2, [r3], #4
 8006328:	e7db      	b.n	80062e2 <__multiply+0x4e>
 800632a:	f8b3 a000 	ldrh.w	sl, [r3]
 800632e:	f1ba 0f00 	cmp.w	sl, #0
 8006332:	d020      	beq.n	8006376 <__multiply+0xe2>
 8006334:	46b1      	mov	r9, r6
 8006336:	2200      	movs	r2, #0
 8006338:	f105 0e14 	add.w	lr, r5, #20
 800633c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006340:	f8d9 b000 	ldr.w	fp, [r9]
 8006344:	b2a1      	uxth	r1, r4
 8006346:	fa1f fb8b 	uxth.w	fp, fp
 800634a:	fb0a b101 	mla	r1, sl, r1, fp
 800634e:	4411      	add	r1, r2
 8006350:	f8d9 2000 	ldr.w	r2, [r9]
 8006354:	0c24      	lsrs	r4, r4, #16
 8006356:	0c12      	lsrs	r2, r2, #16
 8006358:	fb0a 2404 	mla	r4, sl, r4, r2
 800635c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006360:	b289      	uxth	r1, r1
 8006362:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006366:	45f4      	cmp	ip, lr
 8006368:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800636c:	f849 1b04 	str.w	r1, [r9], #4
 8006370:	d8e4      	bhi.n	800633c <__multiply+0xa8>
 8006372:	9901      	ldr	r1, [sp, #4]
 8006374:	5072      	str	r2, [r6, r1]
 8006376:	9a03      	ldr	r2, [sp, #12]
 8006378:	3304      	adds	r3, #4
 800637a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800637e:	f1b9 0f00 	cmp.w	r9, #0
 8006382:	d01f      	beq.n	80063c4 <__multiply+0x130>
 8006384:	46b6      	mov	lr, r6
 8006386:	f04f 0a00 	mov.w	sl, #0
 800638a:	6834      	ldr	r4, [r6, #0]
 800638c:	f105 0114 	add.w	r1, r5, #20
 8006390:	880a      	ldrh	r2, [r1, #0]
 8006392:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006396:	b2a4      	uxth	r4, r4
 8006398:	fb09 b202 	mla	r2, r9, r2, fp
 800639c:	4492      	add	sl, r2
 800639e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80063a2:	f84e 4b04 	str.w	r4, [lr], #4
 80063a6:	f851 4b04 	ldr.w	r4, [r1], #4
 80063aa:	f8be 2000 	ldrh.w	r2, [lr]
 80063ae:	0c24      	lsrs	r4, r4, #16
 80063b0:	fb09 2404 	mla	r4, r9, r4, r2
 80063b4:	458c      	cmp	ip, r1
 80063b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80063ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80063be:	d8e7      	bhi.n	8006390 <__multiply+0xfc>
 80063c0:	9a01      	ldr	r2, [sp, #4]
 80063c2:	50b4      	str	r4, [r6, r2]
 80063c4:	3604      	adds	r6, #4
 80063c6:	e7a3      	b.n	8006310 <__multiply+0x7c>
 80063c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1a5      	bne.n	800631c <__multiply+0x88>
 80063d0:	3f01      	subs	r7, #1
 80063d2:	e7a1      	b.n	8006318 <__multiply+0x84>
 80063d4:	0800774b 	.word	0x0800774b
 80063d8:	0800775c 	.word	0x0800775c

080063dc <__pow5mult>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	4615      	mov	r5, r2
 80063e2:	f012 0203 	ands.w	r2, r2, #3
 80063e6:	4606      	mov	r6, r0
 80063e8:	460f      	mov	r7, r1
 80063ea:	d007      	beq.n	80063fc <__pow5mult+0x20>
 80063ec:	4c25      	ldr	r4, [pc, #148]	; (8006484 <__pow5mult+0xa8>)
 80063ee:	3a01      	subs	r2, #1
 80063f0:	2300      	movs	r3, #0
 80063f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063f6:	f7ff fe9f 	bl	8006138 <__multadd>
 80063fa:	4607      	mov	r7, r0
 80063fc:	10ad      	asrs	r5, r5, #2
 80063fe:	d03d      	beq.n	800647c <__pow5mult+0xa0>
 8006400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006402:	b97c      	cbnz	r4, 8006424 <__pow5mult+0x48>
 8006404:	2010      	movs	r0, #16
 8006406:	f7ff fe11 	bl	800602c <malloc>
 800640a:	4602      	mov	r2, r0
 800640c:	6270      	str	r0, [r6, #36]	; 0x24
 800640e:	b928      	cbnz	r0, 800641c <__pow5mult+0x40>
 8006410:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006414:	4b1c      	ldr	r3, [pc, #112]	; (8006488 <__pow5mult+0xac>)
 8006416:	481d      	ldr	r0, [pc, #116]	; (800648c <__pow5mult+0xb0>)
 8006418:	f000 fa72 	bl	8006900 <__assert_func>
 800641c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006420:	6004      	str	r4, [r0, #0]
 8006422:	60c4      	str	r4, [r0, #12]
 8006424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800642c:	b94c      	cbnz	r4, 8006442 <__pow5mult+0x66>
 800642e:	f240 2171 	movw	r1, #625	; 0x271
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff ff18 	bl	8006268 <__i2b>
 8006438:	2300      	movs	r3, #0
 800643a:	4604      	mov	r4, r0
 800643c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006440:	6003      	str	r3, [r0, #0]
 8006442:	f04f 0900 	mov.w	r9, #0
 8006446:	07eb      	lsls	r3, r5, #31
 8006448:	d50a      	bpl.n	8006460 <__pow5mult+0x84>
 800644a:	4639      	mov	r1, r7
 800644c:	4622      	mov	r2, r4
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff ff20 	bl	8006294 <__multiply>
 8006454:	4680      	mov	r8, r0
 8006456:	4639      	mov	r1, r7
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff fe4b 	bl	80060f4 <_Bfree>
 800645e:	4647      	mov	r7, r8
 8006460:	106d      	asrs	r5, r5, #1
 8006462:	d00b      	beq.n	800647c <__pow5mult+0xa0>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	b938      	cbnz	r0, 8006478 <__pow5mult+0x9c>
 8006468:	4622      	mov	r2, r4
 800646a:	4621      	mov	r1, r4
 800646c:	4630      	mov	r0, r6
 800646e:	f7ff ff11 	bl	8006294 <__multiply>
 8006472:	6020      	str	r0, [r4, #0]
 8006474:	f8c0 9000 	str.w	r9, [r0]
 8006478:	4604      	mov	r4, r0
 800647a:	e7e4      	b.n	8006446 <__pow5mult+0x6a>
 800647c:	4638      	mov	r0, r7
 800647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006482:	bf00      	nop
 8006484:	080078b0 	.word	0x080078b0
 8006488:	080076d5 	.word	0x080076d5
 800648c:	0800775c 	.word	0x0800775c

08006490 <__lshift>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	4607      	mov	r7, r0
 8006498:	4691      	mov	r9, r2
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6849      	ldr	r1, [r1, #4]
 800649e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064a8:	f108 0601 	add.w	r6, r8, #1
 80064ac:	42b3      	cmp	r3, r6
 80064ae:	db0b      	blt.n	80064c8 <__lshift+0x38>
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff fddf 	bl	8006074 <_Balloc>
 80064b6:	4605      	mov	r5, r0
 80064b8:	b948      	cbnz	r0, 80064ce <__lshift+0x3e>
 80064ba:	4602      	mov	r2, r0
 80064bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064c0:	4b27      	ldr	r3, [pc, #156]	; (8006560 <__lshift+0xd0>)
 80064c2:	4828      	ldr	r0, [pc, #160]	; (8006564 <__lshift+0xd4>)
 80064c4:	f000 fa1c 	bl	8006900 <__assert_func>
 80064c8:	3101      	adds	r1, #1
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	e7ee      	b.n	80064ac <__lshift+0x1c>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f100 0114 	add.w	r1, r0, #20
 80064d4:	f100 0210 	add.w	r2, r0, #16
 80064d8:	4618      	mov	r0, r3
 80064da:	4553      	cmp	r3, sl
 80064dc:	db33      	blt.n	8006546 <__lshift+0xb6>
 80064de:	6920      	ldr	r0, [r4, #16]
 80064e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064e4:	f104 0314 	add.w	r3, r4, #20
 80064e8:	f019 091f 	ands.w	r9, r9, #31
 80064ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064f4:	d02b      	beq.n	800654e <__lshift+0xbe>
 80064f6:	468a      	mov	sl, r1
 80064f8:	2200      	movs	r2, #0
 80064fa:	f1c9 0e20 	rsb	lr, r9, #32
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	fa00 f009 	lsl.w	r0, r0, r9
 8006504:	4302      	orrs	r2, r0
 8006506:	f84a 2b04 	str.w	r2, [sl], #4
 800650a:	f853 2b04 	ldr.w	r2, [r3], #4
 800650e:	459c      	cmp	ip, r3
 8006510:	fa22 f20e 	lsr.w	r2, r2, lr
 8006514:	d8f3      	bhi.n	80064fe <__lshift+0x6e>
 8006516:	ebac 0304 	sub.w	r3, ip, r4
 800651a:	3b15      	subs	r3, #21
 800651c:	f023 0303 	bic.w	r3, r3, #3
 8006520:	3304      	adds	r3, #4
 8006522:	f104 0015 	add.w	r0, r4, #21
 8006526:	4584      	cmp	ip, r0
 8006528:	bf38      	it	cc
 800652a:	2304      	movcc	r3, #4
 800652c:	50ca      	str	r2, [r1, r3]
 800652e:	b10a      	cbz	r2, 8006534 <__lshift+0xa4>
 8006530:	f108 0602 	add.w	r6, r8, #2
 8006534:	3e01      	subs	r6, #1
 8006536:	4638      	mov	r0, r7
 8006538:	4621      	mov	r1, r4
 800653a:	612e      	str	r6, [r5, #16]
 800653c:	f7ff fdda 	bl	80060f4 <_Bfree>
 8006540:	4628      	mov	r0, r5
 8006542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006546:	f842 0f04 	str.w	r0, [r2, #4]!
 800654a:	3301      	adds	r3, #1
 800654c:	e7c5      	b.n	80064da <__lshift+0x4a>
 800654e:	3904      	subs	r1, #4
 8006550:	f853 2b04 	ldr.w	r2, [r3], #4
 8006554:	459c      	cmp	ip, r3
 8006556:	f841 2f04 	str.w	r2, [r1, #4]!
 800655a:	d8f9      	bhi.n	8006550 <__lshift+0xc0>
 800655c:	e7ea      	b.n	8006534 <__lshift+0xa4>
 800655e:	bf00      	nop
 8006560:	0800774b 	.word	0x0800774b
 8006564:	0800775c 	.word	0x0800775c

08006568 <__mcmp>:
 8006568:	4603      	mov	r3, r0
 800656a:	690a      	ldr	r2, [r1, #16]
 800656c:	6900      	ldr	r0, [r0, #16]
 800656e:	b530      	push	{r4, r5, lr}
 8006570:	1a80      	subs	r0, r0, r2
 8006572:	d10d      	bne.n	8006590 <__mcmp+0x28>
 8006574:	3314      	adds	r3, #20
 8006576:	3114      	adds	r1, #20
 8006578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800657c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006588:	4295      	cmp	r5, r2
 800658a:	d002      	beq.n	8006592 <__mcmp+0x2a>
 800658c:	d304      	bcc.n	8006598 <__mcmp+0x30>
 800658e:	2001      	movs	r0, #1
 8006590:	bd30      	pop	{r4, r5, pc}
 8006592:	42a3      	cmp	r3, r4
 8006594:	d3f4      	bcc.n	8006580 <__mcmp+0x18>
 8006596:	e7fb      	b.n	8006590 <__mcmp+0x28>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e7f8      	b.n	8006590 <__mcmp+0x28>
	...

080065a0 <__mdiff>:
 80065a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	460c      	mov	r4, r1
 80065a6:	4606      	mov	r6, r0
 80065a8:	4611      	mov	r1, r2
 80065aa:	4620      	mov	r0, r4
 80065ac:	4692      	mov	sl, r2
 80065ae:	f7ff ffdb 	bl	8006568 <__mcmp>
 80065b2:	1e05      	subs	r5, r0, #0
 80065b4:	d111      	bne.n	80065da <__mdiff+0x3a>
 80065b6:	4629      	mov	r1, r5
 80065b8:	4630      	mov	r0, r6
 80065ba:	f7ff fd5b 	bl	8006074 <_Balloc>
 80065be:	4602      	mov	r2, r0
 80065c0:	b928      	cbnz	r0, 80065ce <__mdiff+0x2e>
 80065c2:	f240 2132 	movw	r1, #562	; 0x232
 80065c6:	4b3c      	ldr	r3, [pc, #240]	; (80066b8 <__mdiff+0x118>)
 80065c8:	483c      	ldr	r0, [pc, #240]	; (80066bc <__mdiff+0x11c>)
 80065ca:	f000 f999 	bl	8006900 <__assert_func>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065d4:	4610      	mov	r0, r2
 80065d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065da:	bfa4      	itt	ge
 80065dc:	4653      	movge	r3, sl
 80065de:	46a2      	movge	sl, r4
 80065e0:	4630      	mov	r0, r6
 80065e2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80065e6:	bfa6      	itte	ge
 80065e8:	461c      	movge	r4, r3
 80065ea:	2500      	movge	r5, #0
 80065ec:	2501      	movlt	r5, #1
 80065ee:	f7ff fd41 	bl	8006074 <_Balloc>
 80065f2:	4602      	mov	r2, r0
 80065f4:	b918      	cbnz	r0, 80065fe <__mdiff+0x5e>
 80065f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065fa:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <__mdiff+0x118>)
 80065fc:	e7e4      	b.n	80065c8 <__mdiff+0x28>
 80065fe:	f100 0814 	add.w	r8, r0, #20
 8006602:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006606:	60c5      	str	r5, [r0, #12]
 8006608:	f04f 0c00 	mov.w	ip, #0
 800660c:	f10a 0514 	add.w	r5, sl, #20
 8006610:	f10a 0010 	add.w	r0, sl, #16
 8006614:	46c2      	mov	sl, r8
 8006616:	6926      	ldr	r6, [r4, #16]
 8006618:	f104 0914 	add.w	r9, r4, #20
 800661c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006620:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006624:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006628:	f859 3b04 	ldr.w	r3, [r9], #4
 800662c:	fa1f f18b 	uxth.w	r1, fp
 8006630:	4461      	add	r1, ip
 8006632:	fa1f fc83 	uxth.w	ip, r3
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	eba1 010c 	sub.w	r1, r1, ip
 800663c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006640:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006644:	b289      	uxth	r1, r1
 8006646:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800664a:	454e      	cmp	r6, r9
 800664c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006650:	f84a 3b04 	str.w	r3, [sl], #4
 8006654:	d8e6      	bhi.n	8006624 <__mdiff+0x84>
 8006656:	1b33      	subs	r3, r6, r4
 8006658:	3b15      	subs	r3, #21
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	3415      	adds	r4, #21
 8006660:	3304      	adds	r3, #4
 8006662:	42a6      	cmp	r6, r4
 8006664:	bf38      	it	cc
 8006666:	2304      	movcc	r3, #4
 8006668:	441d      	add	r5, r3
 800666a:	4443      	add	r3, r8
 800666c:	461e      	mov	r6, r3
 800666e:	462c      	mov	r4, r5
 8006670:	4574      	cmp	r4, lr
 8006672:	d30e      	bcc.n	8006692 <__mdiff+0xf2>
 8006674:	f10e 0103 	add.w	r1, lr, #3
 8006678:	1b49      	subs	r1, r1, r5
 800667a:	f021 0103 	bic.w	r1, r1, #3
 800667e:	3d03      	subs	r5, #3
 8006680:	45ae      	cmp	lr, r5
 8006682:	bf38      	it	cc
 8006684:	2100      	movcc	r1, #0
 8006686:	4419      	add	r1, r3
 8006688:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800668c:	b18b      	cbz	r3, 80066b2 <__mdiff+0x112>
 800668e:	6117      	str	r7, [r2, #16]
 8006690:	e7a0      	b.n	80065d4 <__mdiff+0x34>
 8006692:	f854 8b04 	ldr.w	r8, [r4], #4
 8006696:	fa1f f188 	uxth.w	r1, r8
 800669a:	4461      	add	r1, ip
 800669c:	1408      	asrs	r0, r1, #16
 800669e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80066a2:	b289      	uxth	r1, r1
 80066a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80066a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066ac:	f846 1b04 	str.w	r1, [r6], #4
 80066b0:	e7de      	b.n	8006670 <__mdiff+0xd0>
 80066b2:	3f01      	subs	r7, #1
 80066b4:	e7e8      	b.n	8006688 <__mdiff+0xe8>
 80066b6:	bf00      	nop
 80066b8:	0800774b 	.word	0x0800774b
 80066bc:	0800775c 	.word	0x0800775c

080066c0 <__d2b>:
 80066c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066c4:	2101      	movs	r1, #1
 80066c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80066ca:	4690      	mov	r8, r2
 80066cc:	461d      	mov	r5, r3
 80066ce:	f7ff fcd1 	bl	8006074 <_Balloc>
 80066d2:	4604      	mov	r4, r0
 80066d4:	b930      	cbnz	r0, 80066e4 <__d2b+0x24>
 80066d6:	4602      	mov	r2, r0
 80066d8:	f240 310a 	movw	r1, #778	; 0x30a
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <__d2b+0xb0>)
 80066de:	4825      	ldr	r0, [pc, #148]	; (8006774 <__d2b+0xb4>)
 80066e0:	f000 f90e 	bl	8006900 <__assert_func>
 80066e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80066e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80066ec:	bb2d      	cbnz	r5, 800673a <__d2b+0x7a>
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	f1b8 0300 	subs.w	r3, r8, #0
 80066f4:	d026      	beq.n	8006744 <__d2b+0x84>
 80066f6:	4668      	mov	r0, sp
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	f7ff fd87 	bl	800620c <__lo0bits>
 80066fe:	9900      	ldr	r1, [sp, #0]
 8006700:	b1f0      	cbz	r0, 8006740 <__d2b+0x80>
 8006702:	9a01      	ldr	r2, [sp, #4]
 8006704:	f1c0 0320 	rsb	r3, r0, #32
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	430b      	orrs	r3, r1
 800670e:	40c2      	lsrs	r2, r0
 8006710:	6163      	str	r3, [r4, #20]
 8006712:	9201      	str	r2, [sp, #4]
 8006714:	9b01      	ldr	r3, [sp, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2102      	movne	r1, #2
 800671c:	2101      	moveq	r1, #1
 800671e:	61a3      	str	r3, [r4, #24]
 8006720:	6121      	str	r1, [r4, #16]
 8006722:	b1c5      	cbz	r5, 8006756 <__d2b+0x96>
 8006724:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006728:	4405      	add	r5, r0
 800672a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800672e:	603d      	str	r5, [r7, #0]
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	4620      	mov	r0, r4
 8006734:	b002      	add	sp, #8
 8006736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800673a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800673e:	e7d6      	b.n	80066ee <__d2b+0x2e>
 8006740:	6161      	str	r1, [r4, #20]
 8006742:	e7e7      	b.n	8006714 <__d2b+0x54>
 8006744:	a801      	add	r0, sp, #4
 8006746:	f7ff fd61 	bl	800620c <__lo0bits>
 800674a:	2101      	movs	r1, #1
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	6121      	str	r1, [r4, #16]
 8006750:	6163      	str	r3, [r4, #20]
 8006752:	3020      	adds	r0, #32
 8006754:	e7e5      	b.n	8006722 <__d2b+0x62>
 8006756:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800675a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800675e:	6038      	str	r0, [r7, #0]
 8006760:	6918      	ldr	r0, [r3, #16]
 8006762:	f7ff fd33 	bl	80061cc <__hi0bits>
 8006766:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800676a:	6031      	str	r1, [r6, #0]
 800676c:	e7e1      	b.n	8006732 <__d2b+0x72>
 800676e:	bf00      	nop
 8006770:	0800774b 	.word	0x0800774b
 8006774:	0800775c 	.word	0x0800775c

08006778 <_calloc_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	fb02 f501 	mul.w	r5, r2, r1
 800677e:	4629      	mov	r1, r5
 8006780:	f000 f854 	bl	800682c <_malloc_r>
 8006784:	4604      	mov	r4, r0
 8006786:	b118      	cbz	r0, 8006790 <_calloc_r+0x18>
 8006788:	462a      	mov	r2, r5
 800678a:	2100      	movs	r1, #0
 800678c:	f7fe f964 	bl	8004a58 <memset>
 8006790:	4620      	mov	r0, r4
 8006792:	bd38      	pop	{r3, r4, r5, pc}

08006794 <_free_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4605      	mov	r5, r0
 8006798:	2900      	cmp	r1, #0
 800679a:	d043      	beq.n	8006824 <_free_r+0x90>
 800679c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a0:	1f0c      	subs	r4, r1, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bfb8      	it	lt
 80067a6:	18e4      	addlt	r4, r4, r3
 80067a8:	f000 f8ec 	bl	8006984 <__malloc_lock>
 80067ac:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <_free_r+0x94>)
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	4610      	mov	r0, r2
 80067b2:	b933      	cbnz	r3, 80067c2 <_free_r+0x2e>
 80067b4:	6063      	str	r3, [r4, #4]
 80067b6:	6014      	str	r4, [r2, #0]
 80067b8:	4628      	mov	r0, r5
 80067ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067be:	f000 b8e7 	b.w	8006990 <__malloc_unlock>
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	d90a      	bls.n	80067dc <_free_r+0x48>
 80067c6:	6821      	ldr	r1, [r4, #0]
 80067c8:	1862      	adds	r2, r4, r1
 80067ca:	4293      	cmp	r3, r2
 80067cc:	bf01      	itttt	eq
 80067ce:	681a      	ldreq	r2, [r3, #0]
 80067d0:	685b      	ldreq	r3, [r3, #4]
 80067d2:	1852      	addeq	r2, r2, r1
 80067d4:	6022      	streq	r2, [r4, #0]
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6004      	str	r4, [r0, #0]
 80067da:	e7ed      	b.n	80067b8 <_free_r+0x24>
 80067dc:	461a      	mov	r2, r3
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	b10b      	cbz	r3, 80067e6 <_free_r+0x52>
 80067e2:	42a3      	cmp	r3, r4
 80067e4:	d9fa      	bls.n	80067dc <_free_r+0x48>
 80067e6:	6811      	ldr	r1, [r2, #0]
 80067e8:	1850      	adds	r0, r2, r1
 80067ea:	42a0      	cmp	r0, r4
 80067ec:	d10b      	bne.n	8006806 <_free_r+0x72>
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	4401      	add	r1, r0
 80067f2:	1850      	adds	r0, r2, r1
 80067f4:	4283      	cmp	r3, r0
 80067f6:	6011      	str	r1, [r2, #0]
 80067f8:	d1de      	bne.n	80067b8 <_free_r+0x24>
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4401      	add	r1, r0
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	6053      	str	r3, [r2, #4]
 8006804:	e7d8      	b.n	80067b8 <_free_r+0x24>
 8006806:	d902      	bls.n	800680e <_free_r+0x7a>
 8006808:	230c      	movs	r3, #12
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	e7d4      	b.n	80067b8 <_free_r+0x24>
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	1821      	adds	r1, r4, r0
 8006812:	428b      	cmp	r3, r1
 8006814:	bf01      	itttt	eq
 8006816:	6819      	ldreq	r1, [r3, #0]
 8006818:	685b      	ldreq	r3, [r3, #4]
 800681a:	1809      	addeq	r1, r1, r0
 800681c:	6021      	streq	r1, [r4, #0]
 800681e:	6063      	str	r3, [r4, #4]
 8006820:	6054      	str	r4, [r2, #4]
 8006822:	e7c9      	b.n	80067b8 <_free_r+0x24>
 8006824:	bd38      	pop	{r3, r4, r5, pc}
 8006826:	bf00      	nop
 8006828:	20000334 	.word	0x20000334

0800682c <_malloc_r>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	1ccd      	adds	r5, r1, #3
 8006830:	f025 0503 	bic.w	r5, r5, #3
 8006834:	3508      	adds	r5, #8
 8006836:	2d0c      	cmp	r5, #12
 8006838:	bf38      	it	cc
 800683a:	250c      	movcc	r5, #12
 800683c:	2d00      	cmp	r5, #0
 800683e:	4606      	mov	r6, r0
 8006840:	db01      	blt.n	8006846 <_malloc_r+0x1a>
 8006842:	42a9      	cmp	r1, r5
 8006844:	d903      	bls.n	800684e <_malloc_r+0x22>
 8006846:	230c      	movs	r3, #12
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	2000      	movs	r0, #0
 800684c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684e:	f000 f899 	bl	8006984 <__malloc_lock>
 8006852:	4921      	ldr	r1, [pc, #132]	; (80068d8 <_malloc_r+0xac>)
 8006854:	680a      	ldr	r2, [r1, #0]
 8006856:	4614      	mov	r4, r2
 8006858:	b99c      	cbnz	r4, 8006882 <_malloc_r+0x56>
 800685a:	4f20      	ldr	r7, [pc, #128]	; (80068dc <_malloc_r+0xb0>)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	b923      	cbnz	r3, 800686a <_malloc_r+0x3e>
 8006860:	4621      	mov	r1, r4
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f83c 	bl	80068e0 <_sbrk_r>
 8006868:	6038      	str	r0, [r7, #0]
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	f000 f837 	bl	80068e0 <_sbrk_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d123      	bne.n	80068be <_malloc_r+0x92>
 8006876:	230c      	movs	r3, #12
 8006878:	4630      	mov	r0, r6
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	f000 f888 	bl	8006990 <__malloc_unlock>
 8006880:	e7e3      	b.n	800684a <_malloc_r+0x1e>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	1b5b      	subs	r3, r3, r5
 8006886:	d417      	bmi.n	80068b8 <_malloc_r+0x8c>
 8006888:	2b0b      	cmp	r3, #11
 800688a:	d903      	bls.n	8006894 <_malloc_r+0x68>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	441c      	add	r4, r3
 8006890:	6025      	str	r5, [r4, #0]
 8006892:	e004      	b.n	800689e <_malloc_r+0x72>
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	42a2      	cmp	r2, r4
 8006898:	bf0c      	ite	eq
 800689a:	600b      	streq	r3, [r1, #0]
 800689c:	6053      	strne	r3, [r2, #4]
 800689e:	4630      	mov	r0, r6
 80068a0:	f000 f876 	bl	8006990 <__malloc_unlock>
 80068a4:	f104 000b 	add.w	r0, r4, #11
 80068a8:	1d23      	adds	r3, r4, #4
 80068aa:	f020 0007 	bic.w	r0, r0, #7
 80068ae:	1ac2      	subs	r2, r0, r3
 80068b0:	d0cc      	beq.n	800684c <_malloc_r+0x20>
 80068b2:	1a1b      	subs	r3, r3, r0
 80068b4:	50a3      	str	r3, [r4, r2]
 80068b6:	e7c9      	b.n	800684c <_malloc_r+0x20>
 80068b8:	4622      	mov	r2, r4
 80068ba:	6864      	ldr	r4, [r4, #4]
 80068bc:	e7cc      	b.n	8006858 <_malloc_r+0x2c>
 80068be:	1cc4      	adds	r4, r0, #3
 80068c0:	f024 0403 	bic.w	r4, r4, #3
 80068c4:	42a0      	cmp	r0, r4
 80068c6:	d0e3      	beq.n	8006890 <_malloc_r+0x64>
 80068c8:	1a21      	subs	r1, r4, r0
 80068ca:	4630      	mov	r0, r6
 80068cc:	f000 f808 	bl	80068e0 <_sbrk_r>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1dd      	bne.n	8006890 <_malloc_r+0x64>
 80068d4:	e7cf      	b.n	8006876 <_malloc_r+0x4a>
 80068d6:	bf00      	nop
 80068d8:	20000334 	.word	0x20000334
 80068dc:	20000338 	.word	0x20000338

080068e0 <_sbrk_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	2300      	movs	r3, #0
 80068e4:	4d05      	ldr	r5, [pc, #20]	; (80068fc <_sbrk_r+0x1c>)
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	f7fa fb34 	bl	8000f58 <_sbrk>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_sbrk_r+0x1a>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_sbrk_r+0x1a>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	200005f0 	.word	0x200005f0

08006900 <__assert_func>:
 8006900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006902:	4614      	mov	r4, r2
 8006904:	461a      	mov	r2, r3
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <__assert_func+0x2c>)
 8006908:	4605      	mov	r5, r0
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68d8      	ldr	r0, [r3, #12]
 800690e:	b14c      	cbz	r4, 8006924 <__assert_func+0x24>
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <__assert_func+0x30>)
 8006912:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006916:	9100      	str	r1, [sp, #0]
 8006918:	462b      	mov	r3, r5
 800691a:	4906      	ldr	r1, [pc, #24]	; (8006934 <__assert_func+0x34>)
 800691c:	f000 f80e 	bl	800693c <fiprintf>
 8006920:	f000 fa62 	bl	8006de8 <abort>
 8006924:	4b04      	ldr	r3, [pc, #16]	; (8006938 <__assert_func+0x38>)
 8006926:	461c      	mov	r4, r3
 8006928:	e7f3      	b.n	8006912 <__assert_func+0x12>
 800692a:	bf00      	nop
 800692c:	20000020 	.word	0x20000020
 8006930:	080078bc 	.word	0x080078bc
 8006934:	080078c9 	.word	0x080078c9
 8006938:	080078f7 	.word	0x080078f7

0800693c <fiprintf>:
 800693c:	b40e      	push	{r1, r2, r3}
 800693e:	b503      	push	{r0, r1, lr}
 8006940:	4601      	mov	r1, r0
 8006942:	ab03      	add	r3, sp, #12
 8006944:	4805      	ldr	r0, [pc, #20]	; (800695c <fiprintf+0x20>)
 8006946:	f853 2b04 	ldr.w	r2, [r3], #4
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	f000 f84d 	bl	80069ec <_vfiprintf_r>
 8006952:	b002      	add	sp, #8
 8006954:	f85d eb04 	ldr.w	lr, [sp], #4
 8006958:	b003      	add	sp, #12
 800695a:	4770      	bx	lr
 800695c:	20000020 	.word	0x20000020

08006960 <__ascii_mbtowc>:
 8006960:	b082      	sub	sp, #8
 8006962:	b901      	cbnz	r1, 8006966 <__ascii_mbtowc+0x6>
 8006964:	a901      	add	r1, sp, #4
 8006966:	b142      	cbz	r2, 800697a <__ascii_mbtowc+0x1a>
 8006968:	b14b      	cbz	r3, 800697e <__ascii_mbtowc+0x1e>
 800696a:	7813      	ldrb	r3, [r2, #0]
 800696c:	600b      	str	r3, [r1, #0]
 800696e:	7812      	ldrb	r2, [r2, #0]
 8006970:	1e10      	subs	r0, r2, #0
 8006972:	bf18      	it	ne
 8006974:	2001      	movne	r0, #1
 8006976:	b002      	add	sp, #8
 8006978:	4770      	bx	lr
 800697a:	4610      	mov	r0, r2
 800697c:	e7fb      	b.n	8006976 <__ascii_mbtowc+0x16>
 800697e:	f06f 0001 	mvn.w	r0, #1
 8006982:	e7f8      	b.n	8006976 <__ascii_mbtowc+0x16>

08006984 <__malloc_lock>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__malloc_lock+0x8>)
 8006986:	f000 bbef 	b.w	8007168 <__retarget_lock_acquire_recursive>
 800698a:	bf00      	nop
 800698c:	200005f8 	.word	0x200005f8

08006990 <__malloc_unlock>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__malloc_unlock+0x8>)
 8006992:	f000 bbea 	b.w	800716a <__retarget_lock_release_recursive>
 8006996:	bf00      	nop
 8006998:	200005f8 	.word	0x200005f8

0800699c <__sfputc_r>:
 800699c:	6893      	ldr	r3, [r2, #8]
 800699e:	b410      	push	{r4}
 80069a0:	3b01      	subs	r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	6093      	str	r3, [r2, #8]
 80069a6:	da07      	bge.n	80069b8 <__sfputc_r+0x1c>
 80069a8:	6994      	ldr	r4, [r2, #24]
 80069aa:	42a3      	cmp	r3, r4
 80069ac:	db01      	blt.n	80069b2 <__sfputc_r+0x16>
 80069ae:	290a      	cmp	r1, #10
 80069b0:	d102      	bne.n	80069b8 <__sfputc_r+0x1c>
 80069b2:	bc10      	pop	{r4}
 80069b4:	f000 b94a 	b.w	8006c4c <__swbuf_r>
 80069b8:	6813      	ldr	r3, [r2, #0]
 80069ba:	1c58      	adds	r0, r3, #1
 80069bc:	6010      	str	r0, [r2, #0]
 80069be:	7019      	strb	r1, [r3, #0]
 80069c0:	4608      	mov	r0, r1
 80069c2:	bc10      	pop	{r4}
 80069c4:	4770      	bx	lr

080069c6 <__sfputs_r>:
 80069c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	18d5      	adds	r5, r2, r3
 80069d0:	42ac      	cmp	r4, r5
 80069d2:	d101      	bne.n	80069d8 <__sfputs_r+0x12>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e007      	b.n	80069e8 <__sfputs_r+0x22>
 80069d8:	463a      	mov	r2, r7
 80069da:	4630      	mov	r0, r6
 80069dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e0:	f7ff ffdc 	bl	800699c <__sfputc_r>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d1f3      	bne.n	80069d0 <__sfputs_r+0xa>
 80069e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ec <_vfiprintf_r>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	460d      	mov	r5, r1
 80069f2:	4614      	mov	r4, r2
 80069f4:	4698      	mov	r8, r3
 80069f6:	4606      	mov	r6, r0
 80069f8:	b09d      	sub	sp, #116	; 0x74
 80069fa:	b118      	cbz	r0, 8006a04 <_vfiprintf_r+0x18>
 80069fc:	6983      	ldr	r3, [r0, #24]
 80069fe:	b90b      	cbnz	r3, 8006a04 <_vfiprintf_r+0x18>
 8006a00:	f000 fb14 	bl	800702c <__sinit>
 8006a04:	4b89      	ldr	r3, [pc, #548]	; (8006c2c <_vfiprintf_r+0x240>)
 8006a06:	429d      	cmp	r5, r3
 8006a08:	d11b      	bne.n	8006a42 <_vfiprintf_r+0x56>
 8006a0a:	6875      	ldr	r5, [r6, #4]
 8006a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	059a      	lsls	r2, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1a:	f000 fba5 	bl	8007168 <__retarget_lock_acquire_recursive>
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	071b      	lsls	r3, r3, #28
 8006a22:	d501      	bpl.n	8006a28 <_vfiprintf_r+0x3c>
 8006a24:	692b      	ldr	r3, [r5, #16]
 8006a26:	b9eb      	cbnz	r3, 8006a64 <_vfiprintf_r+0x78>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f000 f96e 	bl	8006d0c <__swsetup_r>
 8006a30:	b1c0      	cbz	r0, 8006a64 <_vfiprintf_r+0x78>
 8006a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a34:	07dc      	lsls	r4, r3, #31
 8006a36:	d50e      	bpl.n	8006a56 <_vfiprintf_r+0x6a>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	b01d      	add	sp, #116	; 0x74
 8006a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a42:	4b7b      	ldr	r3, [pc, #492]	; (8006c30 <_vfiprintf_r+0x244>)
 8006a44:	429d      	cmp	r5, r3
 8006a46:	d101      	bne.n	8006a4c <_vfiprintf_r+0x60>
 8006a48:	68b5      	ldr	r5, [r6, #8]
 8006a4a:	e7df      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a4c:	4b79      	ldr	r3, [pc, #484]	; (8006c34 <_vfiprintf_r+0x248>)
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	bf08      	it	eq
 8006a52:	68f5      	ldreq	r5, [r6, #12]
 8006a54:	e7da      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	0598      	lsls	r0, r3, #22
 8006a5a:	d4ed      	bmi.n	8006a38 <_vfiprintf_r+0x4c>
 8006a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a5e:	f000 fb84 	bl	800716a <__retarget_lock_release_recursive>
 8006a62:	e7e9      	b.n	8006a38 <_vfiprintf_r+0x4c>
 8006a64:	2300      	movs	r3, #0
 8006a66:	9309      	str	r3, [sp, #36]	; 0x24
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a6e:	2330      	movs	r3, #48	; 0x30
 8006a70:	f04f 0901 	mov.w	r9, #1
 8006a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006c38 <_vfiprintf_r+0x24c>
 8006a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a80:	4623      	mov	r3, r4
 8006a82:	469a      	mov	sl, r3
 8006a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a88:	b10a      	cbz	r2, 8006a8e <_vfiprintf_r+0xa2>
 8006a8a:	2a25      	cmp	r2, #37	; 0x25
 8006a8c:	d1f9      	bne.n	8006a82 <_vfiprintf_r+0x96>
 8006a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a92:	d00b      	beq.n	8006aac <_vfiprintf_r+0xc0>
 8006a94:	465b      	mov	r3, fp
 8006a96:	4622      	mov	r2, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ff93 	bl	80069c6 <__sfputs_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f000 80aa 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa8:	445a      	add	r2, fp
 8006aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8006aac:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80a2 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac0:	f10a 0a01 	add.w	sl, sl, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	9307      	str	r3, [sp, #28]
 8006ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006acc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ace:	4654      	mov	r4, sl
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad6:	4858      	ldr	r0, [pc, #352]	; (8006c38 <_vfiprintf_r+0x24c>)
 8006ad8:	f7ff fab0 	bl	800603c <memchr>
 8006adc:	9a04      	ldr	r2, [sp, #16]
 8006ade:	b9d8      	cbnz	r0, 8006b18 <_vfiprintf_r+0x12c>
 8006ae0:	06d1      	lsls	r1, r2, #27
 8006ae2:	bf44      	itt	mi
 8006ae4:	2320      	movmi	r3, #32
 8006ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aea:	0713      	lsls	r3, r2, #28
 8006aec:	bf44      	itt	mi
 8006aee:	232b      	movmi	r3, #43	; 0x2b
 8006af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af4:	f89a 3000 	ldrb.w	r3, [sl]
 8006af8:	2b2a      	cmp	r3, #42	; 0x2a
 8006afa:	d015      	beq.n	8006b28 <_vfiprintf_r+0x13c>
 8006afc:	4654      	mov	r4, sl
 8006afe:	2000      	movs	r0, #0
 8006b00:	f04f 0c0a 	mov.w	ip, #10
 8006b04:	9a07      	ldr	r2, [sp, #28]
 8006b06:	4621      	mov	r1, r4
 8006b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0c:	3b30      	subs	r3, #48	; 0x30
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	d94e      	bls.n	8006bb0 <_vfiprintf_r+0x1c4>
 8006b12:	b1b0      	cbz	r0, 8006b42 <_vfiprintf_r+0x156>
 8006b14:	9207      	str	r2, [sp, #28]
 8006b16:	e014      	b.n	8006b42 <_vfiprintf_r+0x156>
 8006b18:	eba0 0308 	sub.w	r3, r0, r8
 8006b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b20:	4313      	orrs	r3, r2
 8006b22:	46a2      	mov	sl, r4
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	e7d2      	b.n	8006ace <_vfiprintf_r+0xe2>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	1d19      	adds	r1, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	9103      	str	r1, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfbb      	ittet	lt
 8006b34:	425b      	neglt	r3, r3
 8006b36:	f042 0202 	orrlt.w	r2, r2, #2
 8006b3a:	9307      	strge	r3, [sp, #28]
 8006b3c:	9307      	strlt	r3, [sp, #28]
 8006b3e:	bfb8      	it	lt
 8006b40:	9204      	strlt	r2, [sp, #16]
 8006b42:	7823      	ldrb	r3, [r4, #0]
 8006b44:	2b2e      	cmp	r3, #46	; 0x2e
 8006b46:	d10c      	bne.n	8006b62 <_vfiprintf_r+0x176>
 8006b48:	7863      	ldrb	r3, [r4, #1]
 8006b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4c:	d135      	bne.n	8006bba <_vfiprintf_r+0x1ce>
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	3402      	adds	r4, #2
 8006b52:	1d1a      	adds	r2, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	9203      	str	r2, [sp, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bfb8      	it	lt
 8006b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c48 <_vfiprintf_r+0x25c>
 8006b66:	2203      	movs	r2, #3
 8006b68:	4650      	mov	r0, sl
 8006b6a:	7821      	ldrb	r1, [r4, #0]
 8006b6c:	f7ff fa66 	bl	800603c <memchr>
 8006b70:	b140      	cbz	r0, 8006b84 <_vfiprintf_r+0x198>
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	eba0 000a 	sub.w	r0, r0, sl
 8006b78:	fa03 f000 	lsl.w	r0, r3, r0
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	3401      	adds	r4, #1
 8006b80:	4303      	orrs	r3, r0
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b88:	2206      	movs	r2, #6
 8006b8a:	482c      	ldr	r0, [pc, #176]	; (8006c3c <_vfiprintf_r+0x250>)
 8006b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b90:	f7ff fa54 	bl	800603c <memchr>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d03f      	beq.n	8006c18 <_vfiprintf_r+0x22c>
 8006b98:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <_vfiprintf_r+0x254>)
 8006b9a:	bb1b      	cbnz	r3, 8006be4 <_vfiprintf_r+0x1f8>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	3307      	adds	r3, #7
 8006ba0:	f023 0307 	bic.w	r3, r3, #7
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	443b      	add	r3, r7
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	e767      	b.n	8006a80 <_vfiprintf_r+0x94>
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb8:	e7a5      	b.n	8006b06 <_vfiprintf_r+0x11a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f04f 0c0a 	mov.w	ip, #10
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	3401      	adds	r4, #1
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bcc:	3a30      	subs	r2, #48	; 0x30
 8006bce:	2a09      	cmp	r2, #9
 8006bd0:	d903      	bls.n	8006bda <_vfiprintf_r+0x1ee>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0c5      	beq.n	8006b62 <_vfiprintf_r+0x176>
 8006bd6:	9105      	str	r1, [sp, #20]
 8006bd8:	e7c3      	b.n	8006b62 <_vfiprintf_r+0x176>
 8006bda:	4604      	mov	r4, r0
 8006bdc:	2301      	movs	r3, #1
 8006bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8006be2:	e7f0      	b.n	8006bc6 <_vfiprintf_r+0x1da>
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <_vfiprintf_r+0x258>)
 8006bee:	a904      	add	r1, sp, #16
 8006bf0:	f7fd ffd8 	bl	8004ba4 <_printf_float>
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	1c78      	adds	r0, r7, #1
 8006bf8:	d1d6      	bne.n	8006ba8 <_vfiprintf_r+0x1bc>
 8006bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfc:	07d9      	lsls	r1, r3, #31
 8006bfe:	d405      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c00:	89ab      	ldrh	r3, [r5, #12]
 8006c02:	059a      	lsls	r2, r3, #22
 8006c04:	d402      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c08:	f000 faaf 	bl	800716a <__retarget_lock_release_recursive>
 8006c0c:	89ab      	ldrh	r3, [r5, #12]
 8006c0e:	065b      	lsls	r3, r3, #25
 8006c10:	f53f af12 	bmi.w	8006a38 <_vfiprintf_r+0x4c>
 8006c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c16:	e711      	b.n	8006a3c <_vfiprintf_r+0x50>
 8006c18:	ab03      	add	r3, sp, #12
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4630      	mov	r0, r6
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <_vfiprintf_r+0x258>)
 8006c22:	a904      	add	r1, sp, #16
 8006c24:	f7fe fa5a 	bl	80050dc <_printf_i>
 8006c28:	e7e4      	b.n	8006bf4 <_vfiprintf_r+0x208>
 8006c2a:	bf00      	nop
 8006c2c:	08007a34 	.word	0x08007a34
 8006c30:	08007a54 	.word	0x08007a54
 8006c34:	08007a14 	.word	0x08007a14
 8006c38:	08007902 	.word	0x08007902
 8006c3c:	0800790c 	.word	0x0800790c
 8006c40:	08004ba5 	.word	0x08004ba5
 8006c44:	080069c7 	.word	0x080069c7
 8006c48:	08007908 	.word	0x08007908

08006c4c <__swbuf_r>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	460e      	mov	r6, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	4605      	mov	r5, r0
 8006c54:	b118      	cbz	r0, 8006c5e <__swbuf_r+0x12>
 8006c56:	6983      	ldr	r3, [r0, #24]
 8006c58:	b90b      	cbnz	r3, 8006c5e <__swbuf_r+0x12>
 8006c5a:	f000 f9e7 	bl	800702c <__sinit>
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <__swbuf_r+0x98>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d12b      	bne.n	8006cbc <__swbuf_r+0x70>
 8006c64:	686c      	ldr	r4, [r5, #4]
 8006c66:	69a3      	ldr	r3, [r4, #24]
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	071a      	lsls	r2, r3, #28
 8006c6e:	d52f      	bpl.n	8006cd0 <__swbuf_r+0x84>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	b36b      	cbz	r3, 8006cd0 <__swbuf_r+0x84>
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	b2f6      	uxtb	r6, r6
 8006c7a:	1ac0      	subs	r0, r0, r3
 8006c7c:	6963      	ldr	r3, [r4, #20]
 8006c7e:	4637      	mov	r7, r6
 8006c80:	4283      	cmp	r3, r0
 8006c82:	dc04      	bgt.n	8006c8e <__swbuf_r+0x42>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f93c 	bl	8006f04 <_fflush_r>
 8006c8c:	bb30      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	3001      	adds	r0, #1
 8006c92:	3b01      	subs	r3, #1
 8006c94:	60a3      	str	r3, [r4, #8]
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	701e      	strb	r6, [r3, #0]
 8006c9e:	6963      	ldr	r3, [r4, #20]
 8006ca0:	4283      	cmp	r3, r0
 8006ca2:	d004      	beq.n	8006cae <__swbuf_r+0x62>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d506      	bpl.n	8006cb8 <__swbuf_r+0x6c>
 8006caa:	2e0a      	cmp	r6, #10
 8006cac:	d104      	bne.n	8006cb8 <__swbuf_r+0x6c>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 f927 	bl	8006f04 <_fflush_r>
 8006cb6:	b988      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006cb8:	4638      	mov	r0, r7
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <__swbuf_r+0x9c>)
 8006cbe:	429c      	cmp	r4, r3
 8006cc0:	d101      	bne.n	8006cc6 <__swbuf_r+0x7a>
 8006cc2:	68ac      	ldr	r4, [r5, #8]
 8006cc4:	e7cf      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <__swbuf_r+0xa0>)
 8006cc8:	429c      	cmp	r4, r3
 8006cca:	bf08      	it	eq
 8006ccc:	68ec      	ldreq	r4, [r5, #12]
 8006cce:	e7ca      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 f81a 	bl	8006d0c <__swsetup_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d0cb      	beq.n	8006c74 <__swbuf_r+0x28>
 8006cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ce0:	e7ea      	b.n	8006cb8 <__swbuf_r+0x6c>
 8006ce2:	bf00      	nop
 8006ce4:	08007a34 	.word	0x08007a34
 8006ce8:	08007a54 	.word	0x08007a54
 8006cec:	08007a14 	.word	0x08007a14

08006cf0 <__ascii_wctomb>:
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	b141      	cbz	r1, 8006d08 <__ascii_wctomb+0x18>
 8006cf6:	2aff      	cmp	r2, #255	; 0xff
 8006cf8:	d904      	bls.n	8006d04 <__ascii_wctomb+0x14>
 8006cfa:	228a      	movs	r2, #138	; 0x8a
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	4770      	bx	lr
 8006d04:	2001      	movs	r0, #1
 8006d06:	700a      	strb	r2, [r1, #0]
 8006d08:	4770      	bx	lr
	...

08006d0c <__swsetup_r>:
 8006d0c:	4b32      	ldr	r3, [pc, #200]	; (8006dd8 <__swsetup_r+0xcc>)
 8006d0e:	b570      	push	{r4, r5, r6, lr}
 8006d10:	681d      	ldr	r5, [r3, #0]
 8006d12:	4606      	mov	r6, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	b125      	cbz	r5, 8006d22 <__swsetup_r+0x16>
 8006d18:	69ab      	ldr	r3, [r5, #24]
 8006d1a:	b913      	cbnz	r3, 8006d22 <__swsetup_r+0x16>
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 f985 	bl	800702c <__sinit>
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <__swsetup_r+0xd0>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	d10f      	bne.n	8006d48 <__swsetup_r+0x3c>
 8006d28:	686c      	ldr	r4, [r5, #4]
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	d42c      	bmi.n	8006d8e <__swsetup_r+0x82>
 8006d34:	06dd      	lsls	r5, r3, #27
 8006d36:	d411      	bmi.n	8006d5c <__swsetup_r+0x50>
 8006d38:	2309      	movs	r3, #9
 8006d3a:	6033      	str	r3, [r6, #0]
 8006d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	e03e      	b.n	8006dc6 <__swsetup_r+0xba>
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <__swsetup_r+0xd4>)
 8006d4a:	429c      	cmp	r4, r3
 8006d4c:	d101      	bne.n	8006d52 <__swsetup_r+0x46>
 8006d4e:	68ac      	ldr	r4, [r5, #8]
 8006d50:	e7eb      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <__swsetup_r+0xd8>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	bf08      	it	eq
 8006d58:	68ec      	ldreq	r4, [r5, #12]
 8006d5a:	e7e6      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d5c:	0758      	lsls	r0, r3, #29
 8006d5e:	d512      	bpl.n	8006d86 <__swsetup_r+0x7a>
 8006d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d62:	b141      	cbz	r1, 8006d76 <__swsetup_r+0x6a>
 8006d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	d002      	beq.n	8006d72 <__swsetup_r+0x66>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff fd11 	bl	8006794 <_free_r>
 8006d72:	2300      	movs	r3, #0
 8006d74:	6363      	str	r3, [r4, #52]	; 0x34
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	f043 0308 	orr.w	r3, r3, #8
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	b94b      	cbnz	r3, 8006da6 <__swsetup_r+0x9a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d9c:	d003      	beq.n	8006da6 <__swsetup_r+0x9a>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fa07 	bl	80071b4 <__smakebuf_r>
 8006da6:	89a0      	ldrh	r0, [r4, #12]
 8006da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dac:	f010 0301 	ands.w	r3, r0, #1
 8006db0:	d00a      	beq.n	8006dc8 <__swsetup_r+0xbc>
 8006db2:	2300      	movs	r3, #0
 8006db4:	60a3      	str	r3, [r4, #8]
 8006db6:	6963      	ldr	r3, [r4, #20]
 8006db8:	425b      	negs	r3, r3
 8006dba:	61a3      	str	r3, [r4, #24]
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	b943      	cbnz	r3, 8006dd2 <__swsetup_r+0xc6>
 8006dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dc4:	d1ba      	bne.n	8006d3c <__swsetup_r+0x30>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	0781      	lsls	r1, r0, #30
 8006dca:	bf58      	it	pl
 8006dcc:	6963      	ldrpl	r3, [r4, #20]
 8006dce:	60a3      	str	r3, [r4, #8]
 8006dd0:	e7f4      	b.n	8006dbc <__swsetup_r+0xb0>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e7f7      	b.n	8006dc6 <__swsetup_r+0xba>
 8006dd6:	bf00      	nop
 8006dd8:	20000020 	.word	0x20000020
 8006ddc:	08007a34 	.word	0x08007a34
 8006de0:	08007a54 	.word	0x08007a54
 8006de4:	08007a14 	.word	0x08007a14

08006de8 <abort>:
 8006de8:	2006      	movs	r0, #6
 8006dea:	b508      	push	{r3, lr}
 8006dec:	f000 fa4a 	bl	8007284 <raise>
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7fa f83e 	bl	8000e72 <_exit>
	...

08006df8 <__sflush_r>:
 8006df8:	898a      	ldrh	r2, [r1, #12]
 8006dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfe:	4605      	mov	r5, r0
 8006e00:	0710      	lsls	r0, r2, #28
 8006e02:	460c      	mov	r4, r1
 8006e04:	d458      	bmi.n	8006eb8 <__sflush_r+0xc0>
 8006e06:	684b      	ldr	r3, [r1, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc05      	bgt.n	8006e18 <__sflush_r+0x20>
 8006e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dc02      	bgt.n	8006e18 <__sflush_r+0x20>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	d0f9      	beq.n	8006e12 <__sflush_r+0x1a>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e24:	682f      	ldr	r7, [r5, #0]
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	d032      	beq.n	8006e90 <__sflush_r+0x98>
 8006e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	075a      	lsls	r2, r3, #29
 8006e30:	d505      	bpl.n	8006e3e <__sflush_r+0x46>
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	1ac0      	subs	r0, r0, r3
 8006e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e38:	b10b      	cbz	r3, 8006e3e <__sflush_r+0x46>
 8006e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e3c:	1ac0      	subs	r0, r0, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4602      	mov	r2, r0
 8006e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e44:	4628      	mov	r0, r5
 8006e46:	6a21      	ldr	r1, [r4, #32]
 8006e48:	47b0      	blx	r6
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	d106      	bne.n	8006e5e <__sflush_r+0x66>
 8006e50:	6829      	ldr	r1, [r5, #0]
 8006e52:	291d      	cmp	r1, #29
 8006e54:	d82c      	bhi.n	8006eb0 <__sflush_r+0xb8>
 8006e56:	4a2a      	ldr	r2, [pc, #168]	; (8006f00 <__sflush_r+0x108>)
 8006e58:	40ca      	lsrs	r2, r1
 8006e5a:	07d6      	lsls	r6, r2, #31
 8006e5c:	d528      	bpl.n	8006eb0 <__sflush_r+0xb8>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	6062      	str	r2, [r4, #4]
 8006e62:	6922      	ldr	r2, [r4, #16]
 8006e64:	04d9      	lsls	r1, r3, #19
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	d504      	bpl.n	8006e74 <__sflush_r+0x7c>
 8006e6a:	1c42      	adds	r2, r0, #1
 8006e6c:	d101      	bne.n	8006e72 <__sflush_r+0x7a>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	b903      	cbnz	r3, 8006e74 <__sflush_r+0x7c>
 8006e72:	6560      	str	r0, [r4, #84]	; 0x54
 8006e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e76:	602f      	str	r7, [r5, #0]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d0ca      	beq.n	8006e12 <__sflush_r+0x1a>
 8006e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e80:	4299      	cmp	r1, r3
 8006e82:	d002      	beq.n	8006e8a <__sflush_r+0x92>
 8006e84:	4628      	mov	r0, r5
 8006e86:	f7ff fc85 	bl	8006794 <_free_r>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e8e:	e7c1      	b.n	8006e14 <__sflush_r+0x1c>
 8006e90:	6a21      	ldr	r1, [r4, #32]
 8006e92:	2301      	movs	r3, #1
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b0      	blx	r6
 8006e98:	1c41      	adds	r1, r0, #1
 8006e9a:	d1c7      	bne.n	8006e2c <__sflush_r+0x34>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0c4      	beq.n	8006e2c <__sflush_r+0x34>
 8006ea2:	2b1d      	cmp	r3, #29
 8006ea4:	d001      	beq.n	8006eaa <__sflush_r+0xb2>
 8006ea6:	2b16      	cmp	r3, #22
 8006ea8:	d101      	bne.n	8006eae <__sflush_r+0xb6>
 8006eaa:	602f      	str	r7, [r5, #0]
 8006eac:	e7b1      	b.n	8006e12 <__sflush_r+0x1a>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	e7ad      	b.n	8006e14 <__sflush_r+0x1c>
 8006eb8:	690f      	ldr	r7, [r1, #16]
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	d0a9      	beq.n	8006e12 <__sflush_r+0x1a>
 8006ebe:	0793      	lsls	r3, r2, #30
 8006ec0:	bf18      	it	ne
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	680e      	ldr	r6, [r1, #0]
 8006ec6:	bf08      	it	eq
 8006ec8:	694b      	ldreq	r3, [r1, #20]
 8006eca:	eba6 0807 	sub.w	r8, r6, r7
 8006ece:	600f      	str	r7, [r1, #0]
 8006ed0:	608b      	str	r3, [r1, #8]
 8006ed2:	f1b8 0f00 	cmp.w	r8, #0
 8006ed6:	dd9c      	ble.n	8006e12 <__sflush_r+0x1a>
 8006ed8:	4643      	mov	r3, r8
 8006eda:	463a      	mov	r2, r7
 8006edc:	4628      	mov	r0, r5
 8006ede:	6a21      	ldr	r1, [r4, #32]
 8006ee0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ee2:	47b0      	blx	r6
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	dc06      	bgt.n	8006ef6 <__sflush_r+0xfe>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	e78e      	b.n	8006e14 <__sflush_r+0x1c>
 8006ef6:	4407      	add	r7, r0
 8006ef8:	eba8 0800 	sub.w	r8, r8, r0
 8006efc:	e7e9      	b.n	8006ed2 <__sflush_r+0xda>
 8006efe:	bf00      	nop
 8006f00:	20400001 	.word	0x20400001

08006f04 <_fflush_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	690b      	ldr	r3, [r1, #16]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	b913      	cbnz	r3, 8006f14 <_fflush_r+0x10>
 8006f0e:	2500      	movs	r5, #0
 8006f10:	4628      	mov	r0, r5
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	b118      	cbz	r0, 8006f1e <_fflush_r+0x1a>
 8006f16:	6983      	ldr	r3, [r0, #24]
 8006f18:	b90b      	cbnz	r3, 8006f1e <_fflush_r+0x1a>
 8006f1a:	f000 f887 	bl	800702c <__sinit>
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <_fflush_r+0x6c>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d11b      	bne.n	8006f5c <_fflush_r+0x58>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0ef      	beq.n	8006f0e <_fflush_r+0xa>
 8006f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f30:	07d0      	lsls	r0, r2, #31
 8006f32:	d404      	bmi.n	8006f3e <_fflush_r+0x3a>
 8006f34:	0599      	lsls	r1, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_fflush_r+0x3a>
 8006f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3a:	f000 f915 	bl	8007168 <__retarget_lock_acquire_recursive>
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4621      	mov	r1, r4
 8006f42:	f7ff ff59 	bl	8006df8 <__sflush_r>
 8006f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f48:	4605      	mov	r5, r0
 8006f4a:	07da      	lsls	r2, r3, #31
 8006f4c:	d4e0      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	059b      	lsls	r3, r3, #22
 8006f52:	d4dd      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f56:	f000 f908 	bl	800716a <__retarget_lock_release_recursive>
 8006f5a:	e7d9      	b.n	8006f10 <_fflush_r+0xc>
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <_fflush_r+0x70>)
 8006f5e:	429c      	cmp	r4, r3
 8006f60:	d101      	bne.n	8006f66 <_fflush_r+0x62>
 8006f62:	68ac      	ldr	r4, [r5, #8]
 8006f64:	e7df      	b.n	8006f26 <_fflush_r+0x22>
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <_fflush_r+0x74>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	bf08      	it	eq
 8006f6c:	68ec      	ldreq	r4, [r5, #12]
 8006f6e:	e7da      	b.n	8006f26 <_fflush_r+0x22>
 8006f70:	08007a34 	.word	0x08007a34
 8006f74:	08007a54 	.word	0x08007a54
 8006f78:	08007a14 	.word	0x08007a14

08006f7c <std>:
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	4604      	mov	r4, r0
 8006f82:	e9c0 3300 	strd	r3, r3, [r0]
 8006f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f8a:	6083      	str	r3, [r0, #8]
 8006f8c:	8181      	strh	r1, [r0, #12]
 8006f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f90:	81c2      	strh	r2, [r0, #14]
 8006f92:	6183      	str	r3, [r0, #24]
 8006f94:	4619      	mov	r1, r3
 8006f96:	2208      	movs	r2, #8
 8006f98:	305c      	adds	r0, #92	; 0x5c
 8006f9a:	f7fd fd5d 	bl	8004a58 <memset>
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <std+0x38>)
 8006fa0:	6224      	str	r4, [r4, #32]
 8006fa2:	6263      	str	r3, [r4, #36]	; 0x24
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <std+0x3c>)
 8006fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fa8:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <std+0x40>)
 8006faa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <std+0x44>)
 8006fae:	6323      	str	r3, [r4, #48]	; 0x30
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	080072bd 	.word	0x080072bd
 8006fb8:	080072df 	.word	0x080072df
 8006fbc:	08007317 	.word	0x08007317
 8006fc0:	0800733b 	.word	0x0800733b

08006fc4 <_cleanup_r>:
 8006fc4:	4901      	ldr	r1, [pc, #4]	; (8006fcc <_cleanup_r+0x8>)
 8006fc6:	f000 b8af 	b.w	8007128 <_fwalk_reent>
 8006fca:	bf00      	nop
 8006fcc:	08006f05 	.word	0x08006f05

08006fd0 <__sfmoreglue>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	2568      	movs	r5, #104	; 0x68
 8006fd4:	1e4a      	subs	r2, r1, #1
 8006fd6:	4355      	muls	r5, r2
 8006fd8:	460e      	mov	r6, r1
 8006fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fde:	f7ff fc25 	bl	800682c <_malloc_r>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	b140      	cbz	r0, 8006ff8 <__sfmoreglue+0x28>
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fec:	300c      	adds	r0, #12
 8006fee:	60a0      	str	r0, [r4, #8]
 8006ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ff4:	f7fd fd30 	bl	8004a58 <memset>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}

08006ffc <__sfp_lock_acquire>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__sfp_lock_acquire+0x8>)
 8006ffe:	f000 b8b3 	b.w	8007168 <__retarget_lock_acquire_recursive>
 8007002:	bf00      	nop
 8007004:	200005fc 	.word	0x200005fc

08007008 <__sfp_lock_release>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_release+0x8>)
 800700a:	f000 b8ae 	b.w	800716a <__retarget_lock_release_recursive>
 800700e:	bf00      	nop
 8007010:	200005fc 	.word	0x200005fc

08007014 <__sinit_lock_acquire>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__sinit_lock_acquire+0x8>)
 8007016:	f000 b8a7 	b.w	8007168 <__retarget_lock_acquire_recursive>
 800701a:	bf00      	nop
 800701c:	200005f7 	.word	0x200005f7

08007020 <__sinit_lock_release>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__sinit_lock_release+0x8>)
 8007022:	f000 b8a2 	b.w	800716a <__retarget_lock_release_recursive>
 8007026:	bf00      	nop
 8007028:	200005f7 	.word	0x200005f7

0800702c <__sinit>:
 800702c:	b510      	push	{r4, lr}
 800702e:	4604      	mov	r4, r0
 8007030:	f7ff fff0 	bl	8007014 <__sinit_lock_acquire>
 8007034:	69a3      	ldr	r3, [r4, #24]
 8007036:	b11b      	cbz	r3, 8007040 <__sinit+0x14>
 8007038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703c:	f7ff bff0 	b.w	8007020 <__sinit_lock_release>
 8007040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007044:	6523      	str	r3, [r4, #80]	; 0x50
 8007046:	4b13      	ldr	r3, [pc, #76]	; (8007094 <__sinit+0x68>)
 8007048:	4a13      	ldr	r2, [pc, #76]	; (8007098 <__sinit+0x6c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	62a2      	str	r2, [r4, #40]	; 0x28
 800704e:	42a3      	cmp	r3, r4
 8007050:	bf08      	it	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	4620      	mov	r0, r4
 8007056:	bf08      	it	eq
 8007058:	61a3      	streq	r3, [r4, #24]
 800705a:	f000 f81f 	bl	800709c <__sfp>
 800705e:	6060      	str	r0, [r4, #4]
 8007060:	4620      	mov	r0, r4
 8007062:	f000 f81b 	bl	800709c <__sfp>
 8007066:	60a0      	str	r0, [r4, #8]
 8007068:	4620      	mov	r0, r4
 800706a:	f000 f817 	bl	800709c <__sfp>
 800706e:	2200      	movs	r2, #0
 8007070:	2104      	movs	r1, #4
 8007072:	60e0      	str	r0, [r4, #12]
 8007074:	6860      	ldr	r0, [r4, #4]
 8007076:	f7ff ff81 	bl	8006f7c <std>
 800707a:	2201      	movs	r2, #1
 800707c:	2109      	movs	r1, #9
 800707e:	68a0      	ldr	r0, [r4, #8]
 8007080:	f7ff ff7c 	bl	8006f7c <std>
 8007084:	2202      	movs	r2, #2
 8007086:	2112      	movs	r1, #18
 8007088:	68e0      	ldr	r0, [r4, #12]
 800708a:	f7ff ff77 	bl	8006f7c <std>
 800708e:	2301      	movs	r3, #1
 8007090:	61a3      	str	r3, [r4, #24]
 8007092:	e7d1      	b.n	8007038 <__sinit+0xc>
 8007094:	08007690 	.word	0x08007690
 8007098:	08006fc5 	.word	0x08006fc5

0800709c <__sfp>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	4607      	mov	r7, r0
 80070a0:	f7ff ffac 	bl	8006ffc <__sfp_lock_acquire>
 80070a4:	4b1e      	ldr	r3, [pc, #120]	; (8007120 <__sfp+0x84>)
 80070a6:	681e      	ldr	r6, [r3, #0]
 80070a8:	69b3      	ldr	r3, [r6, #24]
 80070aa:	b913      	cbnz	r3, 80070b2 <__sfp+0x16>
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff ffbd 	bl	800702c <__sinit>
 80070b2:	3648      	adds	r6, #72	; 0x48
 80070b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	d503      	bpl.n	80070c4 <__sfp+0x28>
 80070bc:	6833      	ldr	r3, [r6, #0]
 80070be:	b30b      	cbz	r3, 8007104 <__sfp+0x68>
 80070c0:	6836      	ldr	r6, [r6, #0]
 80070c2:	e7f7      	b.n	80070b4 <__sfp+0x18>
 80070c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c8:	b9d5      	cbnz	r5, 8007100 <__sfp+0x64>
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <__sfp+0x88>)
 80070cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070d0:	60e3      	str	r3, [r4, #12]
 80070d2:	6665      	str	r5, [r4, #100]	; 0x64
 80070d4:	f000 f847 	bl	8007166 <__retarget_lock_init_recursive>
 80070d8:	f7ff ff96 	bl	8007008 <__sfp_lock_release>
 80070dc:	2208      	movs	r2, #8
 80070de:	4629      	mov	r1, r5
 80070e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070e8:	6025      	str	r5, [r4, #0]
 80070ea:	61a5      	str	r5, [r4, #24]
 80070ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070f0:	f7fd fcb2 	bl	8004a58 <memset>
 80070f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070fc:	4620      	mov	r0, r4
 80070fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007100:	3468      	adds	r4, #104	; 0x68
 8007102:	e7d9      	b.n	80070b8 <__sfp+0x1c>
 8007104:	2104      	movs	r1, #4
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff ff62 	bl	8006fd0 <__sfmoreglue>
 800710c:	4604      	mov	r4, r0
 800710e:	6030      	str	r0, [r6, #0]
 8007110:	2800      	cmp	r0, #0
 8007112:	d1d5      	bne.n	80070c0 <__sfp+0x24>
 8007114:	f7ff ff78 	bl	8007008 <__sfp_lock_release>
 8007118:	230c      	movs	r3, #12
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	e7ee      	b.n	80070fc <__sfp+0x60>
 800711e:	bf00      	nop
 8007120:	08007690 	.word	0x08007690
 8007124:	ffff0001 	.word	0xffff0001

08007128 <_fwalk_reent>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4606      	mov	r6, r0
 800712e:	4688      	mov	r8, r1
 8007130:	2700      	movs	r7, #0
 8007132:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800713a:	f1b9 0901 	subs.w	r9, r9, #1
 800713e:	d505      	bpl.n	800714c <_fwalk_reent+0x24>
 8007140:	6824      	ldr	r4, [r4, #0]
 8007142:	2c00      	cmp	r4, #0
 8007144:	d1f7      	bne.n	8007136 <_fwalk_reent+0xe>
 8007146:	4638      	mov	r0, r7
 8007148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714c:	89ab      	ldrh	r3, [r5, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d907      	bls.n	8007162 <_fwalk_reent+0x3a>
 8007152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007156:	3301      	adds	r3, #1
 8007158:	d003      	beq.n	8007162 <_fwalk_reent+0x3a>
 800715a:	4629      	mov	r1, r5
 800715c:	4630      	mov	r0, r6
 800715e:	47c0      	blx	r8
 8007160:	4307      	orrs	r7, r0
 8007162:	3568      	adds	r5, #104	; 0x68
 8007164:	e7e9      	b.n	800713a <_fwalk_reent+0x12>

08007166 <__retarget_lock_init_recursive>:
 8007166:	4770      	bx	lr

08007168 <__retarget_lock_acquire_recursive>:
 8007168:	4770      	bx	lr

0800716a <__retarget_lock_release_recursive>:
 800716a:	4770      	bx	lr

0800716c <__swhatbuf_r>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	460e      	mov	r6, r1
 8007170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007174:	4614      	mov	r4, r2
 8007176:	2900      	cmp	r1, #0
 8007178:	461d      	mov	r5, r3
 800717a:	b096      	sub	sp, #88	; 0x58
 800717c:	da07      	bge.n	800718e <__swhatbuf_r+0x22>
 800717e:	2300      	movs	r3, #0
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	89b3      	ldrh	r3, [r6, #12]
 8007184:	061a      	lsls	r2, r3, #24
 8007186:	d410      	bmi.n	80071aa <__swhatbuf_r+0x3e>
 8007188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800718c:	e00e      	b.n	80071ac <__swhatbuf_r+0x40>
 800718e:	466a      	mov	r2, sp
 8007190:	f000 f8fa 	bl	8007388 <_fstat_r>
 8007194:	2800      	cmp	r0, #0
 8007196:	dbf2      	blt.n	800717e <__swhatbuf_r+0x12>
 8007198:	9a01      	ldr	r2, [sp, #4]
 800719a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800719e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071a2:	425a      	negs	r2, r3
 80071a4:	415a      	adcs	r2, r3
 80071a6:	602a      	str	r2, [r5, #0]
 80071a8:	e7ee      	b.n	8007188 <__swhatbuf_r+0x1c>
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	2000      	movs	r0, #0
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	b016      	add	sp, #88	; 0x58
 80071b2:	bd70      	pop	{r4, r5, r6, pc}

080071b4 <__smakebuf_r>:
 80071b4:	898b      	ldrh	r3, [r1, #12]
 80071b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b8:	079d      	lsls	r5, r3, #30
 80071ba:	4606      	mov	r6, r0
 80071bc:	460c      	mov	r4, r1
 80071be:	d507      	bpl.n	80071d0 <__smakebuf_r+0x1c>
 80071c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	2301      	movs	r3, #1
 80071ca:	6163      	str	r3, [r4, #20]
 80071cc:	b002      	add	sp, #8
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	466a      	mov	r2, sp
 80071d2:	ab01      	add	r3, sp, #4
 80071d4:	f7ff ffca 	bl	800716c <__swhatbuf_r>
 80071d8:	9900      	ldr	r1, [sp, #0]
 80071da:	4605      	mov	r5, r0
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff fb25 	bl	800682c <_malloc_r>
 80071e2:	b948      	cbnz	r0, 80071f8 <__smakebuf_r+0x44>
 80071e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e8:	059a      	lsls	r2, r3, #22
 80071ea:	d4ef      	bmi.n	80071cc <__smakebuf_r+0x18>
 80071ec:	f023 0303 	bic.w	r3, r3, #3
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	81a3      	strh	r3, [r4, #12]
 80071f6:	e7e3      	b.n	80071c0 <__smakebuf_r+0xc>
 80071f8:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <__smakebuf_r+0x7c>)
 80071fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	6020      	str	r0, [r4, #0]
 8007200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	6163      	str	r3, [r4, #20]
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	b15b      	cbz	r3, 8007228 <__smakebuf_r+0x74>
 8007210:	4630      	mov	r0, r6
 8007212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007216:	f000 f8c9 	bl	80073ac <_isatty_r>
 800721a:	b128      	cbz	r0, 8007228 <__smakebuf_r+0x74>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	89a0      	ldrh	r0, [r4, #12]
 800722a:	4305      	orrs	r5, r0
 800722c:	81a5      	strh	r5, [r4, #12]
 800722e:	e7cd      	b.n	80071cc <__smakebuf_r+0x18>
 8007230:	08006fc5 	.word	0x08006fc5

08007234 <_raise_r>:
 8007234:	291f      	cmp	r1, #31
 8007236:	b538      	push	{r3, r4, r5, lr}
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	d904      	bls.n	8007248 <_raise_r+0x14>
 800723e:	2316      	movs	r3, #22
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800724a:	b112      	cbz	r2, 8007252 <_raise_r+0x1e>
 800724c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007250:	b94b      	cbnz	r3, 8007266 <_raise_r+0x32>
 8007252:	4620      	mov	r0, r4
 8007254:	f000 f830 	bl	80072b8 <_getpid_r>
 8007258:	462a      	mov	r2, r5
 800725a:	4601      	mov	r1, r0
 800725c:	4620      	mov	r0, r4
 800725e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007262:	f000 b817 	b.w	8007294 <_kill_r>
 8007266:	2b01      	cmp	r3, #1
 8007268:	d00a      	beq.n	8007280 <_raise_r+0x4c>
 800726a:	1c59      	adds	r1, r3, #1
 800726c:	d103      	bne.n	8007276 <_raise_r+0x42>
 800726e:	2316      	movs	r3, #22
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	2001      	movs	r0, #1
 8007274:	e7e7      	b.n	8007246 <_raise_r+0x12>
 8007276:	2400      	movs	r4, #0
 8007278:	4628      	mov	r0, r5
 800727a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800727e:	4798      	blx	r3
 8007280:	2000      	movs	r0, #0
 8007282:	e7e0      	b.n	8007246 <_raise_r+0x12>

08007284 <raise>:
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <raise+0xc>)
 8007286:	4601      	mov	r1, r0
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f7ff bfd3 	b.w	8007234 <_raise_r>
 800728e:	bf00      	nop
 8007290:	20000020 	.word	0x20000020

08007294 <_kill_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	2300      	movs	r3, #0
 8007298:	4d06      	ldr	r5, [pc, #24]	; (80072b4 <_kill_r+0x20>)
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	f7f9 fdd6 	bl	8000e52 <_kill>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	d102      	bne.n	80072b0 <_kill_r+0x1c>
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	b103      	cbz	r3, 80072b0 <_kill_r+0x1c>
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
 80072b2:	bf00      	nop
 80072b4:	200005f0 	.word	0x200005f0

080072b8 <_getpid_r>:
 80072b8:	f7f9 bdc4 	b.w	8000e44 <_getpid>

080072bc <__sread>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	f000 f894 	bl	80073f0 <_read_r>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	bfab      	itete	ge
 80072cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072ce:	89a3      	ldrhlt	r3, [r4, #12]
 80072d0:	181b      	addge	r3, r3, r0
 80072d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072d6:	bfac      	ite	ge
 80072d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80072da:	81a3      	strhlt	r3, [r4, #12]
 80072dc:	bd10      	pop	{r4, pc}

080072de <__swrite>:
 80072de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	461f      	mov	r7, r3
 80072e4:	898b      	ldrh	r3, [r1, #12]
 80072e6:	4605      	mov	r5, r0
 80072e8:	05db      	lsls	r3, r3, #23
 80072ea:	460c      	mov	r4, r1
 80072ec:	4616      	mov	r6, r2
 80072ee:	d505      	bpl.n	80072fc <__swrite+0x1e>
 80072f0:	2302      	movs	r3, #2
 80072f2:	2200      	movs	r2, #0
 80072f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f8:	f000 f868 	bl	80073cc <_lseek_r>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	4632      	mov	r2, r6
 8007300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	4628      	mov	r0, r5
 8007308:	463b      	mov	r3, r7
 800730a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007312:	f000 b817 	b.w	8007344 <_write_r>

08007316 <__sseek>:
 8007316:	b510      	push	{r4, lr}
 8007318:	460c      	mov	r4, r1
 800731a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731e:	f000 f855 	bl	80073cc <_lseek_r>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	bf15      	itete	ne
 8007328:	6560      	strne	r0, [r4, #84]	; 0x54
 800732a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800732e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007332:	81a3      	strheq	r3, [r4, #12]
 8007334:	bf18      	it	ne
 8007336:	81a3      	strhne	r3, [r4, #12]
 8007338:	bd10      	pop	{r4, pc}

0800733a <__sclose>:
 800733a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800733e:	f000 b813 	b.w	8007368 <_close_r>
	...

08007344 <_write_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	2200      	movs	r2, #0
 800734e:	4d05      	ldr	r5, [pc, #20]	; (8007364 <_write_r+0x20>)
 8007350:	602a      	str	r2, [r5, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f7f9 fdb4 	bl	8000ec0 <_write>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_write_r+0x1e>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_write_r+0x1e>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	200005f0 	.word	0x200005f0

08007368 <_close_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	2300      	movs	r3, #0
 800736c:	4d05      	ldr	r5, [pc, #20]	; (8007384 <_close_r+0x1c>)
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	f7f9 fdc0 	bl	8000ef8 <_close>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_close_r+0x1a>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_close_r+0x1a>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	200005f0 	.word	0x200005f0

08007388 <_fstat_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	2300      	movs	r3, #0
 800738c:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <_fstat_r+0x20>)
 800738e:	4604      	mov	r4, r0
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f7f9 fdba 	bl	8000f0e <_fstat>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d102      	bne.n	80073a4 <_fstat_r+0x1c>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	b103      	cbz	r3, 80073a4 <_fstat_r+0x1c>
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	bf00      	nop
 80073a8:	200005f0 	.word	0x200005f0

080073ac <_isatty_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	2300      	movs	r3, #0
 80073b0:	4d05      	ldr	r5, [pc, #20]	; (80073c8 <_isatty_r+0x1c>)
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7f9 fdb8 	bl	8000f2c <_isatty>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_isatty_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_isatty_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	200005f0 	.word	0x200005f0

080073cc <_lseek_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	2200      	movs	r2, #0
 80073d6:	4d05      	ldr	r5, [pc, #20]	; (80073ec <_lseek_r+0x20>)
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7f9 fdb0 	bl	8000f40 <_lseek>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_lseek_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_lseek_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	200005f0 	.word	0x200005f0

080073f0 <_read_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	2200      	movs	r2, #0
 80073fa:	4d05      	ldr	r5, [pc, #20]	; (8007410 <_read_r+0x20>)
 80073fc:	602a      	str	r2, [r5, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	f7f9 fd41 	bl	8000e86 <_read>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_read_r+0x1e>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b103      	cbz	r3, 800740e <_read_r+0x1e>
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	200005f0 	.word	0x200005f0

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
