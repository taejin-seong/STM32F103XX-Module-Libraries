
stm32f103_fw_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800479c  0800479c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800479c  0800479c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800479c  0800479c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080047a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000084  08004828  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08004828  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001312f  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003060  00000000  00000000  000331dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00036240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00036e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fd7  00000000  00000000  000378d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122a0  00000000  00000000  000518af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a47  00000000  00000000  00063b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9596  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f4  00000000  00000000  000e95ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080044bc 	.word	0x080044bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080044bc 	.word	0x080044bc

0800014c <apInit>:




void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 9600); /* DFplayer와 통신하기 위한 UART 설정, Default : 9600/8/n/1/n */
 8000150:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fd95 	bl	8000c84 <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 800015a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fd90 	bl	8000c84 <uartOpen>

//	uartOpen(_DEF_UART1, 115200);
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apNRF24L01RxTest>:



/* nRF24L01 모듈  Rx 테스트 */
void apNRF24L01RxTest(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b0c0      	sub	sp, #256	; 0x100
 800016c:	af00      	add	r7, sp, #0
	/* nRF24L01 수신 버퍼 (받을 데이터 버퍼) */
	uint8_t tmp_buf[256]; // 임시로 지정

	/* nRF24L01 수신 초기화   */
	while(NRF24L01_Check())
 800016e:	e006      	b.n	800017e <apNRF24L01RxTest+0x16>
	{
		uartPrintf(_DEF_UART1,"NRF24L01 wireless module cannot be found by hardware\n");
 8000170:	4917      	ldr	r1, [pc, #92]	; (80001d0 <apNRF24L01RxTest+0x68>)
 8000172:	2000      	movs	r0, #0
 8000174:	f000 ff1c 	bl	8000fb0 <uartPrintf>
		delay_ms(100);
 8000178:	2064      	movs	r0, #100	; 0x64
 800017a:	f000 f871 	bl	8000260 <delay_ms>
	while(NRF24L01_Check())
 800017e:	f000 fba1 	bl	80008c4 <NRF24L01_Check>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1f3      	bne.n	8000170 <apNRF24L01RxTest+0x8>
	}

	uartPrintf(_DEF_UART1,"NRF24L01 wireless module hardware connection is normal\n");
 8000188:	4912      	ldr	r1, [pc, #72]	; (80001d4 <apNRF24L01RxTest+0x6c>)
 800018a:	2000      	movs	r0, #0
 800018c:	f000 ff10 	bl	8000fb0 <uartPrintf>

	NRF24L01_RX_Mode();
 8000190:	f000 fcac 	bl	8000aec <NRF24L01_RX_Mode>
	uartPrintf(_DEF_UART1, "Enter data receiving mode\n");
 8000194:	4910      	ldr	r1, [pc, #64]	; (80001d8 <apNRF24L01RxTest+0x70>)
 8000196:	2000      	movs	r0, #0
 8000198:	f000 ff0a 	bl	8000fb0 <uartPrintf>


	/* nRF24L01 수신 시작 */
	while(1)
	{
		if(NRF24L01_RxPacket(tmp_buf)==0)
 800019c:	463b      	mov	r3, r7
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 fc7e 	bl	8000aa0 <NRF24L01_RxPacket>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d106      	bne.n	80001b8 <apNRF24L01RxTest+0x50>
		{
			// tmp_buf[32]=0;//Add string terminator
			uartPrintf(_DEF_UART1,"NRF24L01 wireless module data received successfully: %s\n",tmp_buf);
 80001aa:	463b      	mov	r3, r7
 80001ac:	461a      	mov	r2, r3
 80001ae:	490b      	ldr	r1, [pc, #44]	; (80001dc <apNRF24L01RxTest+0x74>)
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 fefd 	bl	8000fb0 <uartPrintf>
 80001b6:	e006      	b.n	80001c6 <apNRF24L01RxTest+0x5e>
		}

		else
		{
			uartPrintf(_DEF_UART1,"NRF24L01 wireless module data reception failed \n");
 80001b8:	4909      	ldr	r1, [pc, #36]	; (80001e0 <apNRF24L01RxTest+0x78>)
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fef8 	bl	8000fb0 <uartPrintf>
			delay_ms(100);
 80001c0:	2064      	movs	r0, #100	; 0x64
 80001c2:	f000 f84d 	bl	8000260 <delay_ms>
		}

		delay_ms(10);
 80001c6:	200a      	movs	r0, #10
 80001c8:	f000 f84a 	bl	8000260 <delay_ms>
		if(NRF24L01_RxPacket(tmp_buf)==0)
 80001cc:	e7e6      	b.n	800019c <apNRF24L01RxTest+0x34>
 80001ce:	bf00      	nop
 80001d0:	08004594 	.word	0x08004594
 80001d4:	080045cc 	.word	0x080045cc
 80001d8:	08004604 	.word	0x08004604
 80001dc:	08004620 	.word	0x08004620
 80001e0:	0800465c 	.word	0x0800465c

080001e4 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	  HAL_Init();
 80001ea:	f001 f8b9 	bl	8001360 <HAL_Init>
	  SystemClock_Config();
 80001ee:	f000 f849 	bl	8000284 <SystemClock_Config>

	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <bspInit+0x78>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a19      	ldr	r2, [pc, #100]	; (800025c <bspInit+0x78>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	6193      	str	r3, [r2, #24]
 80001fe:	4b17      	ldr	r3, [pc, #92]	; (800025c <bspInit+0x78>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	f003 0310 	and.w	r3, r3, #16
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <bspInit+0x78>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <bspInit+0x78>)
 8000210:	f043 0320 	orr.w	r3, r3, #32
 8000214:	6193      	str	r3, [r2, #24]
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <bspInit+0x78>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	f003 0320 	and.w	r3, r3, #32
 800021e:	60bb      	str	r3, [r7, #8]
 8000220:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <bspInit+0x78>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	4a0d      	ldr	r2, [pc, #52]	; (800025c <bspInit+0x78>)
 8000228:	f043 0308 	orr.w	r3, r3, #8
 800022c:	6193      	str	r3, [r2, #24]
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <bspInit+0x78>)
 8000230:	699b      	ldr	r3, [r3, #24]
 8000232:	f003 0308 	and.w	r3, r3, #8
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <bspInit+0x78>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a07      	ldr	r2, [pc, #28]	; (800025c <bspInit+0x78>)
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6193      	str	r3, [r2, #24]
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <bspInit+0x78>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f003 0304 	and.w	r3, r3, #4
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]

}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000

08000260 <delay_ms>:


void delay_ms(uint32_t ms)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000268:	6878      	ldr	r0, [r7, #4]
 800026a:	f001 f8db 	bl	8001424 <HAL_Delay>
}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <millis>:
      while(count--);
     }
}

uint32_t millis(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0

	return HAL_GetTick();
 800027a:	f001 f8c9 	bl	8001410 <HAL_GetTick>
 800027e:	4603      	mov	r3, r0
}
 8000280:	4618      	mov	r0, r3
 8000282:	bd80      	pop	{r7, pc}

08000284 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	; 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fcb6 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a6:	2301      	movs	r3, #1
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 ff5f 	bl	8002190 <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d8:	f000 f819 	bl	800030e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 f9ca 	bl	8002690 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000302:	f000 f804 	bl	800030e <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	; 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <Error_Handler>:




void Error_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000312:	b672      	cpsid	i
}
 8000314:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000316:	e7fe      	b.n	8000316 <Error_Handler+0x8>

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <HAL_MspInit+0x5c>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a14      	ldr	r2, [pc, #80]	; (8000374 <HAL_MspInit+0x5c>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <HAL_MspInit+0x5c>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <HAL_MspInit+0x5c>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_MspInit+0x5c>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_MspInit+0x5c>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <HAL_MspInit+0x60>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <HAL_MspInit+0x60>)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000
 8000378:	40010000 	.word	0x40010000

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <NMI_Handler+0x4>

08000382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <HardFault_Handler+0x4>

08000388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <BusFault_Handler+0x4>

08000394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <UsageFault_Handler+0x4>

0800039a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c2:	f001 f813 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80003d0:	4802      	ldr	r0, [pc, #8]	; (80003dc <DMA1_Channel4_IRQHandler+0x10>)
 80003d2:	f001 fb51 	bl	8001a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	2000036c 	.word	0x2000036c

080003e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80003e4:	4802      	ldr	r0, [pc, #8]	; (80003f0 <DMA1_Channel5_IRQHandler+0x10>)
 80003e6:	f001 fb47 	bl	8001a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200003b0 	.word	0x200003b0

080003f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80003f8:	4802      	ldr	r0, [pc, #8]	; (8000404 <DMA1_Channel6_IRQHandler+0x10>)
 80003fa:	f001 fb3d 	bl	8001a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000328 	.word	0x20000328

08000408 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <DMA1_Channel7_IRQHandler+0x10>)
 800040e:	f001 fb33 	bl	8001a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200003f4 	.word	0x200003f4

0800041c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <USART1_IRQHandler+0x10>)
 8000422:	f002 feb3 	bl	800318c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000438 	.word	0x20000438

08000430 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <USART2_IRQHandler+0x10>)
 8000436:	f002 fea9 	bl	800318c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	2000047c 	.word	0x2000047c

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f003 fb9c 	bl	8003bb0 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20005000 	.word	0x20005000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	200000a0 	.word	0x200000a0
 80004ac:	200004d8 	.word	0x200004d8

080004b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004be:	490d      	ldr	r1, [pc, #52]	; (80004f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004d4:	4c0a      	ldr	r4, [pc, #40]	; (8000500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004e2:	f7ff ffe5 	bl	80004b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e6:	f003 fb69 	bl	8003bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f003 fb55 	bl	8003b98 <main>
  bx lr
 80004ee:	4770      	bx	lr
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80004f8:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 80004fc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000500:	200004d4 	.word	0x200004d4

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>

08000506 <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000506:	b480      	push	{r7}
 8000508:	b087      	sub	sp, #28
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000512:	2301      	movs	r3, #1
 8000514:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	60da      	str	r2, [r3, #12]

  return ret;
 800052e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000530:	4618      	mov	r0, r3
 8000532:	371c      	adds	r7, #28
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <dfplayer_Init>:
 * @brief	DFplayer 초기화 함수
 * @note 	DFplayer 모듈이  전원이 켜진 후 초기화되기까지 1.5~ 3sec 정도 필요
 *
 */
void dfplayer_Init(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
	delay_ms(1500);
 800053e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000542:	f7ff fe8d 	bl	8000260 <delay_ms>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <gpioInit>:




bool gpioInit(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  bool ret = true;
 8000552:	2301      	movs	r3, #1
 8000554:	70fb      	strb	r3, [r7, #3]

 // __HAL_RCC_GPIOB_CLK_ENABLE();

  for (int i = 0; i < GPIO_MAX_CH; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	e01e      	b.n	800059a <gpioInit+0x4e>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	b2d8      	uxtb	r0, r3
 8000560:	4912      	ldr	r1, [pc, #72]	; (80005ac <gpioInit+0x60>)
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	440b      	add	r3, r1
 800056e:	3306      	adds	r3, #6
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f000 f81c 	bl	80005b0 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_vlaue);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b2d8      	uxtb	r0, r3
 800057c:	490b      	ldr	r1, [pc, #44]	; (80005ac <gpioInit+0x60>)
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	4613      	mov	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	4413      	add	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	3309      	adds	r3, #9
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	f000 f876 	bl	8000680 <gpioPinWrite>
  for (int i = 0; i < GPIO_MAX_CH; i++)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	dddd      	ble.n	800055c <gpioInit+0x10>
  }

  return ret;
 80005a0:	78fb      	ldrb	r3, [r7, #3]

}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004

080005b0 <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	460a      	mov	r2, r1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	4613      	mov	r3, r2
 80005be:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80005c0:	2301      	movs	r3, #1
 80005c2:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  switch(mode)
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b05      	cmp	r3, #5
 80005d6:	d833      	bhi.n	8000640 <gpioPinMode+0x90>
 80005d8:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <gpioPinMode+0x30>)
 80005da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005de:	bf00      	nop
 80005e0:	080005f9 	.word	0x080005f9
 80005e4:	08000603 	.word	0x08000603
 80005e8:	0800060d 	.word	0x0800060d
 80005ec:	08000617 	.word	0x08000617
 80005f0:	08000625 	.word	0x08000625
 80005f4:	08000633 	.word	0x08000633
  {
      case _DEF_INPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
        break;
 8000600:	e01e      	b.n	8000640 <gpioPinMode+0x90>

      case _DEF_INPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
        break;
 800060a:	e019      	b.n	8000640 <gpioPinMode+0x90>

      case _DEF_INPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
        break;
 8000614:	e014      	b.n	8000640 <gpioPinMode+0x90>

      case _DEF_OUTPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-Pull, Open Drain 필요 시 OD로 변경
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // 필요 시  Medium, High로 변경
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
        break;
 8000622:	e00d      	b.n	8000640 <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000628:	2301      	movs	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
        break;
 8000630:	e006      	b.n	8000640 <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
        break;
 800063e:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	490e      	ldr	r1, [pc, #56]	; (800067c <gpioPinMode+0xcc>)
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	3304      	adds	r3, #4
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8000654:	79fa      	ldrb	r2, [r7, #7]
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <gpioPinMode+0xcc>)
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	440b      	add	r3, r1
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f107 020c 	add.w	r2, r7, #12
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fb38 	bl	8001ce0 <HAL_GPIO_Init>

  return ret;
 8000670:	7ffb      	ldrb	r3, [r7, #31]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004

08000680 <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
  if (ch > GPIO_MAX_CH)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d83e      	bhi.n	8000714 <gpioPinWrite+0x94>
  {
    return ;
  }

  if (value == true)
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01d      	beq.n	80006d8 <gpioPinWrite+0x58>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	491f      	ldr	r1, [pc, #124]	; (800071c <gpioPinWrite+0x9c>)
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	440b      	add	r3, r1
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	79fa      	ldrb	r2, [r7, #7]
 80006ae:	491b      	ldr	r1, [pc, #108]	; (800071c <gpioPinWrite+0x9c>)
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	3304      	adds	r3, #4
 80006bc:	8819      	ldrh	r1, [r3, #0]
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	4c16      	ldr	r4, [pc, #88]	; (800071c <gpioPinWrite+0x9c>)
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4423      	add	r3, r4
 80006cc:	3307      	adds	r3, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	f001 fd45 	bl	8002160 <HAL_GPIO_WritePin>
 80006d6:	e01e      	b.n	8000716 <gpioPinWrite+0x96>
  }

  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	4910      	ldr	r1, [pc, #64]	; (800071c <gpioPinWrite+0x9c>)
 80006dc:	4613      	mov	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	79fa      	ldrb	r2, [r7, #7]
 80006ea:	490c      	ldr	r1, [pc, #48]	; (800071c <gpioPinWrite+0x9c>)
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	3304      	adds	r3, #4
 80006f8:	8819      	ldrh	r1, [r3, #0]
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	4c07      	ldr	r4, [pc, #28]	; (800071c <gpioPinWrite+0x9c>)
 80006fe:	4613      	mov	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4423      	add	r3, r4
 8000708:	3308      	adds	r3, #8
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	f001 fd27 	bl	8002160 <HAL_GPIO_WritePin>
 8000712:	e000      	b.n	8000716 <gpioPinWrite+0x96>
    return ;
 8000714:	bf00      	nop
  }

}
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	20000004 	.word	0x20000004

08000720 <ledInit>:




bool ledInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
	bool ret = true;
 8000726:	2301      	movs	r3, #1
 8000728:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2302      	movs	r3, #2
 8000740:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e016      	b.n	8000776 <ledInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <ledInit+0x68>)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	4413      	add	r3, r2
 8000750:	889b      	ldrh	r3, [r3, #4]
 8000752:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <ledInit+0x68>)
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800075c:	463a      	mov	r2, r7
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fabd 	bl	8001ce0 <HAL_GPIO_Init>

		  ledOff(i);
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f80e 	bl	800078c <ledOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dde5      	ble.n	8000748 <ledInit+0x28>

	  }
	return ret;
 800077c:	7cfb      	ldrb	r3, [r7, #19]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000010 	.word	0x20000010

0800078c <ledOff>:
}



void ledOff(uint8_t ch)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d111      	bne.n	80007c0 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <ledOff+0x3c>)
 80007a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <ledOff+0x3c>)
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4413      	add	r3, r2
 80007ac:	8899      	ldrh	r1, [r3, #4]
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <ledOff+0x3c>)
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	79db      	ldrb	r3, [r3, #7]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f001 fcd1 	bl	8002160 <HAL_GPIO_WritePin>
 80007be:	e000      	b.n	80007c2 <ledOff+0x36>
	if (ch >= LED_MAX_CH) return;
 80007c0:	bf00      	nop

}
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000010 	.word	0x20000010

080007cc <NRF24L01_Init>:



/* nRF24L01 Pin 변경 시 헤더파일만 변경하면 됨  */
void NRF24L01_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
     /* 클럭 활성화는  bsp.c 에서 처리 함*/

     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]

     /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(NRF24L01_CE_PORT , NRF24L01_CE_PIN , GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <NRF24L01_Init+0x60>)
 80007e4:	f001 fcbc 	bl	8002160 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <NRF24L01_Init+0x60>)
 80007ee:	f001 fcb7 	bl	8002160 <HAL_GPIO_WritePin>

     /*Configure GPIO pins : PBPin PBPin */
     GPIO_InitStruct.Pin = NRF24L01_CE_PIN|NRF24L01_SPI_CS_PIN;
 80007f2:	2330      	movs	r3, #48	; 0x30
 80007f4:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2302      	movs	r3, #2
 8000800:	60fb      	str	r3, [r7, #12]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <NRF24L01_Init+0x60>)
 8000808:	f001 fa6a 	bl	8001ce0 <HAL_GPIO_Init>

     /*Configure GPIO pin : PtPin */
     GPIO_InitStruct.Pin =  NRF24L01_IRQ_PIN;
 800080c:	2308      	movs	r3, #8
 800080e:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000814:	2301      	movs	r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
     HAL_GPIO_Init(NRF24L01_IRQ_PORT , &GPIO_InitStruct);
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <NRF24L01_Init+0x60>)
 800081e:	f001 fa5f 	bl	8001ce0 <HAL_GPIO_Init>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010c00 	.word	0x40010c00

08000830 <SPI1_SetSpeed>:
     * @Description:      SPI speed = fAPB2/frequency division factor
     *                    SPI_BaudRate_Prescaler: SPI_BAUDRATEPRESCALER_2 ~ SPI_BAUDRATEPRESCALER_256
     *                 The fAPB2 clock is 72Mhz:(STM32103C8T6: [ APB2 -> SPI1 ])
  */
void SPI1_SetSpeed(uint8_t SPI_BaudRatePrescaler)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
         assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler)); //Judging validity
         __HAL_SPI_DISABLE(&NRF24L01_SPI_PORT); //Close SPI
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <SPI1_SetSpeed+0x58>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <SPI1_SetSpeed+0x58>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000848:	601a      	str	r2, [r3, #0]
         NRF24L01_SPI_PORT.Instance->CR1&=0XFFC7; //bits 3-5 are cleared, used to set the baud rate
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <SPI1_SetSpeed+0x58>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6819      	ldr	r1, [r3, #0]
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <SPI1_SetSpeed+0x58>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8000858:	400b      	ands	r3, r1
 800085a:	6013      	str	r3, [r2, #0]
         NRF24L01_SPI_PORT.Instance->CR1|=SPI_BaudRatePrescaler;//Set SPI speed
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <SPI1_SetSpeed+0x58>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	6819      	ldr	r1, [r3, #0]
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <SPI1_SetSpeed+0x58>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	430a      	orrs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
         __HAL_SPI_ENABLE(&NRF24L01_SPI_PORT); //Enable SPI
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SPI1_SetSpeed+0x58>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SPI1_SetSpeed+0x58>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800087a:	601a      	str	r2, [r3, #0]

}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	200002d0 	.word	0x200002d0

0800088c <SPIx_ReadWriteByte>:
     * @Return value:      uint8_t: 수신한 데이터
     * @Description:       None
  */

uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	73bb      	strb	r3, [r7, #14]
                        /* 사용하는 SPIx, 송신할 데이터 값, 수신받을 데이터, 데이터의 길이, 타임오버 값*/
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 800089c:	f107 020f 	add.w	r2, r7, #15
 80008a0:	f107 010e 	add.w	r1, r7, #14
 80008a4:	23ff      	movs	r3, #255	; 0xff
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f002 f90e 	bl	8002acc <HAL_SPI_TransmitReceive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SPIx_ReadWriteByte+0x2e>
  {
    d_read=0xFF;
 80008b6:	23ff      	movs	r3, #255	; 0xff
 80008b8:	73fb      	strb	r3, [r7, #15]
  }
  return d_read;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <NRF24L01_Check>:
     * Return value:     0, success; 1, failure
     * Description:     None
  */

uint8_t NRF24L01_Check(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
   uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <NRF24L01_Check+0x6c>)
 80008cc:	463b      	mov	r3, r7
 80008ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d2:	6018      	str	r0, [r3, #0]
 80008d4:	3304      	adds	r3, #4
 80008d6:	7019      	strb	r1, [r3, #0]
   uint8_t i;

    SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi speed is 9Mhz ((The maximum SPI clock of 24L01 is 10Mhz, it doesn’t matter if it is bigger here)
 80008d8:	2010      	movs	r0, #16
 80008da:	f7ff ffa9 	bl	8000830 <SPI1_SetSpeed>
    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//Write a 5-byte address.
 80008de:	463b      	mov	r3, r7
 80008e0:	2205      	movs	r2, #5
 80008e2:	4619      	mov	r1, r3
 80008e4:	2030      	movs	r0, #48	; 0x30
 80008e6:	f000 f8a7 	bl	8000a38 <NRF24L01_Write_Buf>
    NRF24L01_Read_Buf(TX_ADDR,buf,5); //Read the written address
 80008ea:	463b      	mov	r3, r7
 80008ec:	2205      	movs	r2, #5
 80008ee:	4619      	mov	r1, r3
 80008f0:	2010      	movs	r0, #16
 80008f2:	f000 f86b 	bl	80009cc <NRF24L01_Read_Buf>
   for(i=0;i<5;i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e00a      	b.n	8000912 <NRF24L01_Check+0x4e>
   {
      if(buf[i]!=0XA5)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f107 0208 	add.w	r2, r7, #8
 8000902:	4413      	add	r3, r2
 8000904:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000908:	2ba5      	cmp	r3, #165	; 0xa5
 800090a:	d106      	bne.n	800091a <NRF24L01_Check+0x56>
   for(i=0;i<5;i++)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	3301      	adds	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b04      	cmp	r3, #4
 8000916:	d9f1      	bls.n	80008fc <NRF24L01_Check+0x38>
 8000918:	e000      	b.n	800091c <NRF24L01_Check+0x58>
         break;
 800091a:	bf00      	nop
   }
    if(i!=5)return 1;//Detect 24L01 error
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b05      	cmp	r3, #5
 8000920:	d001      	beq.n	8000926 <NRF24L01_Check+0x62>
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <NRF24L01_Check+0x64>
    return 0; //24L01 detected
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08004734 	.word	0x08004734

08000934 <NRF24L01_Write_Reg>:
     * Return value:     status: 레지스터 상태
     * Description:      none
  *
  */
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
   uint8_t status;
     NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 8000944:	2200      	movs	r2, #0
 8000946:	2110      	movs	r1, #16
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <NRF24L01_Write_Reg+0x48>)
 800094a:	f001 fc09 	bl	8002160 <HAL_GPIO_WritePin>
     status =SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//Send register number
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4619      	mov	r1, r3
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <NRF24L01_Write_Reg+0x4c>)
 8000954:	f7ff ff9a 	bl	800088c <SPIx_ReadWriteByte>
 8000958:	4603      	mov	r3, r0
 800095a:	73fb      	strb	r3, [r7, #15]
     SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,value); //Write the value of the register
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	; (8000980 <NRF24L01_Write_Reg+0x4c>)
 8000962:	f7ff ff93 	bl	800088c <SPIx_ReadWriteByte>
     NRF24L01_SPI_CS_DISABLE(); //Disable SPI transmission
 8000966:	2201      	movs	r2, #1
 8000968:	2110      	movs	r1, #16
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <NRF24L01_Write_Reg+0x48>)
 800096c:	f001 fbf8 	bl	8002160 <HAL_GPIO_WritePin>
     return(status); //return status value
 8000970:	7bfb      	ldrb	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010c00 	.word	0x40010c00
 8000980:	200002d0 	.word	0x200002d0

08000984 <NRF24L01_Read_Reg>:
     * Return value:     reg_val:레지스터 값
     * Explanation:      none
  *
  */
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
   uint8_t reg_val;
      NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 800098e:	2200      	movs	r2, #0
 8000990:	2110      	movs	r1, #16
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <NRF24L01_Read_Reg+0x40>)
 8000994:	f001 fbe4 	bl	8002160 <HAL_GPIO_WritePin>
     SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg); //Send register number
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4619      	mov	r1, r3
 800099c:	480a      	ldr	r0, [pc, #40]	; (80009c8 <NRF24L01_Read_Reg+0x44>)
 800099e:	f7ff ff75 	bl	800088c <SPIx_ReadWriteByte>
     reg_val=SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,0XFF);//Read register content
 80009a2:	21ff      	movs	r1, #255	; 0xff
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <NRF24L01_Read_Reg+0x44>)
 80009a6:	f7ff ff71 	bl	800088c <SPIx_ReadWriteByte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
     NRF24L01_SPI_CS_DISABLE(); //Disable SPI transmission
 80009ae:	2201      	movs	r2, #1
 80009b0:	2110      	movs	r1, #16
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <NRF24L01_Read_Reg+0x40>)
 80009b4:	f001 fbd4 	bl	8002160 <HAL_GPIO_WritePin>
     return(reg_val); //return status value
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	200002d0 	.word	0x200002d0

080009cc <NRF24L01_Read_Buf>:
     * Return value:     status: 이번에 읽은 레지스터 상태 값
     * Description:      none
  *
  */
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
   uint8_t status, uint8_t_ctr;

     NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 80009dc:	2200      	movs	r2, #0
 80009de:	2110      	movs	r1, #16
 80009e0:	4813      	ldr	r0, [pc, #76]	; (8000a30 <NRF24L01_Read_Buf+0x64>)
 80009e2:	f001 fbbd 	bl	8002160 <HAL_GPIO_WritePin>
//   HAL_Delay(20);
     status=SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//Send register value (position) and read status value
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <NRF24L01_Read_Buf+0x68>)
 80009ec:	f7ff ff4e 	bl	800088c <SPIx_ReadWriteByte>
 80009f0:	4603      	mov	r3, r0
 80009f2:	73bb      	strb	r3, [r7, #14]
    for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	e00b      	b.n	8000a12 <NRF24L01_Read_Buf+0x46>
  {
         pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,0XFF);//Read data
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	18d4      	adds	r4, r2, r3
 8000a00:	21ff      	movs	r1, #255	; 0xff
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <NRF24L01_Read_Buf+0x68>)
 8000a04:	f7ff ff42 	bl	800088c <SPIx_ReadWriteByte>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	7023      	strb	r3, [r4, #0]
    for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d3ef      	bcc.n	80009fa <NRF24L01_Read_Buf+0x2e>
  }
     NRF24L01_SPI_CS_DISABLE(); //Close SPI transmission
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <NRF24L01_Read_Buf+0x64>)
 8000a20:	f001 fb9e 	bl	8002160 <HAL_GPIO_WritePin>
     return status; //Return the status value read
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	200002d0 	.word	0x200002d0

08000a38 <NRF24L01_Write_Buf>:
     * Return value:     status: 이번에 쓴 레지스터 상태 값
     * Description:      none
  *
  */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
   uint8_t status,uint8_t_ctr;
      NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <NRF24L01_Write_Buf+0x60>)
 8000a4e:	f001 fb87 	bl	8002160 <HAL_GPIO_WritePin>
//   HAL_Delay(20);
     status = SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//Send the register value (position) and read the status value
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4619      	mov	r1, r3
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <NRF24L01_Write_Buf+0x64>)
 8000a58:	f7ff ff18 	bl	800088c <SPIx_ReadWriteByte>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73bb      	strb	r3, [r7, #14]
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e00a      	b.n	8000a7c <NRF24L01_Write_Buf+0x44>
  {
         SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,*pBuf++); //Write data
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	603a      	str	r2, [r7, #0]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <NRF24L01_Write_Buf+0x64>)
 8000a72:	f7ff ff0b 	bl	800088c <SPIx_ReadWriteByte>
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3f0      	bcc.n	8000a66 <NRF24L01_Write_Buf+0x2e>
  }
     NRF24L01_SPI_CS_DISABLE(); //Close SPI transmission
 8000a84:	2201      	movs	r2, #1
 8000a86:	2110      	movs	r1, #16
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <NRF24L01_Write_Buf+0x60>)
 8000a8a:	f001 fb69 	bl	8002160 <HAL_GPIO_WritePin>
     return status; //Return the status value read
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	200002d0 	.word	0x200002d0

08000aa0 <NRF24L01_RxPacket>:
     * Return value:      0: 수신 성공  / 0: 수신 실패
     * Description:       none
  *
  */
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    uint8_t sta;

    SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //The spi speed is 9Mhz (the maximum SPI clock of 24L01 is 10Mhz)
 8000aa8:	2010      	movs	r0, #16
 8000aaa:	f7ff fec1 	bl	8000830 <SPI1_SetSpeed>
    sta=NRF24L01_Read_Reg(STATUS); //Read the value of the status register
 8000aae:	2007      	movs	r0, #7
 8000ab0:	f7ff ff68 	bl	8000984 <NRF24L01_Read_Reg>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	73fb      	strb	r3, [r7, #15]
    NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //Clear TX_DS or MAX_RT interrupt flag
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	4619      	mov	r1, r3
 8000abc:	2027      	movs	r0, #39	; 0x27
 8000abe:	f7ff ff39 	bl	8000934 <NRF24L01_Write_Reg>
    if(sta&RX_OK)//Data received
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <NRF24L01_RxPacket+0x42>
   {
       NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//Read data
 8000acc:	2220      	movs	r2, #32
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2061      	movs	r0, #97	; 0x61
 8000ad2:	f7ff ff7b 	bl	80009cc <NRF24L01_Read_Buf>
       NRF24L01_Write_Reg(FLUSH_RX,0xff);//Clear RX FIFO register
 8000ad6:	21ff      	movs	r1, #255	; 0xff
 8000ad8:	20e2      	movs	r0, #226	; 0xe2
 8000ada:	f7ff ff2b 	bl	8000934 <NRF24L01_Write_Reg>
      return 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <NRF24L01_RxPacket+0x44>
   }
    return 1;//No data received
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <NRF24L01_RX_Mode>:
     * Return value:       none
     * Description:       nRF24L01 DataSheet 레지스터 맵 참고
  *
  */
void NRF24L01_RX_Mode(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    NRF24L01_CE_LOW();
 8000af0:	2200      	movs	r2, #0
 8000af2:	2120      	movs	r1, #32
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <NRF24L01_RX_Mode+0x5c>)
 8000af6:	f001 fb33 	bl	8002160 <HAL_GPIO_WritePin>
     NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//Configure the parameters of the basic working mode; PWR_UP, EN_CRC, 16BIT_CRC
 8000afa:	210f      	movs	r1, #15
 8000afc:	2020      	movs	r0, #32
 8000afe:	f7ff ff19 	bl	8000934 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01); //Enable automatic response of channel 0
 8000b02:	2101      	movs	r1, #1
 8000b04:	2021      	movs	r0, #33	; 0x21
 8000b06:	f7ff ff15 	bl	8000934 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//Enable the receive address of channel 0
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2022      	movs	r0, #34	; 0x22
 8000b0e:	f7ff ff11 	bl	8000934 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40); //Set RF communication frequency
 8000b12:	2128      	movs	r1, #40	; 0x28
 8000b14:	2025      	movs	r0, #37	; 0x25
 8000b16:	f7ff ff0d 	bl	8000934 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//Set TX transmission parameters, 0db gain, 2Mbps, low noise gain on
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	2026      	movs	r0, #38	; 0x26
 8000b1e:	f7ff ff09 	bl	8000934 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//Select the effective data width of channel 0
 8000b22:	2120      	movs	r1, #32
 8000b24:	2031      	movs	r0, #49	; 0x31
 8000b26:	f7ff ff05 	bl	8000934 <NRF24L01_Write_Reg>
     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//write RX node address
 8000b2a:	2205      	movs	r2, #5
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <NRF24L01_RX_Mode+0x60>)
 8000b2e:	202a      	movs	r0, #42	; 0x2a
 8000b30:	f7ff ff82 	bl	8000a38 <NRF24L01_Write_Buf>
     NRF24L01_CE_HIGH(); //CE is high, enter the receiving mode
 8000b34:	2201      	movs	r2, #1
 8000b36:	2120      	movs	r1, #32
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <NRF24L01_RX_Mode+0x5c>)
 8000b3a:	f001 fb11 	bl	8002160 <HAL_GPIO_WritePin>
     delay_ms(1);//안정화 시간
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fb8e 	bl	8000260 <delay_ms>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	08004764 	.word	0x08004764

08000b50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b56:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <MX_SPI1_Init+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b84:	2210      	movs	r2, #16
 8000b86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_SPI1_Init+0x64>)
 8000ba2:	f001 ff0f 	bl	80029c4 <HAL_SPI_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bac:	f7ff fbaf 	bl	800030e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200002d0 	.word	0x200002d0
 8000bb8:	40013000 	.word	0x40013000

08000bbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d12f      	bne.n	8000c3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c0c:	23a0      	movs	r3, #160	; 0xa0
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_SPI_MspInit+0x90>)
 8000c20:	f001 f85e 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_SPI_MspInit+0x90>)
 8000c38:	f001 f852 	bl	8001ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800

08000c50 <uartInit>:




bool uartInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e007      	b.n	8000c6c <uartInit+0x1c>
  {
    is_open[i] = false;
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <uartInit+0x30>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	ddf4      	ble.n	8000c5c <uartInit+0xc>
  }

  return true;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200000a4 	.word	0x200000a4

08000c84 <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000c90:	2300      	movs	r3, #0
 8000c92:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <uartOpen+0x1c>
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d076      	beq.n	8000d8c <uartOpen+0x108>
 8000c9e:	e0eb      	b.n	8000e78 <uartOpen+0x1f4>
  {
    /* UART1 */
    case _DEF_UART1:
      huart1.Instance             = USART1;
 8000ca0:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <uartOpen+0x200>)
 8000ca2:	4a79      	ldr	r2, [pc, #484]	; (8000e88 <uartOpen+0x204>)
 8000ca4:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate        = baud;
 8000ca6:	4a77      	ldr	r2, [pc, #476]	; (8000e84 <uartOpen+0x200>)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 8000cac:	4b75      	ldr	r3, [pc, #468]	; (8000e84 <uartOpen+0x200>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 8000cb2:	4b74      	ldr	r3, [pc, #464]	; (8000e84 <uartOpen+0x200>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity          = UART_PARITY_NONE;
 8000cb8:	4b72      	ldr	r3, [pc, #456]	; (8000e84 <uartOpen+0x200>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode            = UART_MODE_TX_RX;
 8000cbe:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <uartOpen+0x200>)
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8000cc4:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <uartOpen+0x200>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 8000cca:	4b6e      	ldr	r3, [pc, #440]	; (8000e84 <uartOpen+0x200>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8000cd0:	486c      	ldr	r0, [pc, #432]	; (8000e84 <uartOpen+0x200>)
 8000cd2:	f002 f990 	bl	8002ff6 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	4a6c      	ldr	r2, [pc, #432]	; (8000e8c <uartOpen+0x208>)
 8000cdc:	4413      	add	r3, r2
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	496b      	ldr	r1, [pc, #428]	; (8000e90 <uartOpen+0x20c>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fc0e 	bl	8000506 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8000cea:	4b6a      	ldr	r3, [pc, #424]	; (8000e94 <uartOpen+0x210>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a69      	ldr	r2, [pc, #420]	; (8000e94 <uartOpen+0x210>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b67      	ldr	r3, [pc, #412]	; (8000e94 <uartOpen+0x210>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0); // RX DMA
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 fcab 	bl	8001662 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d0c:	200f      	movs	r0, #15
 8000d0e:	f000 fcc4 	bl	800169a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d12:	485c      	ldr	r0, [pc, #368]	; (8000e84 <uartOpen+0x200>)
 8000d14:	f002 f922 	bl	8002f5c <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <uartOpen+0xa0>
      {
        ret = false;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]

        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
      }

      break;
 8000d22:	e0a9      	b.n	8000e78 <uartOpen+0x1f4>
        ret = true;
 8000d24:	2301      	movs	r3, #1
 8000d26:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	; (8000e98 <uartOpen+0x214>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	4956      	ldr	r1, [pc, #344]	; (8000e90 <uartOpen+0x20c>)
 8000d36:	4853      	ldr	r0, [pc, #332]	; (8000e84 <uartOpen+0x200>)
 8000d38:	f002 f9f8 	bl	800312c <HAL_UART_Receive_DMA>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <uartOpen+0xc2>
          ret = false;
 8000d42:	2300      	movs	r3, #0
 8000d44:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4a50      	ldr	r2, [pc, #320]	; (8000e8c <uartOpen+0x208>)
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3308      	adds	r3, #8
 8000d50:	6819      	ldr	r1, [r3, #0]
 8000d52:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <uartOpen+0x218>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	1a8a      	subs	r2, r1, r2
 8000d5c:	494b      	ldr	r1, [pc, #300]	; (8000e8c <uartOpen+0x208>)
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	440b      	add	r3, r1
 8000d62:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4948      	ldr	r1, [pc, #288]	; (8000e8c <uartOpen+0x208>)
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	440a      	add	r2, r1
 8000d6e:	6812      	ldr	r2, [r2, #0]
 8000d70:	4946      	ldr	r1, [pc, #280]	; (8000e8c <uartOpen+0x208>)
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	440b      	add	r3, r1
 8000d76:	3304      	adds	r3, #4
 8000d78:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200e      	movs	r0, #14
 8000d80:	f000 fc6f 	bl	8001662 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d84:	200e      	movs	r0, #14
 8000d86:	f000 fc88 	bl	800169a <HAL_NVIC_EnableIRQ>
      break;
 8000d8a:	e075      	b.n	8000e78 <uartOpen+0x1f4>


    /* UART2 */
    case _DEF_UART2:
    	  huart2.Instance = USART2;
 8000d8c:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <uartOpen+0x21c>)
 8000d8e:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <uartOpen+0x220>)
 8000d90:	601a      	str	r2, [r3, #0]
    	  huart2.Init.BaudRate = baud;
 8000d92:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <uartOpen+0x21c>)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	6053      	str	r3, [r2, #4]
    	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d98:	4b41      	ldr	r3, [pc, #260]	; (8000ea0 <uartOpen+0x21c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9e:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <uartOpen+0x21c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    	  huart2.Init.Parity = UART_PARITY_NONE;
 8000da4:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <uartOpen+0x21c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
    	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <uartOpen+0x21c>)
 8000dac:	220c      	movs	r2, #12
 8000dae:	615a      	str	r2, [r3, #20]
    	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db0:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <uartOpen+0x21c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
    	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <uartOpen+0x21c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]

          HAL_UART_DeInit(&huart2);
 8000dbc:	4838      	ldr	r0, [pc, #224]	; (8000ea0 <uartOpen+0x21c>)
 8000dbe:	f002 f91a 	bl	8002ff6 <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <uartOpen+0x208>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dce:	4930      	ldr	r1, [pc, #192]	; (8000e90 <uartOpen+0x20c>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb98 	bl	8000506 <qbufferCreate>

          __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <uartOpen+0x210>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a2e      	ldr	r2, [pc, #184]	; (8000e94 <uartOpen+0x210>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <uartOpen+0x210>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

          HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);  // RX DMA
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2010      	movs	r0, #16
 8000df4:	f000 fc35 	bl	8001662 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000df8:	2010      	movs	r0, #16
 8000dfa:	f000 fc4e 	bl	800169a <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4828      	ldr	r0, [pc, #160]	; (8000ea0 <uartOpen+0x21c>)
 8000e00:	f002 f8ac 	bl	8002f5c <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <uartOpen+0x18c>
          {
            ret = false;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]

            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
          }

          break;
 8000e0e:	e032      	b.n	8000e76 <uartOpen+0x1f2>
            ret = true;
 8000e10:	2301      	movs	r3, #1
 8000e12:	75fb      	strb	r3, [r7, #23]
            is_open[ch] = true;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <uartOpen+0x214>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e20:	491b      	ldr	r1, [pc, #108]	; (8000e90 <uartOpen+0x20c>)
 8000e22:	481f      	ldr	r0, [pc, #124]	; (8000ea0 <uartOpen+0x21c>)
 8000e24:	f002 f982 	bl	800312c <HAL_UART_Receive_DMA>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <uartOpen+0x1ae>
              ret = false;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	75fb      	strb	r3, [r7, #23]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <uartOpen+0x208>)
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4413      	add	r3, r2
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <uartOpen+0x224>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	1a8a      	subs	r2, r1, r2
 8000e48:	4910      	ldr	r1, [pc, #64]	; (8000e8c <uartOpen+0x208>)
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	440b      	add	r3, r1
 8000e4e:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	490d      	ldr	r1, [pc, #52]	; (8000e8c <uartOpen+0x208>)
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	440a      	add	r2, r1
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	490b      	ldr	r1, [pc, #44]	; (8000e8c <uartOpen+0x208>)
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	440b      	add	r3, r1
 8000e62:	3304      	adds	r3, #4
 8000e64:	601a      	str	r2, [r3, #0]
            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2011      	movs	r0, #17
 8000e6c:	f000 fbf9 	bl	8001662 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e70:	2011      	movs	r0, #17
 8000e72:	f000 fc12 	bl	800169a <HAL_NVIC_EnableIRQ>
          break;
 8000e76:	bf00      	nop
  }

  return ret;
 8000e78:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000438 	.word	0x20000438
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	200000a8 	.word	0x200000a8
 8000e90:	200000c8 	.word	0x200000c8
 8000e94:	40021000 	.word	0x40021000
 8000e98:	200000a4 	.word	0x200000a4
 8000e9c:	200003b0 	.word	0x200003b0
 8000ea0:	2000047c 	.word	0x2000047c
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	20000328 	.word	0x20000328

08000eac <uartWrite>:
}



uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  uint32_t pre_time;

  switch(ch)
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <uartWrite+0x1e>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d034      	beq.n	8000f32 <uartWrite+0x86>
 8000ec8:	e067      	b.n	8000f9a <uartWrite+0xee>
  {
  	/* UART1 */
    case _DEF_UART1:
        pre_time = millis();
 8000eca:	f7ff f9d4 	bl	8000276 <millis>
 8000ece:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8000ed0:	e025      	b.n	8000f1e <uartWrite+0x72>
        {
          if (huart1.gState == HAL_UART_STATE_READY)
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <uartWrite+0xf8>)
 8000ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	d11f      	bne.n	8000f1e <uartWrite+0x72>
          {

            for (int i = 0; i < length; i++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	e00b      	b.n	8000efc <uartWrite+0x50>
            {
              tx_buf[i] = p_data[i];
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	4413      	add	r3, r2
 8000eea:	7819      	ldrb	r1, [r3, #0]
 8000eec:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <uartWrite+0xfc>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8ef      	bhi.n	8000ee4 <uartWrite+0x38>
            }

            if(HAL_UART_Transmit_DMA(&huart1, &tx_buf[0], length) == HAL_OK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4927      	ldr	r1, [pc, #156]	; (8000fa8 <uartWrite+0xfc>)
 8000f0c:	4825      	ldr	r0, [pc, #148]	; (8000fa4 <uartWrite+0xf8>)
 8000f0e:	f002 f8a1 	bl	8003054 <HAL_UART_Transmit_DMA>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10a      	bne.n	8000f2e <uartWrite+0x82>
            {
              ret = length;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	61fb      	str	r3, [r7, #28]
            }

            break;
 8000f1c:	e007      	b.n	8000f2e <uartWrite+0x82>
        while(millis() - pre_time < 100)
 8000f1e:	f7ff f9aa 	bl	8000276 <millis>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b63      	cmp	r3, #99	; 0x63
 8000f2a:	d9d2      	bls.n	8000ed2 <uartWrite+0x26>
          }
        }
      break;
 8000f2c:	e035      	b.n	8000f9a <uartWrite+0xee>
            break;
 8000f2e:	bf00      	nop
      break;
 8000f30:	e033      	b.n	8000f9a <uartWrite+0xee>


    /* UART2 */
    case _DEF_UART2:
        pre_time = millis();
 8000f32:	f7ff f9a0 	bl	8000276 <millis>
 8000f36:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8000f38:	e025      	b.n	8000f86 <uartWrite+0xda>
        {
          if (huart2.gState == HAL_UART_STATE_READY)
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <uartWrite+0x100>)
 8000f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b20      	cmp	r3, #32
 8000f44:	d11f      	bne.n	8000f86 <uartWrite+0xda>
          {

            for (int i = 0; i < length; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e00b      	b.n	8000f64 <uartWrite+0xb8>
            {
              tx_buf[i] = p_data[i];
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	4413      	add	r3, r2
 8000f52:	7819      	ldrb	r1, [r3, #0]
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <uartWrite+0xfc>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	4413      	add	r3, r2
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8ef      	bhi.n	8000f4c <uartWrite+0xa0>
            }

            if(HAL_UART_Transmit_DMA(&huart2, &tx_buf[0], length) == HAL_OK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <uartWrite+0xfc>)
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <uartWrite+0x100>)
 8000f76:	f002 f86d 	bl	8003054 <HAL_UART_Transmit_DMA>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10a      	bne.n	8000f96 <uartWrite+0xea>
            {
              ret = length;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	61fb      	str	r3, [r7, #28]
            }

            break;
 8000f84:	e007      	b.n	8000f96 <uartWrite+0xea>
        while(millis() - pre_time < 100)
 8000f86:	f7ff f976 	bl	8000276 <millis>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b63      	cmp	r3, #99	; 0x63
 8000f92:	d9d2      	bls.n	8000f3a <uartWrite+0x8e>
          }
        }
      break;
 8000f94:	e000      	b.n	8000f98 <uartWrite+0xec>
            break;
 8000f96:	bf00      	nop
      break;
 8000f98:	bf00      	nop

  }
  return ret;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000438 	.word	0x20000438
 8000fa8:	200001c8 	.word	0x200001c8
 8000fac:	2000047c 	.word	0x2000047c

08000fb0 <uartPrintf>:



uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8000fb0:	b40e      	push	{r1, r2, r3}
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b0c7      	sub	sp, #284	; 0x11c
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4602      	mov	r2, r0
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000fbe:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	f107 0010 	add.w	r0, r7, #16
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	f002 fe47 	bl	8003c6c <vsniprintf>
 8000fde:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000fe2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000fe6:	f107 0110 	add.w	r1, r7, #16
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff5c 	bl	8000eac <uartWrite>
 8000ff4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8000ff8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001002:	46bd      	mov	sp, r7
 8001004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001008:	b003      	add	sp, #12
 800100a:	4770      	bx	lr

0800100c <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]

}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return;
 8001038:	bf00      	nop
}
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a86      	ldr	r2, [pc, #536]	; (8001278 <HAL_UART_MspInit+0x234>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d17a      	bne.n	800115a <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001064:	4b85      	ldr	r3, [pc, #532]	; (800127c <HAL_UART_MspInit+0x238>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a84      	ldr	r2, [pc, #528]	; (800127c <HAL_UART_MspInit+0x238>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b82      	ldr	r3, [pc, #520]	; (800127c <HAL_UART_MspInit+0x238>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
 //   __HAL_RCC_GPIOA_CLK_ENABLE();				/* bsp.c에서 초기화 시킴 */
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800107c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	4619      	mov	r1, r3
 8001090:	487b      	ldr	r0, [pc, #492]	; (8001280 <HAL_UART_MspInit+0x23c>)
 8001092:	f000 fe25 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4875      	ldr	r0, [pc, #468]	; (8001280 <HAL_UART_MspInit+0x23c>)
 80010ac:	f000 fe18 	bl	8001ce0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80010b0:	4b74      	ldr	r3, [pc, #464]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010b2:	4a75      	ldr	r2, [pc, #468]	; (8001288 <HAL_UART_MspInit+0x244>)
 80010b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b6:	4b73      	ldr	r3, [pc, #460]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010bc:	4b71      	ldr	r3, [pc, #452]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c8:	4b6e      	ldr	r3, [pc, #440]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ce:	4b6d      	ldr	r3, [pc, #436]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010d4:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010d6:	2220      	movs	r2, #32
 80010d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010da:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010e0:	4868      	ldr	r0, [pc, #416]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010e2:	f000 fb03 	bl	80016ec <HAL_DMA_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 80010ec:	f7ff f90f 	bl	800030e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a64      	ldr	r2, [pc, #400]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38
 80010f6:	4a63      	ldr	r2, [pc, #396]	; (8001284 <HAL_UART_MspInit+0x240>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010fc:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_UART_MspInit+0x248>)
 80010fe:	4a64      	ldr	r2, [pc, #400]	; (8001290 <HAL_UART_MspInit+0x24c>)
 8001100:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001102:	4b62      	ldr	r3, [pc, #392]	; (800128c <HAL_UART_MspInit+0x248>)
 8001104:	2210      	movs	r2, #16
 8001106:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <HAL_UART_MspInit+0x248>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b5f      	ldr	r3, [pc, #380]	; (800128c <HAL_UART_MspInit+0x248>)
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001114:	4b5d      	ldr	r3, [pc, #372]	; (800128c <HAL_UART_MspInit+0x248>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111a:	4b5c      	ldr	r3, [pc, #368]	; (800128c <HAL_UART_MspInit+0x248>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001120:	4b5a      	ldr	r3, [pc, #360]	; (800128c <HAL_UART_MspInit+0x248>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001126:	4b59      	ldr	r3, [pc, #356]	; (800128c <HAL_UART_MspInit+0x248>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800112c:	4857      	ldr	r0, [pc, #348]	; (800128c <HAL_UART_MspInit+0x248>)
 800112e:	f000 fadd 	bl	80016ec <HAL_DMA_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001138:	f7ff f8e9 	bl	800030e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a53      	ldr	r2, [pc, #332]	; (800128c <HAL_UART_MspInit+0x248>)
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_UART_MspInit+0x248>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2025      	movs	r0, #37	; 0x25
 800114e:	f000 fa88 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001152:	2025      	movs	r0, #37	; 0x25
 8001154:	f000 faa1 	bl	800169a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001158:	e089      	b.n	800126e <HAL_UART_MspInit+0x22a>
  else if(uartHandle->Instance==USART2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001160:	4293      	cmp	r3, r2
 8001162:	f040 8084 	bne.w	800126e <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <HAL_UART_MspInit+0x238>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a44      	ldr	r2, [pc, #272]	; (800127c <HAL_UART_MspInit+0x238>)
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b42      	ldr	r3, [pc, #264]	; (800127c <HAL_UART_MspInit+0x238>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b3f      	ldr	r3, [pc, #252]	; (800127c <HAL_UART_MspInit+0x238>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a3e      	ldr	r2, [pc, #248]	; (800127c <HAL_UART_MspInit+0x238>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <HAL_UART_MspInit+0x238>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001196:	2304      	movs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4835      	ldr	r0, [pc, #212]	; (8001280 <HAL_UART_MspInit+0x23c>)
 80011aa:	f000 fd99 	bl	8001ce0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ae:	2308      	movs	r3, #8
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	4619      	mov	r1, r3
 80011c0:	482f      	ldr	r0, [pc, #188]	; (8001280 <HAL_UART_MspInit+0x23c>)
 80011c2:	f000 fd8d 	bl	8001ce0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011c8:	4a34      	ldr	r2, [pc, #208]	; (800129c <HAL_UART_MspInit+0x258>)
 80011ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011ec:	2220      	movs	r2, #32
 80011ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011f6:	4828      	ldr	r0, [pc, #160]	; (8001298 <HAL_UART_MspInit+0x254>)
 80011f8:	f000 fa78 	bl	80016ec <HAL_DMA_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8001202:	f7ff f884 	bl	800030e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_UART_MspInit+0x254>)
 800120a:	639a      	str	r2, [r3, #56]	; 0x38
 800120c:	4a22      	ldr	r2, [pc, #136]	; (8001298 <HAL_UART_MspInit+0x254>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001214:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <HAL_UART_MspInit+0x260>)
 8001216:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 800121a:	2210      	movs	r2, #16
 800121c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001242:	4817      	ldr	r0, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001244:	f000 fa52 	bl	80016ec <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_UART_MspInit+0x20e>
      Error_Handler();
 800124e:	f7ff f85e 	bl	800030e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2026      	movs	r0, #38	; 0x26
 8001264:	f000 f9fd 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001268:	2026      	movs	r0, #38	; 0x26
 800126a:	f000 fa16 	bl	800169a <HAL_NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40013800 	.word	0x40013800
 800127c:	40021000 	.word	0x40021000
 8001280:	40010800 	.word	0x40010800
 8001284:	200003b0 	.word	0x200003b0
 8001288:	40020058 	.word	0x40020058
 800128c:	2000036c 	.word	0x2000036c
 8001290:	40020044 	.word	0x40020044
 8001294:	40004400 	.word	0x40004400
 8001298:	20000328 	.word	0x20000328
 800129c:	4002006c 	.word	0x4002006c
 80012a0:	200003f4 	.word	0x200003f4
 80012a4:	40020080 	.word	0x40020080

080012a8 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_UART_MspDeInit+0x84>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d118      	bne.n	80012ec <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_UART_MspDeInit+0x88>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <HAL_UART_MspDeInit+0x88>)
 80012c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80012c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <HAL_UART_MspDeInit+0x8c>)
 80012cc:	f000 fe8c 	bl	8001fe8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fa63 	bl	80017a0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fa5e 	bl	80017a0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80012e4:	2025      	movs	r0, #37	; 0x25
 80012e6:	f000 f9e6 	bl	80016b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80012ea:	e01b      	b.n	8001324 <HAL_UART_MspDeInit+0x7c>
  else if(uartHandle->Instance==USART2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_UART_MspDeInit+0x90>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d116      	bne.n	8001324 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART2_CLK_DISABLE();
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_MspDeInit+0x88>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_UART_MspDeInit+0x88>)
 80012fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001300:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001302:	210c      	movs	r1, #12
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_UART_MspDeInit+0x8c>)
 8001306:	f000 fe6f 	bl	8001fe8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fa46 	bl	80017a0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fa41 	bl	80017a0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800131e:	2026      	movs	r0, #38	; 0x26
 8001320:	f000 f9c9 	bl	80016b6 <HAL_NVIC_DisableIRQ>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013800 	.word	0x40013800
 8001330:	40021000 	.word	0x40021000
 8001334:	40010800 	.word	0x40010800
 8001338:	40004400 	.word	0x40004400

0800133c <hwInit>:

#include "hw.h"


void hwInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	bspInit();
 8001340:	f7fe ff50 	bl	80001e4 <bspInit>

/*  TODO: HW 설정 - "하드웨어 초기화" (3) */

	uartInit();
 8001344:	f7ff fc84 	bl	8000c50 <uartInit>
	MX_SPI1_Init();
 8001348:	f7ff fc02 	bl	8000b50 <MX_SPI1_Init>
	gpioInit();
 800134c:	f7ff f8fe 	bl	800054c <gpioInit>
	NRF24L01_Init();
 8001350:	f7ff fa3c 	bl	80007cc <NRF24L01_Init>
	dfplayer_Init();
 8001354:	f7ff f8f1 	bl	800053a <dfplayer_Init>
	ledInit();
 8001358:	f7ff f9e2 	bl	8000720 <ledInit>

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f96b 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7fe ffcc 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f991 	bl	80016d2 <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f94b 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000000 	.word	0x20000000
 80013e4:	2000001c 	.word	0x2000001c
 80013e8:	20000018 	.word	0x20000018

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x1c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x20>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_IncTick+0x20>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	2000001c 	.word	0x2000001c
 800140c:	200004c0 	.word	0x200004c0

08001410 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <HAL_GetTick+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	200004c0 	.word	0x200004c0

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff fff0 	bl	8001410 <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffe0 	bl	8001410 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000001c 	.word	0x2000001c

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <__NVIC_EnableIRQ+0x34>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db12      	blt.n	8001540 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	490a      	ldr	r1, [pc, #40]	; (800154c <__NVIC_DisableIRQ+0x44>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	3320      	adds	r3, #32
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001534:	f3bf 8f4f 	dsb	sy
}
 8001538:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800153a:	f3bf 8f6f 	isb	sy
}
 800153e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff90 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff09 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff1e 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff11 	bl	80014d0 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff1f 	bl	8001508 <__NVIC_DisableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff94 	bl	8001608 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e043      	b.n	800178a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_DMA_Init+0xa8>)
 800170a:	4413      	add	r3, r2
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_DMA_Init+0xac>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	009a      	lsls	r2, r3, #2
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_DMA_Init+0xb0>)
 800171e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001736:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800173a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	bffdfff8 	.word	0xbffdfff8
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	40020000 	.word	0x40020000

080017a0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e046      	b.n	8001840 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0201 	bic.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_DMA_DeInit+0xac>)
 80017ea:	4413      	add	r3, r2
 80017ec:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_DMA_DeInit+0xb0>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	009a      	lsls	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_DMA_DeInit+0xb4>)
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	bffdfff8 	.word	0xbffdfff8
 8001850:	cccccccd 	.word	0xcccccccd
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_DMA_Start_IT+0x20>
 8001874:	2302      	movs	r3, #2
 8001876:	e04a      	b.n	800190e <HAL_DMA_Start_IT+0xb6>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001886:	2b01      	cmp	r3, #1
 8001888:	d13a      	bne.n	8001900 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2202      	movs	r2, #2
 800188e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f9e8 	bl	8001c84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 020e 	orr.w	r2, r2, #14
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e00f      	b.n	80018ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0204 	bic.w	r2, r2, #4
 80018dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 020a 	orr.w	r2, r2, #10
 80018ec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e005      	b.n	800190c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001908:	2302      	movs	r3, #2
 800190a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800190c:	7dfb      	ldrb	r3, [r7, #23]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001928:	2b02      	cmp	r3, #2
 800192a:	d008      	beq.n	800193e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2204      	movs	r2, #4
 8001930:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e020      	b.n	8001980 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 020e 	bic.w	r2, r2, #14
 800194c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d005      	beq.n	80019ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2204      	movs	r2, #4
 80019a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e051      	b.n	8001a52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 020e 	bic.w	r2, r2, #14
 80019bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <HAL_DMA_Abort_IT+0xd0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d029      	beq.n	8001a2c <HAL_DMA_Abort_IT+0xa0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_DMA_Abort_IT+0xd4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d022      	beq.n	8001a28 <HAL_DMA_Abort_IT+0x9c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_DMA_Abort_IT+0xd8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d01a      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x96>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_DMA_Abort_IT+0xdc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d012      	beq.n	8001a1c <HAL_DMA_Abort_IT+0x90>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_DMA_Abort_IT+0xe0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00a      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x8a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_DMA_Abort_IT+0xe4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d102      	bne.n	8001a10 <HAL_DMA_Abort_IT+0x84>
 8001a0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a0e:	e00e      	b.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 8001a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a14:	e00b      	b.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 8001a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1a:	e008      	b.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	e005      	b.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 8001a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a26:	e002      	b.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 8001a28:	2310      	movs	r3, #16
 8001a2a:	e000      	b.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_DMA_Abort_IT+0xe8>)
 8001a30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
    } 
  }
  return status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40020008 	.word	0x40020008
 8001a60:	4002001c 	.word	0x4002001c
 8001a64:	40020030 	.word	0x40020030
 8001a68:	40020044 	.word	0x40020044
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	4002006c 	.word	0x4002006c
 8001a74:	40020000 	.word	0x40020000

08001a78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	2204      	movs	r2, #4
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d04f      	beq.n	8001b40 <HAL_DMA_IRQHandler+0xc8>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d04a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d107      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0204 	bic.w	r2, r2, #4
 8001ac6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a66      	ldr	r2, [pc, #408]	; (8001c68 <HAL_DMA_IRQHandler+0x1f0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d029      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xae>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a65      	ldr	r2, [pc, #404]	; (8001c6c <HAL_DMA_IRQHandler+0x1f4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d022      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xaa>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_DMA_IRQHandler+0x1f8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01a      	beq.n	8001b1c <HAL_DMA_IRQHandler+0xa4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a62      	ldr	r2, [pc, #392]	; (8001c74 <HAL_DMA_IRQHandler+0x1fc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d012      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x9e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_DMA_IRQHandler+0x200>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00a      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x98>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a5f      	ldr	r2, [pc, #380]	; (8001c7c <HAL_DMA_IRQHandler+0x204>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d102      	bne.n	8001b0a <HAL_DMA_IRQHandler+0x92>
 8001b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b08:	e00e      	b.n	8001b28 <HAL_DMA_IRQHandler+0xb0>
 8001b0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b0e:	e00b      	b.n	8001b28 <HAL_DMA_IRQHandler+0xb0>
 8001b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b14:	e008      	b.n	8001b28 <HAL_DMA_IRQHandler+0xb0>
 8001b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1a:	e005      	b.n	8001b28 <HAL_DMA_IRQHandler+0xb0>
 8001b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b20:	e002      	b.n	8001b28 <HAL_DMA_IRQHandler+0xb0>
 8001b22:	2340      	movs	r3, #64	; 0x40
 8001b24:	e000      	b.n	8001b28 <HAL_DMA_IRQHandler+0xb0>
 8001b26:	2304      	movs	r3, #4
 8001b28:	4a55      	ldr	r2, [pc, #340]	; (8001c80 <HAL_DMA_IRQHandler+0x208>)
 8001b2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8094 	beq.w	8001c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b3e:	e08e      	b.n	8001c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2202      	movs	r2, #2
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d056      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x186>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d051      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10b      	bne.n	8001b80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020a 	bic.w	r2, r2, #10
 8001b76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a38      	ldr	r2, [pc, #224]	; (8001c68 <HAL_DMA_IRQHandler+0x1f0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d029      	beq.n	8001bde <HAL_DMA_IRQHandler+0x166>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a37      	ldr	r2, [pc, #220]	; (8001c6c <HAL_DMA_IRQHandler+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <HAL_DMA_IRQHandler+0x162>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a35      	ldr	r2, [pc, #212]	; (8001c70 <HAL_DMA_IRQHandler+0x1f8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01a      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x15c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a34      	ldr	r2, [pc, #208]	; (8001c74 <HAL_DMA_IRQHandler+0x1fc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d012      	beq.n	8001bce <HAL_DMA_IRQHandler+0x156>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <HAL_DMA_IRQHandler+0x200>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x150>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <HAL_DMA_IRQHandler+0x204>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_DMA_IRQHandler+0x14a>
 8001bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bc0:	e00e      	b.n	8001be0 <HAL_DMA_IRQHandler+0x168>
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	e00b      	b.n	8001be0 <HAL_DMA_IRQHandler+0x168>
 8001bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bcc:	e008      	b.n	8001be0 <HAL_DMA_IRQHandler+0x168>
 8001bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd2:	e005      	b.n	8001be0 <HAL_DMA_IRQHandler+0x168>
 8001bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd8:	e002      	b.n	8001be0 <HAL_DMA_IRQHandler+0x168>
 8001bda:	2320      	movs	r3, #32
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_IRQHandler+0x168>
 8001bde:	2302      	movs	r3, #2
 8001be0:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_DMA_IRQHandler+0x208>)
 8001be2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d034      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bfc:	e02f      	b.n	8001c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2208      	movs	r2, #8
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d028      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x1e8>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 020e 	bic.w	r2, r2, #14
 8001c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
    }
  }
  return;
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
}
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020008 	.word	0x40020008
 8001c6c:	4002001c 	.word	0x4002001c
 8001c70:	40020030 	.word	0x40020030
 8001c74:	40020044 	.word	0x40020044
 8001c78:	40020058 	.word	0x40020058
 8001c7c:	4002006c 	.word	0x4002006c
 8001c80:	40020000 	.word	0x40020000

08001c84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d108      	bne.n	8001cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cc2:	e007      	b.n	8001cd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e169      	b.n	8001fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8158 	bne.w	8001fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a9a      	ldr	r2, [pc, #616]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d05e      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d1c:	4a98      	ldr	r2, [pc, #608]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d875      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d22:	4a98      	ldr	r2, [pc, #608]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d058      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d28:	4a96      	ldr	r2, [pc, #600]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d86f      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d2e:	4a96      	ldr	r2, [pc, #600]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d052      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d34:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d869      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d3a:	4a94      	ldr	r2, [pc, #592]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04c      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d40:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d863      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d46:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d046      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d4c:	4a90      	ldr	r2, [pc, #576]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d85d      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d82a      	bhi.n	8001dac <HAL_GPIO_Init+0xcc>
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d859      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HAL_GPIO_Init+0x80>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001db5 	.word	0x08001db5
 8001d68:	08001dc7 	.word	0x08001dc7
 8001d6c:	08001e09 	.word	0x08001e09
 8001d70:	08001e0f 	.word	0x08001e0f
 8001d74:	08001e0f 	.word	0x08001e0f
 8001d78:	08001e0f 	.word	0x08001e0f
 8001d7c:	08001e0f 	.word	0x08001e0f
 8001d80:	08001e0f 	.word	0x08001e0f
 8001d84:	08001e0f 	.word	0x08001e0f
 8001d88:	08001e0f 	.word	0x08001e0f
 8001d8c:	08001e0f 	.word	0x08001e0f
 8001d90:	08001e0f 	.word	0x08001e0f
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001e0f 	.word	0x08001e0f
 8001d9c:	08001e0f 	.word	0x08001e0f
 8001da0:	08001e0f 	.word	0x08001e0f
 8001da4:	08001dbd 	.word	0x08001dbd
 8001da8:	08001dd1 	.word	0x08001dd1
 8001dac:	4a79      	ldr	r2, [pc, #484]	; (8001f94 <HAL_GPIO_Init+0x2b4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001db2:	e02c      	b.n	8001e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e029      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e024      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e01f      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e01a      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de2:	2304      	movs	r3, #4
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e013      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df0:	2308      	movs	r3, #8
 8001df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	611a      	str	r2, [r3, #16]
          break;
 8001dfa:	e009      	b.n	8001e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	615a      	str	r2, [r3, #20]
          break;
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          break;
 8001e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d801      	bhi.n	8001e1a <HAL_GPIO_Init+0x13a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_Init+0x13e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d802      	bhi.n	8001e2c <HAL_GPIO_Init+0x14c>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x152>
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3b08      	subs	r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	210f      	movs	r1, #15
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80b1 	beq.w	8001fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e60:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <HAL_GPIO_Init+0x2c0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x1ec>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3f      	ldr	r2, [pc, #252]	; (8001fa4 <HAL_GPIO_Init+0x2c4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3e      	ldr	r2, [pc, #248]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_GPIO_Init+0x2cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1e0>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e006      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e004      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ede:	492f      	ldr	r1, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	492c      	ldr	r1, [pc, #176]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4928      	ldr	r1, [pc, #160]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	491e      	ldr	r1, [pc, #120]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4914      	ldr	r1, [pc, #80]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d021      	beq.n	8001fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
 8001f7c:	e021      	b.n	8001fc2 <HAL_GPIO_Init+0x2e2>
 8001f7e:	bf00      	nop
 8001f80:	10320000 	.word	0x10320000
 8001f84:	10310000 	.word	0x10310000
 8001f88:	10220000 	.word	0x10220000
 8001f8c:	10210000 	.word	0x10210000
 8001f90:	10120000 	.word	0x10120000
 8001f94:	10110000 	.word	0x10110000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f47f ae8e 	bne.w	8001cf4 <HAL_GPIO_Init+0x14>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	372c      	adds	r7, #44	; 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001ff6:	e09a      	b.n	800212e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 808d 	beq.w	8002128 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800200e:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_GPIO_DeInit+0x160>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a46      	ldr	r2, [pc, #280]	; (800214c <HAL_GPIO_DeInit+0x164>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_GPIO_DeInit+0x78>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a45      	ldr	r2, [pc, #276]	; (8002150 <HAL_GPIO_DeInit+0x168>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_DeInit+0x74>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a44      	ldr	r2, [pc, #272]	; (8002154 <HAL_GPIO_DeInit+0x16c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_DeInit+0x70>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a43      	ldr	r2, [pc, #268]	; (8002158 <HAL_GPIO_DeInit+0x170>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_DeInit+0x6c>
 8002050:	2303      	movs	r3, #3
 8002052:	e006      	b.n	8002062 <HAL_GPIO_DeInit+0x7a>
 8002054:	2304      	movs	r3, #4
 8002056:	e004      	b.n	8002062 <HAL_GPIO_DeInit+0x7a>
 8002058:	2302      	movs	r3, #2
 800205a:	e002      	b.n	8002062 <HAL_GPIO_DeInit+0x7a>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_GPIO_DeInit+0x7a>
 8002060:	2300      	movs	r3, #0
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f002 0203 	and.w	r2, r2, #3
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	4093      	lsls	r3, r2
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	429a      	cmp	r2, r3
 8002070:	d132      	bne.n	80020d8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002082:	4a31      	ldr	r2, [pc, #196]	; (8002148 <HAL_GPIO_DeInit+0x160>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	43da      	mvns	r2, r3
 8002092:	482d      	ldr	r0, [pc, #180]	; (8002148 <HAL_GPIO_DeInit+0x160>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	400a      	ands	r2, r1
 800209a:	3302      	adds	r3, #2
 800209c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	492c      	ldr	r1, [pc, #176]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4929      	ldr	r1, [pc, #164]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4925      	ldr	r1, [pc, #148]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4922      	ldr	r1, [pc, #136]	; (800215c <HAL_GPIO_DeInit+0x174>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2bff      	cmp	r3, #255	; 0xff
 80020dc:	d801      	bhi.n	80020e2 <HAL_GPIO_DeInit+0xfa>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	e001      	b.n	80020e6 <HAL_GPIO_DeInit+0xfe>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2bff      	cmp	r3, #255	; 0xff
 80020ec:	d802      	bhi.n	80020f4 <HAL_GPIO_DeInit+0x10c>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	e002      	b.n	80020fa <HAL_GPIO_DeInit+0x112>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3b08      	subs	r3, #8
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	210f      	movs	r1, #15
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	2104      	movs	r1, #4
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	431a      	orrs	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	f47f af5e 	bne.w	8001ff8 <HAL_GPIO_DeInit+0x10>
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40010000 	.word	0x40010000
 800214c:	40010800 	.word	0x40010800
 8002150:	40010c00 	.word	0x40010c00
 8002154:	40011000 	.word	0x40011000
 8002158:	40011400 	.word	0x40011400
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e26c      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d00c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021bc:	4b8f      	ldr	r3, [pc, #572]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d112      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
 80021c8:	4b8c      	ldr	r3, [pc, #560]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d10b      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d06c      	beq.n	80022bc <HAL_RCC_OscConfig+0x12c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d168      	bne.n	80022bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e246      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x76>
 80021f8:	4b80      	ldr	r3, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a7f      	ldr	r2, [pc, #508]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e02e      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b7b      	ldr	r3, [pc, #492]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7a      	ldr	r2, [pc, #488]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b78      	ldr	r3, [pc, #480]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a77      	ldr	r2, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0xbc>
 8002232:	4b72      	ldr	r3, [pc, #456]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a71      	ldr	r2, [pc, #452]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 800224c:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6a      	ldr	r2, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b68      	ldr	r3, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a67      	ldr	r2, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff f8d0 	bl	8001410 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff f8cc 	bl	8001410 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1fa      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xe4>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff f8bc 	bl	8001410 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff f8b8 	bl	8001410 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1e6      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x10c>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d063      	beq.n	8002392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022d6:	4b49      	ldr	r3, [pc, #292]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d11c      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
 80022e2:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1ba      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4939      	ldr	r1, [pc, #228]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e03a      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCC_OscConfig+0x270>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff f871 	bl	8001410 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002332:	f7ff f86d 	bl	8001410 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e19b      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4927      	ldr	r1, [pc, #156]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b26      	ldr	r3, [pc, #152]	; (8002400 <HAL_RCC_OscConfig+0x270>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff f850 	bl	8001410 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7ff f84c 	bl	8001410 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e17a      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03a      	beq.n	8002414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d019      	beq.n	80023da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff f830 	bl	8001410 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff f82c 	bl	8001410 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e15a      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 fad8 	bl	8002988 <RCC_Delay>
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff f816 	bl	8001410 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e6:	e00f      	b.n	8002408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff f812 	bl	8001410 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d908      	bls.n	8002408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e140      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	42420000 	.word	0x42420000
 8002404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e9      	bne.n	80023e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a6 	beq.w	800256e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b97      	ldr	r3, [pc, #604]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b94      	ldr	r3, [pc, #592]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a93      	ldr	r2, [pc, #588]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b91      	ldr	r3, [pc, #580]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a8a      	ldr	r2, [pc, #552]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7fe ffd3 	bl	8001410 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7fe ffcf 	bl	8001410 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0fd      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x312>
 8002494:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a75      	ldr	r2, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b73      	ldr	r3, [pc, #460]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a72      	ldr	r2, [pc, #456]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x356>
 80024cc:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a63      	ldr	r2, [pc, #396]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe ff83 	bl	8001410 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe ff7f 	bl	8001410 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0ab      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x37e>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe ff6d 	bl	8001410 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe ff69 	bl	8001410 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e095      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b48      	ldr	r3, [pc, #288]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a47      	ldr	r2, [pc, #284]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8081 	beq.w	800267a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d061      	beq.n	8002648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d146      	bne.n	800261a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe ff3d 	bl	8001410 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe ff39 	bl	8001410 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e067      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	492d      	ldr	r1, [pc, #180]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a19      	ldr	r1, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	430b      	orrs	r3, r1
 80025e6:	4927      	ldr	r1, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe ff0d 	bl	8001410 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe ff09 	bl	8001410 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e037      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x46a>
 8002618:	e02f      	b.n	800267a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fef6 	bl	8001410 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fef2 	bl	8001410 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e020      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x498>
 8002646:	e018      	b.n	800267a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e013      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420060 	.word	0x42420060

08002690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d0      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4965      	ldr	r1, [pc, #404]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b8      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002704:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a52      	ldr	r2, [pc, #328]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800270e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	494d      	ldr	r1, [pc, #308]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d040      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e073      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06b      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4936      	ldr	r1, [pc, #216]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fe46 	bl	8001410 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fe42 	bl	8001410 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e053      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d210      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4922      	ldr	r1, [pc, #136]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4916      	ldr	r1, [pc, #88]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	490e      	ldr	r1, [pc, #56]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800281e:	f000 f821 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	490a      	ldr	r1, [pc, #40]	; (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1cc>)
 8002838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x1d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fda4 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40022000 	.word	0x40022000
 8002854:	40021000 	.word	0x40021000
 8002858:	0800474c 	.word	0x0800474c
 800285c:	20000000 	.word	0x20000000
 8002860:	20000018 	.word	0x20000018

08002864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b490      	push	{r4, r7}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb0>)
 800286c:	1d3c      	adds	r4, r7, #4
 800286e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002874:	f240 2301 	movw	r3, #513	; 0x201
 8002878:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800288e:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x40>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x46>
 80028a2:	e02d      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	623b      	str	r3, [r7, #32]
      break;
 80028a8:	e02d      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028b6:	4413      	add	r3, r2
 80028b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	0c5b      	lsrs	r3, r3, #17
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028d6:	4413      	add	r3, r2
 80028d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	fb02 f203 	mul.w	r2, r2, r3
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	e004      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	623b      	str	r3, [r7, #32]
      break;
 80028fe:	e002      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002902:	623b      	str	r3, [r7, #32]
      break;
 8002904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002906:	6a3b      	ldr	r3, [r7, #32]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bc90      	pop	{r4, r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	0800473c 	.word	0x0800473c
 8002918:	40021000 	.word	0x40021000
 800291c:	007a1200 	.word	0x007a1200
 8002920:	003d0900 	.word	0x003d0900

08002924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <HAL_RCC_GetHCLKFreq+0x10>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000000 	.word	0x20000000

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800293c:	f7ff fff2 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	0800475c 	.word	0x0800475c

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002964:	f7ff ffde 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0adb      	lsrs	r3, r3, #11
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	0800475c 	.word	0x0800475c

08002988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <RCC_Delay+0x34>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <RCC_Delay+0x38>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0a5b      	lsrs	r3, r3, #9
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a4:	bf00      	nop
  }
  while (Delay --);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	60fa      	str	r2, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f9      	bne.n	80029a4 <RCC_Delay+0x1c>
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000000 	.word	0x20000000
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e076      	b.n	8002ac4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029e6:	d009      	beq.n	80029fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
 80029ee:	e005      	b.n	80029fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f8d0 	bl	8000bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	ea42 0103 	orr.w	r1, r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	0c1a      	lsrs	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f002 0204 	and.w	r2, r2, #4
 8002aa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ada:	2301      	movs	r3, #1
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x26>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e18a      	b.n	8002e08 <HAL_SPI_TransmitReceive+0x33c>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002afa:	f7fe fc89 	bl	8001410 <HAL_GetTick>
 8002afe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d00f      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x70>
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b22:	d107      	bne.n	8002b34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d103      	bne.n	8002b34 <HAL_SPI_TransmitReceive+0x68>
 8002b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d003      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
 8002b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b3a:	e15b      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x82>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x82>
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b54:	e14e      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2205      	movs	r2, #5
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d007      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc6:	d178      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0x10a>
 8002bd0:	8b7b      	ldrh	r3, [r7, #26]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d166      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	1c9a      	adds	r2, r3, #2
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfa:	e053      	b.n	8002ca4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d11b      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x176>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x176>
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d113      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	1c9a      	adds	r2, r3, #2
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d119      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x1b8>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d014      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	b292      	uxth	r2, r2
 8002c66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c80:	2301      	movs	r3, #1
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c84:	f7fe fbc4 	bl	8001410 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d807      	bhi.n	8002ca4 <HAL_SPI_TransmitReceive+0x1d8>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d003      	beq.n	8002ca4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ca2:	e0a7      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1a6      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x130>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1a1      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x130>
 8002cb8:	e07c      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_SPI_TransmitReceive+0x1fc>
 8002cc2:	8b7b      	ldrh	r3, [r7, #26]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d16b      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cee:	e057      	b.n	8002da0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d11c      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x26c>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x26c>
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d114      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d119      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x2ae>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d014      	beq.n	8002d7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d76:	2301      	movs	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d7a:	f7fe fb49 	bl	8001410 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d803      	bhi.n	8002d92 <HAL_SPI_TransmitReceive+0x2c6>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d102      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x2cc>
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d9e:	e029      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1a2      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x224>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d19d      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f8b1 	bl	8002f20 <SPI_EndRxTxTransaction>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002dd0:	e010      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	e000      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3730      	adds	r7, #48	; 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e20:	f7fe faf6 	bl	8001410 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e30:	f7fe faee 	bl	8001410 <HAL_GetTick>
 8002e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	015b      	lsls	r3, r3, #5
 8002e3c:	0d1b      	lsrs	r3, r3, #20
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e46:	e054      	b.n	8002ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d050      	beq.n	8002ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e50:	f7fe fade 	bl	8001410 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d902      	bls.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d13d      	bne.n	8002ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7e:	d111      	bne.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e88:	d004      	beq.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d107      	bne.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d10f      	bne.n	8002ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e017      	b.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d19b      	bne.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000000 	.word	0x20000000

08002f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff6a 	bl	8002e10 <SPI_WaitFlagStateUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e000      	b.n	8002f54 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e03f      	b.n	8002fee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe f85e 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fd6b 	bl	8003a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e021      	b.n	800304c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fe f941 	bl	80012a8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	d153      	bne.n	8003116 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_UART_Transmit_DMA+0x26>
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e04c      	b.n	8003118 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_UART_Transmit_DMA+0x38>
 8003088:	2302      	movs	r3, #2
 800308a:	e045      	b.n	8003118 <HAL_UART_Transmit_DMA+0xc4>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2221      	movs	r2, #33	; 0x21
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_UART_Transmit_DMA+0xcc>)
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_UART_Transmit_DMA+0xd0>)
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_UART_Transmit_DMA+0xd4>)
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3304      	adds	r3, #4
 80030e8:	461a      	mov	r2, r3
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	f7fe fbb4 	bl	8001858 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003110:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	0800351b 	.word	0x0800351b
 8003124:	0800356d 	.word	0x0800356d
 8003128:	08003655 	.word	0x08003655

0800312c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	d11d      	bne.n	8003182 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_UART_Receive_DMA+0x26>
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e016      	b.n	8003184 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_UART_Receive_DMA+0x38>
 8003160:	2302      	movs	r3, #2
 8003162:	e00f      	b.n	8003184 <HAL_UART_Receive_DMA+0x58>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	461a      	mov	r2, r3
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fab5 	bl	80036e8 <UART_Start_Receive_DMA>
 800317e:	4603      	mov	r3, r0
 8003180:	e000      	b.n	8003184 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_UART_IRQHandler+0x52>
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fba6 	bl	8003928 <UART_Receive_IT>
      return;
 80031dc:	e17b      	b.n	80034d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80b1 	beq.w	8003348 <HAL_UART_IRQHandler+0x1bc>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_UART_IRQHandler+0x70>
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80a6 	beq.w	8003348 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_UART_IRQHandler+0x90>
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_UART_IRQHandler+0xb0>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0202 	orr.w	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_UART_IRQHandler+0xd0>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00f      	beq.n	8003286 <HAL_UART_IRQHandler+0xfa>
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <HAL_UART_IRQHandler+0xee>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 811e 	beq.w	80034cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_UART_IRQHandler+0x11e>
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fb3f 	bl	8003928 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_UART_IRQHandler+0x146>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d031      	beq.n	8003336 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa81 	bl	80037da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d023      	beq.n	800332e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d013      	beq.n	8003326 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	4a76      	ldr	r2, [pc, #472]	; (80034dc <HAL_UART_IRQHandler+0x350>)
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fb3e 	bl	800198c <HAL_DMA_Abort_IT>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d016      	beq.n	8003344 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003320:	4610      	mov	r0, r2
 8003322:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e00e      	b.n	8003344 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fe70 	bl	800100c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	e00a      	b.n	8003344 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fe6c 	bl	800100c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	e006      	b.n	8003344 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fe68 	bl	800100c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003342:	e0c3      	b.n	80034cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	bf00      	nop
    return;
 8003346:	e0c1      	b.n	80034cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 80a1 	bne.w	8003494 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 809b 	beq.w	8003494 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8095 	beq.w	8003494 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04e      	beq.n	800342c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003398:	8a3b      	ldrh	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8098 	beq.w	80034d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033a4:	8a3a      	ldrh	r2, [r7, #16]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	f080 8092 	bcs.w	80034d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8a3a      	ldrh	r2, [r7, #16]
 80033b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d02b      	beq.n	8003414 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0210 	bic.w	r2, r2, #16
 8003408:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fa81 	bl	8001916 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341c:	b29b      	uxth	r3, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	b29b      	uxth	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f86d 	bl	8003504 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800342a:	e051      	b.n	80034d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003434:	b29b      	uxth	r3, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d047      	beq.n	80034d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003444:	8a7b      	ldrh	r3, [r7, #18]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d044      	beq.n	80034d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003458:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0210 	bic.w	r2, r2, #16
 8003486:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003488:	8a7b      	ldrh	r3, [r7, #18]
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f839 	bl	8003504 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003492:	e01f      	b.n	80034d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_UART_IRQHandler+0x324>
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9d6 	bl	800385a <UART_Transmit_IT>
    return;
 80034ae:	e012      	b.n	80034d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00d      	beq.n	80034d6 <HAL_UART_IRQHandler+0x34a>
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa17 	bl	80038f8 <UART_EndTransmit_IT>
    return;
 80034ca:	e004      	b.n	80034d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80034cc:	bf00      	nop
 80034ce:	e002      	b.n	80034d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80034d4:	bf00      	nop
  }
}
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	08003833 	.word	0x08003833

080034e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d113      	bne.n	800355e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800354a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800355c:	e002      	b.n	8003564 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7fd fd66 	bl	8001030 <HAL_UART_TxCpltCallback>
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7ff ffb0 	bl	80034e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d12a      	bne.n	80035fa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0210 	bic.w	r2, r2, #16
 80035f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d106      	bne.n	8003610 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003606:	4619      	mov	r1, r3
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff ff7b 	bl	8003504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800360e:	e002      	b.n	8003616 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7fd fd04 	bl	800101e <HAL_UART_RxCpltCallback>
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	b29b      	uxth	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff ff60 	bl	8003504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003644:	e002      	b.n	800364c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff ff53 	bl	80034f2 <HAL_UART_RxHalfCpltCallback>
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b21      	cmp	r3, #33	; 0x21
 8003686:	d108      	bne.n	800369a <UART_DMAError+0x46>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003694:	68b8      	ldr	r0, [r7, #8]
 8003696:	f000 f88b 	bl	80037b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b22      	cmp	r3, #34	; 0x22
 80036ba:	d108      	bne.n	80036ce <UART_DMAError+0x7a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80036c8:	68b8      	ldr	r0, [r7, #8]
 80036ca:	f000 f886 	bl	80037da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	f7fd fc96 	bl	800100c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2222      	movs	r2, #34	; 0x22
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <UART_Start_Receive_DMA+0xbc>)
 8003716:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <UART_Start_Receive_DMA+0xc0>)
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <UART_Start_Receive_DMA+0xc4>)
 8003726:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	2200      	movs	r2, #0
 800372e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003730:	f107 0308 	add.w	r3, r7, #8
 8003734:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	f7fe f886 	bl	8001858 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003778:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003798:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	08003589 	.word	0x08003589
 80037a8:	0800361f 	.word	0x0800361f
 80037ac:	08003655 	.word	0x08003655

080037b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80037c6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0210 	bic.w	r2, r2, #16
 8003818:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7fd fbdd 	bl	800100c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b21      	cmp	r3, #33	; 0x21
 800386c:	d13e      	bne.n	80038ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003876:	d114      	bne.n	80038a2 <UART_Transmit_IT+0x48>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d110      	bne.n	80038a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	621a      	str	r2, [r3, #32]
 80038a0:	e008      	b.n	80038b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6211      	str	r1, [r2, #32]
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4619      	mov	r1, r3
 80038c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10f      	bne.n	80038e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fd fb89 	bl	8001030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b22      	cmp	r3, #34	; 0x22
 800393a:	f040 8099 	bne.w	8003a70 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d117      	bne.n	8003978 <UART_Receive_IT+0x50>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d113      	bne.n	8003978 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	b29b      	uxth	r3, r3
 8003962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003966:	b29a      	uxth	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
 8003976:	e026      	b.n	80039c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	d007      	beq.n	800399c <UART_Receive_IT+0x74>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <UART_Receive_IT+0x82>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e008      	b.n	80039bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4619      	mov	r1, r3
 80039d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d148      	bne.n	8003a6c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0220 	bic.w	r2, r2, #32
 80039e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d123      	bne.n	8003a62 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0210 	bic.w	r2, r2, #16
 8003a2e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d10a      	bne.n	8003a54 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fd52 	bl	8003504 <HAL_UARTEx_RxEventCallback>
 8003a60:	e002      	b.n	8003a68 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd fadb 	bl	800101e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e002      	b.n	8003a72 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ab6:	f023 030c 	bic.w	r3, r3, #12
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <UART_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d103      	bne.n	8003aec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe ff3c 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe ff24 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8003af0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	009a      	lsls	r2, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <UART_SetConfig+0x118>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	0119      	lsls	r1, r3, #4
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <UART_SetConfig+0x118>)
 8003b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2064      	movs	r0, #100	; 0x64
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	3332      	adds	r3, #50	; 0x32
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <UART_SetConfig+0x118>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b48:	4419      	add	r1, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <UART_SetConfig+0x118>)
 8003b62:	fba3 0302 	umull	r0, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2064      	movs	r0, #100	; 0x64
 8003b6a:	fb00 f303 	mul.w	r3, r0, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	3332      	adds	r3, #50	; 0x32
 8003b74:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <UART_SetConfig+0x118>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	440a      	add	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40013800 	.word	0x40013800
 8003b94:	51eb851f 	.word	0x51eb851f

08003b98 <main>:
#include "main.h"



int main(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	hwInit();
 8003b9c:	f7fd fbce 	bl	800133c <hwInit>
	apInit();
 8003ba0:	f7fc fad4 	bl	800014c <apInit>

//	apBoardTest();
//	apUartTest();
//	apGpioTest();
//  apDFPlayerTest();
	apNRF24L01RxTest();
 8003ba4:	f7fc fae0 	bl	8000168 <apNRF24L01RxTest>
//	apNRF24L01TxTest();

    return 0;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <__errno>:
 8003bb0:	4b01      	ldr	r3, [pc, #4]	; (8003bb8 <__errno+0x8>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000020 	.word	0x20000020

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	4d0c      	ldr	r5, [pc, #48]	; (8003bf4 <__libc_init_array+0x38>)
 8003bc2:	4c0d      	ldr	r4, [pc, #52]	; (8003bf8 <__libc_init_array+0x3c>)
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	f000 fc76 	bl	80044bc <_init>
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	4d0a      	ldr	r5, [pc, #40]	; (8003bfc <__libc_init_array+0x40>)
 8003bd4:	4c0a      	ldr	r4, [pc, #40]	; (8003c00 <__libc_init_array+0x44>)
 8003bd6:	1b64      	subs	r4, r4, r5
 8003bd8:	10a4      	asrs	r4, r4, #2
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	0800479c 	.word	0x0800479c
 8003bf8:	0800479c 	.word	0x0800479c
 8003bfc:	0800479c 	.word	0x0800479c
 8003c00:	080047a0 	.word	0x080047a0

08003c04 <memset>:
 8003c04:	4603      	mov	r3, r0
 8003c06:	4402      	add	r2, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <_vsniprintf_r>:
 8003c14:	b530      	push	{r4, r5, lr}
 8003c16:	1e14      	subs	r4, r2, #0
 8003c18:	4605      	mov	r5, r0
 8003c1a:	b09b      	sub	sp, #108	; 0x6c
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	da05      	bge.n	8003c2c <_vsniprintf_r+0x18>
 8003c20:	238b      	movs	r3, #139	; 0x8b
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	b01b      	add	sp, #108	; 0x6c
 8003c2a:	bd30      	pop	{r4, r5, pc}
 8003c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c30:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003c34:	bf0c      	ite	eq
 8003c36:	4623      	moveq	r3, r4
 8003c38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003c3c:	9302      	str	r3, [sp, #8]
 8003c3e:	9305      	str	r3, [sp, #20]
 8003c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c44:	4602      	mov	r2, r0
 8003c46:	9100      	str	r1, [sp, #0]
 8003c48:	9104      	str	r1, [sp, #16]
 8003c4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003c4e:	4669      	mov	r1, sp
 8003c50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c52:	4628      	mov	r0, r5
 8003c54:	f000 f874 	bl	8003d40 <_svfiprintf_r>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	bfbc      	itt	lt
 8003c5c:	238b      	movlt	r3, #139	; 0x8b
 8003c5e:	602b      	strlt	r3, [r5, #0]
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	d0e1      	beq.n	8003c28 <_vsniprintf_r+0x14>
 8003c64:	2200      	movs	r2, #0
 8003c66:	9b00      	ldr	r3, [sp, #0]
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e7dd      	b.n	8003c28 <_vsniprintf_r+0x14>

08003c6c <vsniprintf>:
 8003c6c:	b507      	push	{r0, r1, r2, lr}
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	460a      	mov	r2, r1
 8003c74:	4601      	mov	r1, r0
 8003c76:	4803      	ldr	r0, [pc, #12]	; (8003c84 <vsniprintf+0x18>)
 8003c78:	6800      	ldr	r0, [r0, #0]
 8003c7a:	f7ff ffcb 	bl	8003c14 <_vsniprintf_r>
 8003c7e:	b003      	add	sp, #12
 8003c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c84:	20000020 	.word	0x20000020

08003c88 <__ssputs_r>:
 8003c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	688e      	ldr	r6, [r1, #8]
 8003c8e:	4682      	mov	sl, r0
 8003c90:	429e      	cmp	r6, r3
 8003c92:	460c      	mov	r4, r1
 8003c94:	4690      	mov	r8, r2
 8003c96:	461f      	mov	r7, r3
 8003c98:	d838      	bhi.n	8003d0c <__ssputs_r+0x84>
 8003c9a:	898a      	ldrh	r2, [r1, #12]
 8003c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ca0:	d032      	beq.n	8003d08 <__ssputs_r+0x80>
 8003ca2:	6825      	ldr	r5, [r4, #0]
 8003ca4:	6909      	ldr	r1, [r1, #16]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	eba5 0901 	sub.w	r9, r5, r1
 8003cac:	6965      	ldr	r5, [r4, #20]
 8003cae:	444b      	add	r3, r9
 8003cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cb8:	106d      	asrs	r5, r5, #1
 8003cba:	429d      	cmp	r5, r3
 8003cbc:	bf38      	it	cc
 8003cbe:	461d      	movcc	r5, r3
 8003cc0:	0553      	lsls	r3, r2, #21
 8003cc2:	d531      	bpl.n	8003d28 <__ssputs_r+0xa0>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f000 fb53 	bl	8004370 <_malloc_r>
 8003cca:	4606      	mov	r6, r0
 8003ccc:	b950      	cbnz	r0, 8003ce4 <__ssputs_r+0x5c>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	f8ca 3000 	str.w	r3, [sl]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce4:	464a      	mov	r2, r9
 8003ce6:	6921      	ldr	r1, [r4, #16]
 8003ce8:	f000 face 	bl	8004288 <memcpy>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	6126      	str	r6, [r4, #16]
 8003cfa:	444e      	add	r6, r9
 8003cfc:	6026      	str	r6, [r4, #0]
 8003cfe:	463e      	mov	r6, r7
 8003d00:	6165      	str	r5, [r4, #20]
 8003d02:	eba5 0509 	sub.w	r5, r5, r9
 8003d06:	60a5      	str	r5, [r4, #8]
 8003d08:	42be      	cmp	r6, r7
 8003d0a:	d900      	bls.n	8003d0e <__ssputs_r+0x86>
 8003d0c:	463e      	mov	r6, r7
 8003d0e:	4632      	mov	r2, r6
 8003d10:	4641      	mov	r1, r8
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	f000 fac6 	bl	80042a4 <memmove>
 8003d18:	68a3      	ldr	r3, [r4, #8]
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	1b9b      	subs	r3, r3, r6
 8003d1e:	4432      	add	r2, r6
 8003d20:	2000      	movs	r0, #0
 8003d22:	60a3      	str	r3, [r4, #8]
 8003d24:	6022      	str	r2, [r4, #0]
 8003d26:	e7db      	b.n	8003ce0 <__ssputs_r+0x58>
 8003d28:	462a      	mov	r2, r5
 8003d2a:	f000 fb7b 	bl	8004424 <_realloc_r>
 8003d2e:	4606      	mov	r6, r0
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d1e1      	bne.n	8003cf8 <__ssputs_r+0x70>
 8003d34:	4650      	mov	r0, sl
 8003d36:	6921      	ldr	r1, [r4, #16]
 8003d38:	f000 face 	bl	80042d8 <_free_r>
 8003d3c:	e7c7      	b.n	8003cce <__ssputs_r+0x46>
	...

08003d40 <_svfiprintf_r>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	4698      	mov	r8, r3
 8003d46:	898b      	ldrh	r3, [r1, #12]
 8003d48:	4607      	mov	r7, r0
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	460d      	mov	r5, r1
 8003d4e:	4614      	mov	r4, r2
 8003d50:	b09d      	sub	sp, #116	; 0x74
 8003d52:	d50e      	bpl.n	8003d72 <_svfiprintf_r+0x32>
 8003d54:	690b      	ldr	r3, [r1, #16]
 8003d56:	b963      	cbnz	r3, 8003d72 <_svfiprintf_r+0x32>
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	f000 fb09 	bl	8004370 <_malloc_r>
 8003d5e:	6028      	str	r0, [r5, #0]
 8003d60:	6128      	str	r0, [r5, #16]
 8003d62:	b920      	cbnz	r0, 8003d6e <_svfiprintf_r+0x2e>
 8003d64:	230c      	movs	r3, #12
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	e0d1      	b.n	8003f12 <_svfiprintf_r+0x1d2>
 8003d6e:	2340      	movs	r3, #64	; 0x40
 8003d70:	616b      	str	r3, [r5, #20]
 8003d72:	2300      	movs	r3, #0
 8003d74:	9309      	str	r3, [sp, #36]	; 0x24
 8003d76:	2320      	movs	r3, #32
 8003d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d7c:	2330      	movs	r3, #48	; 0x30
 8003d7e:	f04f 0901 	mov.w	r9, #1
 8003d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f2c <_svfiprintf_r+0x1ec>
 8003d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d8e:	4623      	mov	r3, r4
 8003d90:	469a      	mov	sl, r3
 8003d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d96:	b10a      	cbz	r2, 8003d9c <_svfiprintf_r+0x5c>
 8003d98:	2a25      	cmp	r2, #37	; 0x25
 8003d9a:	d1f9      	bne.n	8003d90 <_svfiprintf_r+0x50>
 8003d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003da0:	d00b      	beq.n	8003dba <_svfiprintf_r+0x7a>
 8003da2:	465b      	mov	r3, fp
 8003da4:	4622      	mov	r2, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	4638      	mov	r0, r7
 8003daa:	f7ff ff6d 	bl	8003c88 <__ssputs_r>
 8003dae:	3001      	adds	r0, #1
 8003db0:	f000 80aa 	beq.w	8003f08 <_svfiprintf_r+0x1c8>
 8003db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003db6:	445a      	add	r2, fp
 8003db8:	9209      	str	r2, [sp, #36]	; 0x24
 8003dba:	f89a 3000 	ldrb.w	r3, [sl]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80a2 	beq.w	8003f08 <_svfiprintf_r+0x1c8>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dce:	f10a 0a01 	add.w	sl, sl, #1
 8003dd2:	9304      	str	r3, [sp, #16]
 8003dd4:	9307      	str	r3, [sp, #28]
 8003dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dda:	931a      	str	r3, [sp, #104]	; 0x68
 8003ddc:	4654      	mov	r4, sl
 8003dde:	2205      	movs	r2, #5
 8003de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de4:	4851      	ldr	r0, [pc, #324]	; (8003f2c <_svfiprintf_r+0x1ec>)
 8003de6:	f000 fa41 	bl	800426c <memchr>
 8003dea:	9a04      	ldr	r2, [sp, #16]
 8003dec:	b9d8      	cbnz	r0, 8003e26 <_svfiprintf_r+0xe6>
 8003dee:	06d0      	lsls	r0, r2, #27
 8003df0:	bf44      	itt	mi
 8003df2:	2320      	movmi	r3, #32
 8003df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003df8:	0711      	lsls	r1, r2, #28
 8003dfa:	bf44      	itt	mi
 8003dfc:	232b      	movmi	r3, #43	; 0x2b
 8003dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e02:	f89a 3000 	ldrb.w	r3, [sl]
 8003e06:	2b2a      	cmp	r3, #42	; 0x2a
 8003e08:	d015      	beq.n	8003e36 <_svfiprintf_r+0xf6>
 8003e0a:	4654      	mov	r4, sl
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f04f 0c0a 	mov.w	ip, #10
 8003e12:	9a07      	ldr	r2, [sp, #28]
 8003e14:	4621      	mov	r1, r4
 8003e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e1a:	3b30      	subs	r3, #48	; 0x30
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	d94e      	bls.n	8003ebe <_svfiprintf_r+0x17e>
 8003e20:	b1b0      	cbz	r0, 8003e50 <_svfiprintf_r+0x110>
 8003e22:	9207      	str	r2, [sp, #28]
 8003e24:	e014      	b.n	8003e50 <_svfiprintf_r+0x110>
 8003e26:	eba0 0308 	sub.w	r3, r0, r8
 8003e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	46a2      	mov	sl, r4
 8003e32:	9304      	str	r3, [sp, #16]
 8003e34:	e7d2      	b.n	8003ddc <_svfiprintf_r+0x9c>
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	9103      	str	r1, [sp, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfbb      	ittet	lt
 8003e42:	425b      	neglt	r3, r3
 8003e44:	f042 0202 	orrlt.w	r2, r2, #2
 8003e48:	9307      	strge	r3, [sp, #28]
 8003e4a:	9307      	strlt	r3, [sp, #28]
 8003e4c:	bfb8      	it	lt
 8003e4e:	9204      	strlt	r2, [sp, #16]
 8003e50:	7823      	ldrb	r3, [r4, #0]
 8003e52:	2b2e      	cmp	r3, #46	; 0x2e
 8003e54:	d10c      	bne.n	8003e70 <_svfiprintf_r+0x130>
 8003e56:	7863      	ldrb	r3, [r4, #1]
 8003e58:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5a:	d135      	bne.n	8003ec8 <_svfiprintf_r+0x188>
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	3402      	adds	r4, #2
 8003e60:	1d1a      	adds	r2, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	9203      	str	r2, [sp, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e6e:	9305      	str	r3, [sp, #20]
 8003e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f3c <_svfiprintf_r+0x1fc>
 8003e74:	2203      	movs	r2, #3
 8003e76:	4650      	mov	r0, sl
 8003e78:	7821      	ldrb	r1, [r4, #0]
 8003e7a:	f000 f9f7 	bl	800426c <memchr>
 8003e7e:	b140      	cbz	r0, 8003e92 <_svfiprintf_r+0x152>
 8003e80:	2340      	movs	r3, #64	; 0x40
 8003e82:	eba0 000a 	sub.w	r0, r0, sl
 8003e86:	fa03 f000 	lsl.w	r0, r3, r0
 8003e8a:	9b04      	ldr	r3, [sp, #16]
 8003e8c:	3401      	adds	r4, #1
 8003e8e:	4303      	orrs	r3, r0
 8003e90:	9304      	str	r3, [sp, #16]
 8003e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e96:	2206      	movs	r2, #6
 8003e98:	4825      	ldr	r0, [pc, #148]	; (8003f30 <_svfiprintf_r+0x1f0>)
 8003e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e9e:	f000 f9e5 	bl	800426c <memchr>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d038      	beq.n	8003f18 <_svfiprintf_r+0x1d8>
 8003ea6:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <_svfiprintf_r+0x1f4>)
 8003ea8:	bb1b      	cbnz	r3, 8003ef2 <_svfiprintf_r+0x1b2>
 8003eaa:	9b03      	ldr	r3, [sp, #12]
 8003eac:	3307      	adds	r3, #7
 8003eae:	f023 0307 	bic.w	r3, r3, #7
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	9303      	str	r3, [sp, #12]
 8003eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb8:	4433      	add	r3, r6
 8003eba:	9309      	str	r3, [sp, #36]	; 0x24
 8003ebc:	e767      	b.n	8003d8e <_svfiprintf_r+0x4e>
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec6:	e7a5      	b.n	8003e14 <_svfiprintf_r+0xd4>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f04f 0c0a 	mov.w	ip, #10
 8003ece:	4619      	mov	r1, r3
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	9305      	str	r3, [sp, #20]
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eda:	3a30      	subs	r2, #48	; 0x30
 8003edc:	2a09      	cmp	r2, #9
 8003ede:	d903      	bls.n	8003ee8 <_svfiprintf_r+0x1a8>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0c5      	beq.n	8003e70 <_svfiprintf_r+0x130>
 8003ee4:	9105      	str	r1, [sp, #20]
 8003ee6:	e7c3      	b.n	8003e70 <_svfiprintf_r+0x130>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	2301      	movs	r3, #1
 8003eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef0:	e7f0      	b.n	8003ed4 <_svfiprintf_r+0x194>
 8003ef2:	ab03      	add	r3, sp, #12
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4638      	mov	r0, r7
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <_svfiprintf_r+0x1f8>)
 8003efc:	a904      	add	r1, sp, #16
 8003efe:	f3af 8000 	nop.w
 8003f02:	1c42      	adds	r2, r0, #1
 8003f04:	4606      	mov	r6, r0
 8003f06:	d1d6      	bne.n	8003eb6 <_svfiprintf_r+0x176>
 8003f08:	89ab      	ldrh	r3, [r5, #12]
 8003f0a:	065b      	lsls	r3, r3, #25
 8003f0c:	f53f af2c 	bmi.w	8003d68 <_svfiprintf_r+0x28>
 8003f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f12:	b01d      	add	sp, #116	; 0x74
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f18:	ab03      	add	r3, sp, #12
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	462a      	mov	r2, r5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <_svfiprintf_r+0x1f8>)
 8003f22:	a904      	add	r1, sp, #16
 8003f24:	f000 f87c 	bl	8004020 <_printf_i>
 8003f28:	e7eb      	b.n	8003f02 <_svfiprintf_r+0x1c2>
 8003f2a:	bf00      	nop
 8003f2c:	08004769 	.word	0x08004769
 8003f30:	08004773 	.word	0x08004773
 8003f34:	00000000 	.word	0x00000000
 8003f38:	08003c89 	.word	0x08003c89
 8003f3c:	0800476f 	.word	0x0800476f

08003f40 <_printf_common>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	4616      	mov	r6, r2
 8003f46:	4699      	mov	r9, r3
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	bfb8      	it	lt
 8003f52:	4613      	movlt	r3, r2
 8003f54:	6033      	str	r3, [r6, #0]
 8003f56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f60:	b10a      	cbz	r2, 8003f66 <_printf_common+0x26>
 8003f62:	3301      	adds	r3, #1
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	0699      	lsls	r1, r3, #26
 8003f6a:	bf42      	ittt	mi
 8003f6c:	6833      	ldrmi	r3, [r6, #0]
 8003f6e:	3302      	addmi	r3, #2
 8003f70:	6033      	strmi	r3, [r6, #0]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d106      	bne.n	8003f88 <_printf_common+0x48>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	6832      	ldr	r2, [r6, #0]
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	42ab      	cmp	r3, r5
 8003f86:	dc28      	bgt.n	8003fda <_printf_common+0x9a>
 8003f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f8c:	1e13      	subs	r3, r2, #0
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	bf18      	it	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	0692      	lsls	r2, r2, #26
 8003f96:	d42d      	bmi.n	8003ff4 <_printf_common+0xb4>
 8003f98:	4649      	mov	r1, r9
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa0:	47c0      	blx	r8
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d020      	beq.n	8003fe8 <_printf_common+0xa8>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	68e5      	ldr	r5, [r4, #12]
 8003faa:	f003 0306 	and.w	r3, r3, #6
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf18      	it	ne
 8003fb2:	2500      	movne	r5, #0
 8003fb4:	6832      	ldr	r2, [r6, #0]
 8003fb6:	f04f 0600 	mov.w	r6, #0
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	bf08      	it	eq
 8003fbe:	1aad      	subeq	r5, r5, r2
 8003fc0:	6922      	ldr	r2, [r4, #16]
 8003fc2:	bf08      	it	eq
 8003fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	bfc4      	itt	gt
 8003fcc:	1a9b      	subgt	r3, r3, r2
 8003fce:	18ed      	addgt	r5, r5, r3
 8003fd0:	341a      	adds	r4, #26
 8003fd2:	42b5      	cmp	r5, r6
 8003fd4:	d11a      	bne.n	800400c <_printf_common+0xcc>
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e008      	b.n	8003fec <_printf_common+0xac>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4652      	mov	r2, sl
 8003fde:	4649      	mov	r1, r9
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	47c0      	blx	r8
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d103      	bne.n	8003ff0 <_printf_common+0xb0>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	e7c4      	b.n	8003f7e <_printf_common+0x3e>
 8003ff4:	2030      	movs	r0, #48	; 0x30
 8003ff6:	18e1      	adds	r1, r4, r3
 8003ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004002:	4422      	add	r2, r4
 8004004:	3302      	adds	r3, #2
 8004006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800400a:	e7c5      	b.n	8003f98 <_printf_common+0x58>
 800400c:	2301      	movs	r3, #1
 800400e:	4622      	mov	r2, r4
 8004010:	4649      	mov	r1, r9
 8004012:	4638      	mov	r0, r7
 8004014:	47c0      	blx	r8
 8004016:	3001      	adds	r0, #1
 8004018:	d0e6      	beq.n	8003fe8 <_printf_common+0xa8>
 800401a:	3601      	adds	r6, #1
 800401c:	e7d9      	b.n	8003fd2 <_printf_common+0x92>
	...

08004020 <_printf_i>:
 8004020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	460c      	mov	r4, r1
 8004026:	7e27      	ldrb	r7, [r4, #24]
 8004028:	4691      	mov	r9, r2
 800402a:	2f78      	cmp	r7, #120	; 0x78
 800402c:	4680      	mov	r8, r0
 800402e:	469a      	mov	sl, r3
 8004030:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004036:	d807      	bhi.n	8004048 <_printf_i+0x28>
 8004038:	2f62      	cmp	r7, #98	; 0x62
 800403a:	d80a      	bhi.n	8004052 <_printf_i+0x32>
 800403c:	2f00      	cmp	r7, #0
 800403e:	f000 80d9 	beq.w	80041f4 <_printf_i+0x1d4>
 8004042:	2f58      	cmp	r7, #88	; 0x58
 8004044:	f000 80a4 	beq.w	8004190 <_printf_i+0x170>
 8004048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800404c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004050:	e03a      	b.n	80040c8 <_printf_i+0xa8>
 8004052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004056:	2b15      	cmp	r3, #21
 8004058:	d8f6      	bhi.n	8004048 <_printf_i+0x28>
 800405a:	a001      	add	r0, pc, #4	; (adr r0, 8004060 <_printf_i+0x40>)
 800405c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040cd 	.word	0x080040cd
 8004068:	08004049 	.word	0x08004049
 800406c:	08004049 	.word	0x08004049
 8004070:	08004049 	.word	0x08004049
 8004074:	08004049 	.word	0x08004049
 8004078:	080040cd 	.word	0x080040cd
 800407c:	08004049 	.word	0x08004049
 8004080:	08004049 	.word	0x08004049
 8004084:	08004049 	.word	0x08004049
 8004088:	08004049 	.word	0x08004049
 800408c:	080041db 	.word	0x080041db
 8004090:	080040fd 	.word	0x080040fd
 8004094:	080041bd 	.word	0x080041bd
 8004098:	08004049 	.word	0x08004049
 800409c:	08004049 	.word	0x08004049
 80040a0:	080041fd 	.word	0x080041fd
 80040a4:	08004049 	.word	0x08004049
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	08004049 	.word	0x08004049
 80040b0:	08004049 	.word	0x08004049
 80040b4:	080041c5 	.word	0x080041c5
 80040b8:	680b      	ldr	r3, [r1, #0]
 80040ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	600a      	str	r2, [r1, #0]
 80040c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a4      	b.n	8004216 <_printf_i+0x1f6>
 80040cc:	6825      	ldr	r5, [r4, #0]
 80040ce:	6808      	ldr	r0, [r1, #0]
 80040d0:	062e      	lsls	r6, r5, #24
 80040d2:	f100 0304 	add.w	r3, r0, #4
 80040d6:	d50a      	bpl.n	80040ee <_printf_i+0xce>
 80040d8:	6805      	ldr	r5, [r0, #0]
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	2d00      	cmp	r5, #0
 80040de:	da03      	bge.n	80040e8 <_printf_i+0xc8>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	426d      	negs	r5, r5
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	230a      	movs	r3, #10
 80040ea:	485e      	ldr	r0, [pc, #376]	; (8004264 <_printf_i+0x244>)
 80040ec:	e019      	b.n	8004122 <_printf_i+0x102>
 80040ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040f2:	6805      	ldr	r5, [r0, #0]
 80040f4:	600b      	str	r3, [r1, #0]
 80040f6:	bf18      	it	ne
 80040f8:	b22d      	sxthne	r5, r5
 80040fa:	e7ef      	b.n	80040dc <_printf_i+0xbc>
 80040fc:	680b      	ldr	r3, [r1, #0]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	1d18      	adds	r0, r3, #4
 8004102:	6008      	str	r0, [r1, #0]
 8004104:	0628      	lsls	r0, r5, #24
 8004106:	d501      	bpl.n	800410c <_printf_i+0xec>
 8004108:	681d      	ldr	r5, [r3, #0]
 800410a:	e002      	b.n	8004112 <_printf_i+0xf2>
 800410c:	0669      	lsls	r1, r5, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0xe8>
 8004110:	881d      	ldrh	r5, [r3, #0]
 8004112:	2f6f      	cmp	r7, #111	; 0x6f
 8004114:	bf0c      	ite	eq
 8004116:	2308      	moveq	r3, #8
 8004118:	230a      	movne	r3, #10
 800411a:	4852      	ldr	r0, [pc, #328]	; (8004264 <_printf_i+0x244>)
 800411c:	2100      	movs	r1, #0
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004122:	6866      	ldr	r6, [r4, #4]
 8004124:	2e00      	cmp	r6, #0
 8004126:	bfa8      	it	ge
 8004128:	6821      	ldrge	r1, [r4, #0]
 800412a:	60a6      	str	r6, [r4, #8]
 800412c:	bfa4      	itt	ge
 800412e:	f021 0104 	bicge.w	r1, r1, #4
 8004132:	6021      	strge	r1, [r4, #0]
 8004134:	b90d      	cbnz	r5, 800413a <_printf_i+0x11a>
 8004136:	2e00      	cmp	r6, #0
 8004138:	d04d      	beq.n	80041d6 <_printf_i+0x1b6>
 800413a:	4616      	mov	r6, r2
 800413c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004140:	fb03 5711 	mls	r7, r3, r1, r5
 8004144:	5dc7      	ldrb	r7, [r0, r7]
 8004146:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800414a:	462f      	mov	r7, r5
 800414c:	42bb      	cmp	r3, r7
 800414e:	460d      	mov	r5, r1
 8004150:	d9f4      	bls.n	800413c <_printf_i+0x11c>
 8004152:	2b08      	cmp	r3, #8
 8004154:	d10b      	bne.n	800416e <_printf_i+0x14e>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	07df      	lsls	r7, r3, #31
 800415a:	d508      	bpl.n	800416e <_printf_i+0x14e>
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	6861      	ldr	r1, [r4, #4]
 8004160:	4299      	cmp	r1, r3
 8004162:	bfde      	ittt	le
 8004164:	2330      	movle	r3, #48	; 0x30
 8004166:	f806 3c01 	strble.w	r3, [r6, #-1]
 800416a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800416e:	1b92      	subs	r2, r2, r6
 8004170:	6122      	str	r2, [r4, #16]
 8004172:	464b      	mov	r3, r9
 8004174:	4621      	mov	r1, r4
 8004176:	4640      	mov	r0, r8
 8004178:	f8cd a000 	str.w	sl, [sp]
 800417c:	aa03      	add	r2, sp, #12
 800417e:	f7ff fedf 	bl	8003f40 <_printf_common>
 8004182:	3001      	adds	r0, #1
 8004184:	d14c      	bne.n	8004220 <_printf_i+0x200>
 8004186:	f04f 30ff 	mov.w	r0, #4294967295
 800418a:	b004      	add	sp, #16
 800418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004190:	4834      	ldr	r0, [pc, #208]	; (8004264 <_printf_i+0x244>)
 8004192:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004196:	680e      	ldr	r6, [r1, #0]
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	f856 5b04 	ldr.w	r5, [r6], #4
 800419e:	061f      	lsls	r7, r3, #24
 80041a0:	600e      	str	r6, [r1, #0]
 80041a2:	d514      	bpl.n	80041ce <_printf_i+0x1ae>
 80041a4:	07d9      	lsls	r1, r3, #31
 80041a6:	bf44      	itt	mi
 80041a8:	f043 0320 	orrmi.w	r3, r3, #32
 80041ac:	6023      	strmi	r3, [r4, #0]
 80041ae:	b91d      	cbnz	r5, 80041b8 <_printf_i+0x198>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	f023 0320 	bic.w	r3, r3, #32
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	2310      	movs	r3, #16
 80041ba:	e7af      	b.n	800411c <_printf_i+0xfc>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	f043 0320 	orr.w	r3, r3, #32
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	2378      	movs	r3, #120	; 0x78
 80041c6:	4828      	ldr	r0, [pc, #160]	; (8004268 <_printf_i+0x248>)
 80041c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041cc:	e7e3      	b.n	8004196 <_printf_i+0x176>
 80041ce:	065e      	lsls	r6, r3, #25
 80041d0:	bf48      	it	mi
 80041d2:	b2ad      	uxthmi	r5, r5
 80041d4:	e7e6      	b.n	80041a4 <_printf_i+0x184>
 80041d6:	4616      	mov	r6, r2
 80041d8:	e7bb      	b.n	8004152 <_printf_i+0x132>
 80041da:	680b      	ldr	r3, [r1, #0]
 80041dc:	6826      	ldr	r6, [r4, #0]
 80041de:	1d1d      	adds	r5, r3, #4
 80041e0:	6960      	ldr	r0, [r4, #20]
 80041e2:	600d      	str	r5, [r1, #0]
 80041e4:	0635      	lsls	r5, r6, #24
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	d501      	bpl.n	80041ee <_printf_i+0x1ce>
 80041ea:	6018      	str	r0, [r3, #0]
 80041ec:	e002      	b.n	80041f4 <_printf_i+0x1d4>
 80041ee:	0671      	lsls	r1, r6, #25
 80041f0:	d5fb      	bpl.n	80041ea <_printf_i+0x1ca>
 80041f2:	8018      	strh	r0, [r3, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	4616      	mov	r6, r2
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	e7ba      	b.n	8004172 <_printf_i+0x152>
 80041fc:	680b      	ldr	r3, [r1, #0]
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	600a      	str	r2, [r1, #0]
 8004202:	681e      	ldr	r6, [r3, #0]
 8004204:	2100      	movs	r1, #0
 8004206:	4630      	mov	r0, r6
 8004208:	6862      	ldr	r2, [r4, #4]
 800420a:	f000 f82f 	bl	800426c <memchr>
 800420e:	b108      	cbz	r0, 8004214 <_printf_i+0x1f4>
 8004210:	1b80      	subs	r0, r0, r6
 8004212:	6060      	str	r0, [r4, #4]
 8004214:	6863      	ldr	r3, [r4, #4]
 8004216:	6123      	str	r3, [r4, #16]
 8004218:	2300      	movs	r3, #0
 800421a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421e:	e7a8      	b.n	8004172 <_printf_i+0x152>
 8004220:	4632      	mov	r2, r6
 8004222:	4649      	mov	r1, r9
 8004224:	4640      	mov	r0, r8
 8004226:	6923      	ldr	r3, [r4, #16]
 8004228:	47d0      	blx	sl
 800422a:	3001      	adds	r0, #1
 800422c:	d0ab      	beq.n	8004186 <_printf_i+0x166>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	079b      	lsls	r3, r3, #30
 8004232:	d413      	bmi.n	800425c <_printf_i+0x23c>
 8004234:	68e0      	ldr	r0, [r4, #12]
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	4298      	cmp	r0, r3
 800423a:	bfb8      	it	lt
 800423c:	4618      	movlt	r0, r3
 800423e:	e7a4      	b.n	800418a <_printf_i+0x16a>
 8004240:	2301      	movs	r3, #1
 8004242:	4632      	mov	r2, r6
 8004244:	4649      	mov	r1, r9
 8004246:	4640      	mov	r0, r8
 8004248:	47d0      	blx	sl
 800424a:	3001      	adds	r0, #1
 800424c:	d09b      	beq.n	8004186 <_printf_i+0x166>
 800424e:	3501      	adds	r5, #1
 8004250:	68e3      	ldr	r3, [r4, #12]
 8004252:	9903      	ldr	r1, [sp, #12]
 8004254:	1a5b      	subs	r3, r3, r1
 8004256:	42ab      	cmp	r3, r5
 8004258:	dcf2      	bgt.n	8004240 <_printf_i+0x220>
 800425a:	e7eb      	b.n	8004234 <_printf_i+0x214>
 800425c:	2500      	movs	r5, #0
 800425e:	f104 0619 	add.w	r6, r4, #25
 8004262:	e7f5      	b.n	8004250 <_printf_i+0x230>
 8004264:	0800477a 	.word	0x0800477a
 8004268:	0800478b 	.word	0x0800478b

0800426c <memchr>:
 800426c:	4603      	mov	r3, r0
 800426e:	b510      	push	{r4, lr}
 8004270:	b2c9      	uxtb	r1, r1
 8004272:	4402      	add	r2, r0
 8004274:	4293      	cmp	r3, r2
 8004276:	4618      	mov	r0, r3
 8004278:	d101      	bne.n	800427e <memchr+0x12>
 800427a:	2000      	movs	r0, #0
 800427c:	e003      	b.n	8004286 <memchr+0x1a>
 800427e:	7804      	ldrb	r4, [r0, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	428c      	cmp	r4, r1
 8004284:	d1f6      	bne.n	8004274 <memchr+0x8>
 8004286:	bd10      	pop	{r4, pc}

08004288 <memcpy>:
 8004288:	440a      	add	r2, r1
 800428a:	4291      	cmp	r1, r2
 800428c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004290:	d100      	bne.n	8004294 <memcpy+0xc>
 8004292:	4770      	bx	lr
 8004294:	b510      	push	{r4, lr}
 8004296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800429a:	4291      	cmp	r1, r2
 800429c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a0:	d1f9      	bne.n	8004296 <memcpy+0xe>
 80042a2:	bd10      	pop	{r4, pc}

080042a4 <memmove>:
 80042a4:	4288      	cmp	r0, r1
 80042a6:	b510      	push	{r4, lr}
 80042a8:	eb01 0402 	add.w	r4, r1, r2
 80042ac:	d902      	bls.n	80042b4 <memmove+0x10>
 80042ae:	4284      	cmp	r4, r0
 80042b0:	4623      	mov	r3, r4
 80042b2:	d807      	bhi.n	80042c4 <memmove+0x20>
 80042b4:	1e43      	subs	r3, r0, #1
 80042b6:	42a1      	cmp	r1, r4
 80042b8:	d008      	beq.n	80042cc <memmove+0x28>
 80042ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042c2:	e7f8      	b.n	80042b6 <memmove+0x12>
 80042c4:	4601      	mov	r1, r0
 80042c6:	4402      	add	r2, r0
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d100      	bne.n	80042ce <memmove+0x2a>
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042d6:	e7f7      	b.n	80042c8 <memmove+0x24>

080042d8 <_free_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	4605      	mov	r5, r0
 80042dc:	2900      	cmp	r1, #0
 80042de:	d043      	beq.n	8004368 <_free_r+0x90>
 80042e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e4:	1f0c      	subs	r4, r1, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bfb8      	it	lt
 80042ea:	18e4      	addlt	r4, r4, r3
 80042ec:	f000 f8d0 	bl	8004490 <__malloc_lock>
 80042f0:	4a1e      	ldr	r2, [pc, #120]	; (800436c <_free_r+0x94>)
 80042f2:	6813      	ldr	r3, [r2, #0]
 80042f4:	4610      	mov	r0, r2
 80042f6:	b933      	cbnz	r3, 8004306 <_free_r+0x2e>
 80042f8:	6063      	str	r3, [r4, #4]
 80042fa:	6014      	str	r4, [r2, #0]
 80042fc:	4628      	mov	r0, r5
 80042fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004302:	f000 b8cb 	b.w	800449c <__malloc_unlock>
 8004306:	42a3      	cmp	r3, r4
 8004308:	d90a      	bls.n	8004320 <_free_r+0x48>
 800430a:	6821      	ldr	r1, [r4, #0]
 800430c:	1862      	adds	r2, r4, r1
 800430e:	4293      	cmp	r3, r2
 8004310:	bf01      	itttt	eq
 8004312:	681a      	ldreq	r2, [r3, #0]
 8004314:	685b      	ldreq	r3, [r3, #4]
 8004316:	1852      	addeq	r2, r2, r1
 8004318:	6022      	streq	r2, [r4, #0]
 800431a:	6063      	str	r3, [r4, #4]
 800431c:	6004      	str	r4, [r0, #0]
 800431e:	e7ed      	b.n	80042fc <_free_r+0x24>
 8004320:	461a      	mov	r2, r3
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	b10b      	cbz	r3, 800432a <_free_r+0x52>
 8004326:	42a3      	cmp	r3, r4
 8004328:	d9fa      	bls.n	8004320 <_free_r+0x48>
 800432a:	6811      	ldr	r1, [r2, #0]
 800432c:	1850      	adds	r0, r2, r1
 800432e:	42a0      	cmp	r0, r4
 8004330:	d10b      	bne.n	800434a <_free_r+0x72>
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	4401      	add	r1, r0
 8004336:	1850      	adds	r0, r2, r1
 8004338:	4283      	cmp	r3, r0
 800433a:	6011      	str	r1, [r2, #0]
 800433c:	d1de      	bne.n	80042fc <_free_r+0x24>
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4401      	add	r1, r0
 8004344:	6011      	str	r1, [r2, #0]
 8004346:	6053      	str	r3, [r2, #4]
 8004348:	e7d8      	b.n	80042fc <_free_r+0x24>
 800434a:	d902      	bls.n	8004352 <_free_r+0x7a>
 800434c:	230c      	movs	r3, #12
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	e7d4      	b.n	80042fc <_free_r+0x24>
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	1821      	adds	r1, r4, r0
 8004356:	428b      	cmp	r3, r1
 8004358:	bf01      	itttt	eq
 800435a:	6819      	ldreq	r1, [r3, #0]
 800435c:	685b      	ldreq	r3, [r3, #4]
 800435e:	1809      	addeq	r1, r1, r0
 8004360:	6021      	streq	r1, [r4, #0]
 8004362:	6063      	str	r3, [r4, #4]
 8004364:	6054      	str	r4, [r2, #4]
 8004366:	e7c9      	b.n	80042fc <_free_r+0x24>
 8004368:	bd38      	pop	{r3, r4, r5, pc}
 800436a:	bf00      	nop
 800436c:	200002c8 	.word	0x200002c8

08004370 <_malloc_r>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	1ccd      	adds	r5, r1, #3
 8004374:	f025 0503 	bic.w	r5, r5, #3
 8004378:	3508      	adds	r5, #8
 800437a:	2d0c      	cmp	r5, #12
 800437c:	bf38      	it	cc
 800437e:	250c      	movcc	r5, #12
 8004380:	2d00      	cmp	r5, #0
 8004382:	4606      	mov	r6, r0
 8004384:	db01      	blt.n	800438a <_malloc_r+0x1a>
 8004386:	42a9      	cmp	r1, r5
 8004388:	d903      	bls.n	8004392 <_malloc_r+0x22>
 800438a:	230c      	movs	r3, #12
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	2000      	movs	r0, #0
 8004390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004392:	f000 f87d 	bl	8004490 <__malloc_lock>
 8004396:	4921      	ldr	r1, [pc, #132]	; (800441c <_malloc_r+0xac>)
 8004398:	680a      	ldr	r2, [r1, #0]
 800439a:	4614      	mov	r4, r2
 800439c:	b99c      	cbnz	r4, 80043c6 <_malloc_r+0x56>
 800439e:	4f20      	ldr	r7, [pc, #128]	; (8004420 <_malloc_r+0xb0>)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b923      	cbnz	r3, 80043ae <_malloc_r+0x3e>
 80043a4:	4621      	mov	r1, r4
 80043a6:	4630      	mov	r0, r6
 80043a8:	f000 f862 	bl	8004470 <_sbrk_r>
 80043ac:	6038      	str	r0, [r7, #0]
 80043ae:	4629      	mov	r1, r5
 80043b0:	4630      	mov	r0, r6
 80043b2:	f000 f85d 	bl	8004470 <_sbrk_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d123      	bne.n	8004402 <_malloc_r+0x92>
 80043ba:	230c      	movs	r3, #12
 80043bc:	4630      	mov	r0, r6
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	f000 f86c 	bl	800449c <__malloc_unlock>
 80043c4:	e7e3      	b.n	800438e <_malloc_r+0x1e>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	1b5b      	subs	r3, r3, r5
 80043ca:	d417      	bmi.n	80043fc <_malloc_r+0x8c>
 80043cc:	2b0b      	cmp	r3, #11
 80043ce:	d903      	bls.n	80043d8 <_malloc_r+0x68>
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	441c      	add	r4, r3
 80043d4:	6025      	str	r5, [r4, #0]
 80043d6:	e004      	b.n	80043e2 <_malloc_r+0x72>
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	42a2      	cmp	r2, r4
 80043dc:	bf0c      	ite	eq
 80043de:	600b      	streq	r3, [r1, #0]
 80043e0:	6053      	strne	r3, [r2, #4]
 80043e2:	4630      	mov	r0, r6
 80043e4:	f000 f85a 	bl	800449c <__malloc_unlock>
 80043e8:	f104 000b 	add.w	r0, r4, #11
 80043ec:	1d23      	adds	r3, r4, #4
 80043ee:	f020 0007 	bic.w	r0, r0, #7
 80043f2:	1ac2      	subs	r2, r0, r3
 80043f4:	d0cc      	beq.n	8004390 <_malloc_r+0x20>
 80043f6:	1a1b      	subs	r3, r3, r0
 80043f8:	50a3      	str	r3, [r4, r2]
 80043fa:	e7c9      	b.n	8004390 <_malloc_r+0x20>
 80043fc:	4622      	mov	r2, r4
 80043fe:	6864      	ldr	r4, [r4, #4]
 8004400:	e7cc      	b.n	800439c <_malloc_r+0x2c>
 8004402:	1cc4      	adds	r4, r0, #3
 8004404:	f024 0403 	bic.w	r4, r4, #3
 8004408:	42a0      	cmp	r0, r4
 800440a:	d0e3      	beq.n	80043d4 <_malloc_r+0x64>
 800440c:	1a21      	subs	r1, r4, r0
 800440e:	4630      	mov	r0, r6
 8004410:	f000 f82e 	bl	8004470 <_sbrk_r>
 8004414:	3001      	adds	r0, #1
 8004416:	d1dd      	bne.n	80043d4 <_malloc_r+0x64>
 8004418:	e7cf      	b.n	80043ba <_malloc_r+0x4a>
 800441a:	bf00      	nop
 800441c:	200002c8 	.word	0x200002c8
 8004420:	200002cc 	.word	0x200002cc

08004424 <_realloc_r>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	4607      	mov	r7, r0
 8004428:	4614      	mov	r4, r2
 800442a:	460e      	mov	r6, r1
 800442c:	b921      	cbnz	r1, 8004438 <_realloc_r+0x14>
 800442e:	4611      	mov	r1, r2
 8004430:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004434:	f7ff bf9c 	b.w	8004370 <_malloc_r>
 8004438:	b922      	cbnz	r2, 8004444 <_realloc_r+0x20>
 800443a:	f7ff ff4d 	bl	80042d8 <_free_r>
 800443e:	4625      	mov	r5, r4
 8004440:	4628      	mov	r0, r5
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004444:	f000 f830 	bl	80044a8 <_malloc_usable_size_r>
 8004448:	42a0      	cmp	r0, r4
 800444a:	d20f      	bcs.n	800446c <_realloc_r+0x48>
 800444c:	4621      	mov	r1, r4
 800444e:	4638      	mov	r0, r7
 8004450:	f7ff ff8e 	bl	8004370 <_malloc_r>
 8004454:	4605      	mov	r5, r0
 8004456:	2800      	cmp	r0, #0
 8004458:	d0f2      	beq.n	8004440 <_realloc_r+0x1c>
 800445a:	4631      	mov	r1, r6
 800445c:	4622      	mov	r2, r4
 800445e:	f7ff ff13 	bl	8004288 <memcpy>
 8004462:	4631      	mov	r1, r6
 8004464:	4638      	mov	r0, r7
 8004466:	f7ff ff37 	bl	80042d8 <_free_r>
 800446a:	e7e9      	b.n	8004440 <_realloc_r+0x1c>
 800446c:	4635      	mov	r5, r6
 800446e:	e7e7      	b.n	8004440 <_realloc_r+0x1c>

08004470 <_sbrk_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	2300      	movs	r3, #0
 8004474:	4d05      	ldr	r5, [pc, #20]	; (800448c <_sbrk_r+0x1c>)
 8004476:	4604      	mov	r4, r0
 8004478:	4608      	mov	r0, r1
 800447a:	602b      	str	r3, [r5, #0]
 800447c:	f7fb ffe2 	bl	8000444 <_sbrk>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d102      	bne.n	800448a <_sbrk_r+0x1a>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	b103      	cbz	r3, 800448a <_sbrk_r+0x1a>
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	200004c4 	.word	0x200004c4

08004490 <__malloc_lock>:
 8004490:	4801      	ldr	r0, [pc, #4]	; (8004498 <__malloc_lock+0x8>)
 8004492:	f000 b811 	b.w	80044b8 <__retarget_lock_acquire_recursive>
 8004496:	bf00      	nop
 8004498:	200004cc 	.word	0x200004cc

0800449c <__malloc_unlock>:
 800449c:	4801      	ldr	r0, [pc, #4]	; (80044a4 <__malloc_unlock+0x8>)
 800449e:	f000 b80c 	b.w	80044ba <__retarget_lock_release_recursive>
 80044a2:	bf00      	nop
 80044a4:	200004cc 	.word	0x200004cc

080044a8 <_malloc_usable_size_r>:
 80044a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ac:	1f18      	subs	r0, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bfbc      	itt	lt
 80044b2:	580b      	ldrlt	r3, [r1, r0]
 80044b4:	18c0      	addlt	r0, r0, r3
 80044b6:	4770      	bx	lr

080044b8 <__retarget_lock_acquire_recursive>:
 80044b8:	4770      	bx	lr

080044ba <__retarget_lock_release_recursive>:
 80044ba:	4770      	bx	lr

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
