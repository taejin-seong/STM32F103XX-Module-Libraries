
stm32f103_fw_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  080076d0  080076d0  000176d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc4  08007dc4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007dc4  08007dc4  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dc4  08007dc4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001f0  08007fbc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08007fbc  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198f6  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039cf  00000000  00000000  00039b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  0003d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  0003e490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b80f  00000000  00000000  0003f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180c8  00000000  00000000  0005aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089722  00000000  00000000  00072bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc2e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f1c  00000000  00000000  000fc33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080076b4 	.word	0x080076b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	080076b4 	.word	0x080076b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <apInit>:




void apInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 9600); /* DFplayer와 통신하기 위한 UART 설정, Default : 9600/8/n/1/n */
 8000a8c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 ff03 	bl	800189c <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 8000a96:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fefe 	bl	800189c <uartOpen>

//	uartOpen(_DEF_UART1, 115200);
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <apCLCDTest>:



/* CLCD With I2C 4-bit 모드 테스트 */
void apCLCDTest(void)
{
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	b0b0      	sub	sp, #192	; 0xc0
 8000aa8:	af00      	add	r7, sp, #0
	char data1[] = "Hello, World !!";
 8000aaa:	4bad      	ldr	r3, [pc, #692]	; (8000d60 <apCLCDTest+0x2bc>)
 8000aac:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8000ab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char data2[] = "(*^_^*) (/^^)/";
 8000ab6:	4bab      	ldr	r3, [pc, #684]	; (8000d64 <apCLCDTest+0x2c0>)
 8000ab8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000abc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abe:	c407      	stmia	r4!, {r0, r1, r2}
 8000ac0:	8023      	strh	r3, [r4, #0]
 8000ac2:	3402      	adds	r4, #2
 8000ac4:	0c1b      	lsrs	r3, r3, #16
 8000ac6:	7023      	strb	r3, [r4, #0]
	char data3[] = "12345";
 8000ac8:	4aa7      	ldr	r2, [pc, #668]	; (8000d68 <apCLCDTest+0x2c4>)
 8000aca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	8019      	strh	r1, [r3, #0]
	char data4[] = "67890";
 8000ad8:	4aa4      	ldr	r2, [pc, #656]	; (8000d6c <apCLCDTest+0x2c8>)
 8000ada:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae2:	6018      	str	r0, [r3, #0]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	8019      	strh	r1, [r3, #0]
	char data5[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
 8000ae8:	4ba1      	ldr	r3, [pc, #644]	; (8000d70 <apCLCDTest+0x2cc>)
 8000aea:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000aee:	461d      	mov	r5, r3
 8000af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b00:	6020      	str	r0, [r4, #0]
 8000b02:	3404      	adds	r4, #4
 8000b04:	7021      	strb	r1, [r4, #0]

	char buffer[64];

	uint8_t freq1 = 45/10;
 8000b06:	2304      	movs	r3, #4
 8000b08:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	float 	freq2 = 45./10;
 8000b0c:	4b99      	ldr	r3, [pc, #612]	; (8000d74 <apCLCDTest+0x2d0>)
 8000b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	while (1)
	{
		/* Using Array */
		clcd_Position(0, 0);
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 fc1f 	bl	8001358 <clcd_Position>
		clcd_Str(data1);
 8000b1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fc04 	bl	800132c <clcd_Str>
		delay_ms(1000);
 8000b24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b28:	f000 f968 	bl	8000dfc <delay_ms>

		clcd_Position(1, 0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 fc12 	bl	8001358 <clcd_Position>
		clcd_Str(data2);
 8000b34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fbf7 	bl	800132c <clcd_Str>
		delay_ms(1000);
 8000b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b42:	f000 f95b 	bl	8000dfc <delay_ms>


		clcd_Clear();
 8000b46:	f000 fc21 	bl	800138c <clcd_Clear>
		delay_ms(500);
 8000b4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4e:	f000 f955 	bl	8000dfc <delay_ms>


		/* Using ASCII CODE */
		clcd_Position(0, 7);
 8000b52:	2107      	movs	r1, #7
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 fbff 	bl	8001358 <clcd_Position>
		clcd_Data(0x4C);
 8000b5a:	204c      	movs	r0, #76	; 0x4c
 8000b5c:	f000 fbb6 	bl	80012cc <clcd_Data>
		clcd_Data(0x6F);
 8000b60:	206f      	movs	r0, #111	; 0x6f
 8000b62:	f000 fbb3 	bl	80012cc <clcd_Data>
		clcd_Data(0x76);
 8000b66:	2076      	movs	r0, #118	; 0x76
 8000b68:	f000 fbb0 	bl	80012cc <clcd_Data>
		clcd_Data(0x65);
 8000b6c:	2065      	movs	r0, #101	; 0x65
 8000b6e:	f000 fbad 	bl	80012cc <clcd_Data>
		delay_ms(1000);
 8000b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b76:	f000 f941 	bl	8000dfc <delay_ms>

		/* One Data */
		clcd_Position(1, 3);
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 fbeb 	bl	8001358 <clcd_Position>
		clcd_Data('L');
 8000b82:	204c      	movs	r0, #76	; 0x4c
 8000b84:	f000 fba2 	bl	80012cc <clcd_Data>
		clcd_Data('O');
 8000b88:	204f      	movs	r0, #79	; 0x4f
 8000b8a:	f000 fb9f 	bl	80012cc <clcd_Data>
		clcd_Data('V');
 8000b8e:	2056      	movs	r0, #86	; 0x56
 8000b90:	f000 fb9c 	bl	80012cc <clcd_Data>
		clcd_Data('E');
 8000b94:	2045      	movs	r0, #69	; 0x45
 8000b96:	f000 fb99 	bl	80012cc <clcd_Data>
		delay_ms(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f000 f92d 	bl	8000dfc <delay_ms>


		clcd_Clear();
 8000ba2:	f000 fbf3 	bl	800138c <clcd_Clear>
		delay_ms(500);
 8000ba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000baa:	f000 f927 	bl	8000dfc <delay_ms>

		/* Using Command */
		clcd_Command(CMD_ENTRY_MODE_SET_OPTION1);
 8000bae:	2004      	movs	r0, #4
 8000bb0:	f000 fb5c 	bl	800126c <clcd_Command>
		clcd_Position(0, 7);
 8000bb4:	2107      	movs	r1, #7
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fbce 	bl	8001358 <clcd_Position>
		clcd_Str(data3);
 8000bbc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fbb3 	bl	800132c <clcd_Str>
		delay_ms(500);
 8000bc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bca:	f000 f917 	bl	8000dfc <delay_ms>

		clcd_Command(CMD_ENTRY_MODE_SET_OPTION3);
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f000 fb4c 	bl	800126c <clcd_Command>
		clcd_Position(1, 7);
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f000 fbbe 	bl	8001358 <clcd_Position>
		clcd_Str(data4);
 8000bdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fba3 	bl	800132c <clcd_Str>
		delay_ms(500);
 8000be6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bea:	f000 f907 	bl	8000dfc <delay_ms>


		clcd_Clear();
 8000bee:	f000 fbcd 	bl	800138c <clcd_Clear>
		delay_ms(500);
 8000bf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf6:	f000 f901 	bl	8000dfc <delay_ms>

		clcd_Position(0, 0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fbab 	bl	8001358 <clcd_Position>
		clcd_Str(data3);
 8000c02:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fb90 	bl	800132c <clcd_Str>
		clcd_Position(1, 0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 fba2 	bl	8001358 <clcd_Position>
		clcd_Str(data4);
 8000c14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fb87 	bl	800132c <clcd_Str>

		for(int i = 0; i < 3; i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000c24:	e012      	b.n	8000c4c <apCLCDTest+0x1a8>
		{
			clcd_Command(CMD_DISPLAY_OPTION7);
 8000c26:	200e      	movs	r0, #14
 8000c28:	f000 fb20 	bl	800126c <clcd_Command>
			delay_ms(500);
 8000c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c30:	f000 f8e4 	bl	8000dfc <delay_ms>
			clcd_Command(CMD_DISPLAY_OPTION8);
 8000c34:	200f      	movs	r0, #15
 8000c36:	f000 fb19 	bl	800126c <clcd_Command>
			delay_ms(500);
 8000c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3e:	f000 f8dd 	bl	8000dfc <delay_ms>
		for(int i = 0; i < 3; i++)
 8000c42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c46:	3301      	adds	r3, #1
 8000c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000c4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	dde8      	ble.n	8000c26 <apCLCDTest+0x182>
		}


		clcd_Clear();
 8000c54:	f000 fb9a 	bl	800138c <clcd_Clear>
		delay_ms(500);
 8000c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c5c:	f000 f8ce 	bl	8000dfc <delay_ms>


		clcd_Position(0, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 fb78 	bl	8001358 <clcd_Position>
		clcd_Str(data5);
 8000c68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fb5d 	bl	800132c <clcd_Str>
		delay_ms(500);
 8000c72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c76:	f000 f8c1 	bl	8000dfc <delay_ms>

		for(int i = 0; i < 26; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c80:	e00e      	b.n	8000ca0 <apCLCDTest+0x1fc>
		{
			clcd_Command(CMD_CURSOR_DISPLAY_SHIFT_OPTION3);
 8000c82:	2018      	movs	r0, #24
 8000c84:	f000 faf2 	bl	800126c <clcd_Command>
			clcd_Command(CMD_CURSOR_DISPLAY_SHIFT_OPTION1);
 8000c88:	2010      	movs	r0, #16
 8000c8a:	f000 faef 	bl	800126c <clcd_Command>
			delay_ms(300);
 8000c8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c92:	f000 f8b3 	bl	8000dfc <delay_ms>
		for(int i = 0; i < 26; i++)
 8000c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ca4:	2b19      	cmp	r3, #25
 8000ca6:	ddec      	ble.n	8000c82 <apCLCDTest+0x1de>
		}

		delay_ms(1000);
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f000 f8a6 	bl	8000dfc <delay_ms>
		clcd_Position(0, 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 fb50 	bl	8001358 <clcd_Position>
		clcd_Str(data5);
 8000cb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fb35 	bl	800132c <clcd_Str>
		delay_ms(1000);
 8000cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc6:	f000 f899 	bl	8000dfc <delay_ms>
		for(int i = 0; i < 26; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000cd0:	e00b      	b.n	8000cea <apCLCDTest+0x246>
		{
			clcd_Command(CMD_CURSOR_DISPLAY_SHIFT_OPTION4);
 8000cd2:	201c      	movs	r0, #28
 8000cd4:	f000 faca 	bl	800126c <clcd_Command>
			delay_ms(300);
 8000cd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cdc:	f000 f88e 	bl	8000dfc <delay_ms>
		for(int i = 0; i < 26; i++)
 8000ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000cee:	2b19      	cmp	r3, #25
 8000cf0:	ddef      	ble.n	8000cd2 <apCLCDTest+0x22e>
		}

		delay_ms(1000);
 8000cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf6:	f000 f881 	bl	8000dfc <delay_ms>


		clcd_Clear();
 8000cfa:	f000 fb47 	bl	800138c <clcd_Clear>
		delay_ms(500);
 8000cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d02:	f000 f87b 	bl	8000dfc <delay_ms>

		/* float value */
		sprintf(buffer, "gen: %3d kHz", freq1);
 8000d06:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	491a      	ldr	r1, [pc, #104]	; (8000d78 <apCLCDTest+0x2d4>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fa96 	bl	8005240 <siprintf>
		clcd_Position(0, 0);
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 fb1e 	bl	8001358 <clcd_Position>
		clcd_Str(buffer);
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fb04 	bl	800132c <clcd_Str>

		/* Check your MCU Settings from Project Properties > C/C++ Build > Settings > Tool Settings, or add manually "-u_printf_float" in linker flags.*/
		sprintf(buffer, "cnt: %3.3f kHz", freq2);
 8000d24:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000d28:	f7ff fb7e 	bl	8000428 <__aeabi_f2d>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	1d38      	adds	r0, r7, #4
 8000d32:	4912      	ldr	r1, [pc, #72]	; (8000d7c <apCLCDTest+0x2d8>)
 8000d34:	f004 fa84 	bl	8005240 <siprintf>
		clcd_Position(1, 0);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 fb0c 	bl	8001358 <clcd_Position>
		clcd_Str(buffer);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 faf2 	bl	800132c <clcd_Str>

		delay_ms(3000);
 8000d48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d4c:	f000 f856 	bl	8000dfc <delay_ms>


		clcd_Clear();
 8000d50:	f000 fb1c 	bl	800138c <clcd_Clear>
		delay_ms(500);
 8000d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d58:	f000 f850 	bl	8000dfc <delay_ms>
		clcd_Position(0, 0);
 8000d5c:	e6d9      	b.n	8000b12 <apCLCDTest+0x6e>
 8000d5e:	bf00      	nop
 8000d60:	08007950 	.word	0x08007950
 8000d64:	08007960 	.word	0x08007960
 8000d68:	08007970 	.word	0x08007970
 8000d6c:	08007978 	.word	0x08007978
 8000d70:	08007980 	.word	0x08007980
 8000d74:	40900000 	.word	0x40900000
 8000d78:	08007930 	.word	0x08007930
 8000d7c:	08007940 	.word	0x08007940

08000d80 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
	  HAL_Init();
 8000d86:	f001 f84b 	bl	8001e20 <HAL_Init>
	  SystemClock_Config();
 8000d8a:	f000 f861 	bl	8000e50 <SystemClock_Config>

	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <bspInit+0x78>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <bspInit+0x78>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <bspInit+0x78>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <bspInit+0x78>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <bspInit+0x78>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <bspInit+0x78>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <bspInit+0x78>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <bspInit+0x78>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6193      	str	r3, [r2, #24]
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <bspInit+0x78>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <bspInit+0x78>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <bspInit+0x78>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <bspInit+0x78>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <delay_ms>:


void delay_ms(uint32_t ms)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f001 f86d 	bl	8001ee4 <HAL_Delay>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <delay_us>:


void delay_us(uint32_t us)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
     if(us>1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d90a      	bls.n	8000e36 <delay_us+0x24>
     {
       uint32_t count=us*8-6;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	3b06      	subs	r3, #6
 8000e26:	60fb      	str	r3, [r7, #12]
       while(count--);
 8000e28:	bf00      	nop
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	60fa      	str	r2, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1fa      	bne.n	8000e2a <delay_us+0x18>
     else
     {
      uint32_t count=2;
      while(count--);
     }
}
 8000e34:	e007      	b.n	8000e46 <delay_us+0x34>
      uint32_t count=2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	60bb      	str	r3, [r7, #8]
      while(count--);
 8000e3a:	bf00      	nop
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1fa      	bne.n	8000e3c <delay_us+0x2a>
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	2228      	movs	r2, #40	; 0x28
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fd86 	bl	8004970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e84:	2302      	movs	r3, #2
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fb23 	bl	80034e4 <HAL_RCC_OscConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ea4:	f000 f819 	bl	8000eda <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eac:	2302      	movs	r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fd8e 	bl	80039e4 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ece:	f000 f804 	bl	8000eda <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3740      	adds	r7, #64	; 0x40
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <Error_Handler>:




void Error_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ede:	b672      	cpsid	i
}
 8000ee0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <Error_Handler+0x8>

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_MspInit+0x5c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_MspInit+0x60>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_MspInit+0x60>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 ff8d 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Channel4_IRQHandler+0x10>)
 8000f9e:	f001 facb 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000042c 	.word	0x2000042c

08000fac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Channel5_IRQHandler+0x10>)
 8000fb2:	f001 fac1 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000470 	.word	0x20000470

08000fc0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Channel6_IRQHandler+0x10>)
 8000fc6:	f001 fab7 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200003e8 	.word	0x200003e8

08000fd4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Channel7_IRQHandler+0x10>)
 8000fda:	f001 faad 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200004b4 	.word	0x200004b4

08000fe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <USART1_IRQHandler+0x10>)
 8000fee:	f002 ffc3 	bl	8003f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200004f8 	.word	0x200004f8

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <USART2_IRQHandler+0x10>)
 8001002:	f002 ffb9 	bl	8003f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000053c 	.word	0x2000053c

08001010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <_kill>:

int _kill(int pid, int sig)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001028:	f003 fc78 	bl	800491c <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	2216      	movs	r2, #22
 8001030:	601a      	str	r2, [r3, #0]
	return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_exit>:

void _exit (int status)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001046:	f04f 31ff 	mov.w	r1, #4294967295
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffe7 	bl	800101e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001050:	e7fe      	b.n	8001050 <_exit+0x12>

08001052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e00a      	b.n	800107a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001064:	f3af 8000 	nop.w
 8001068:	4601      	mov	r1, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	b2ca      	uxtb	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf0      	blt.n	8001064 <_read+0x12>
	}

return len;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e009      	b.n	80010b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf1      	blt.n	800109e <_write+0x12>
	}
	return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_close>:

int _close(int file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	return -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ea:	605a      	str	r2, [r3, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <_isatty>:

int _isatty(int file)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f003 fbe2 	bl	800491c <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20005000 	.word	0x20005000
 8001184:	00000400 	.word	0x00000400
 8001188:	2000020c 	.word	0x2000020c
 800118c:	20000598 	.word	0x20000598

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ffe5 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f003 fbaf 	bl	8004928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f003 fb9b 	bl	8004904 <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80011d8:	08007dcc 	.word	0x08007dcc
  ldr r2, =_sbss
 80011dc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80011e0:	20000594 	.word	0x20000594

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>

080011e6 <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	60da      	str	r2, [r3, #12]

  return ret;
 800120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001210:	4618      	mov	r0, r3
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <clcd_Init>:
#include "clcd.h"
#include "i2c.h"


void clcd_Init(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
	delay_ms(20);
 800121e:	2014      	movs	r0, #20
 8001220:	f7ff fdec 	bl	8000dfc <delay_ms>

	clcd_Command(0x30);
 8001224:	2030      	movs	r0, #48	; 0x30
 8001226:	f000 f821 	bl	800126c <clcd_Command>
	delay_ms(5);
 800122a:	2005      	movs	r0, #5
 800122c:	f7ff fde6 	bl	8000dfc <delay_ms>
	clcd_Command(0x30);
 8001230:	2030      	movs	r0, #48	; 0x30
 8001232:	f000 f81b 	bl	800126c <clcd_Command>
	delay_us(100);
 8001236:	2064      	movs	r0, #100	; 0x64
 8001238:	f7ff fdeb 	bl	8000e12 <delay_us>
	clcd_Command(0x30);
 800123c:	2030      	movs	r0, #48	; 0x30
 800123e:	f000 f815 	bl	800126c <clcd_Command>
	clcd_Command(0x20);
 8001242:	2020      	movs	r0, #32
 8001244:	f000 f812 	bl	800126c <clcd_Command>

	clcd_Command(CMD_FUNCTION_SET_OPTION3);
 8001248:	2028      	movs	r0, #40	; 0x28
 800124a:	f000 f80f 	bl	800126c <clcd_Command>
	clcd_Command(CMD_DISPLAY_OPTION1);
 800124e:	2008      	movs	r0, #8
 8001250:	f000 f80c 	bl	800126c <clcd_Command>
	clcd_Command(CMD_CLEAR_DISPLAY);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 f809 	bl	800126c <clcd_Command>
	clcd_Command(CMD_ENTRY_MODE_SET_OPTION3);
 800125a:	2006      	movs	r0, #6
 800125c:	f000 f806 	bl	800126c <clcd_Command>
	clcd_Command(CMD_DISPLAY_OPTION5);
 8001260:	200c      	movs	r0, #12
 8001262:	f000 f803 	bl	800126c <clcd_Command>

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <clcd_Command>:


void clcd_Command(uint8_t cmd)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af02      	add	r7, sp, #8
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	uint8_t i2cBuff[4];
	uint8_t data_H, data_L;

	data_H = cmd & 0xF0;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f023 030f 	bic.w	r3, r3, #15
 800127c:	73fb      	strb	r3, [r7, #15]
	data_L = (cmd & 0x0F) << 4;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	73bb      	strb	r3, [r7, #14]

	i2cBuff[0] = data_H | EN; //load new command byte with En high
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	b2db      	uxtb	r3, r3
 800128c:	723b      	strb	r3, [r7, #8]
	i2cBuff[1] = data_H | 0x08; //update command while keeping backlight on
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	727b      	strb	r3, [r7, #9]
	i2cBuff[2] = data_L | EN; //load new command byte with En high
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	72bb      	strb	r3, [r7, #10]
	i2cBuff[3] = data_L | 0x08; //update command while keeping backlight on
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit (&CLCD_I2C_PORT, CLCD_ADDRESS, i2cBuff, 4, 100);
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2304      	movs	r3, #4
 80012b6:	214e      	movs	r1, #78	; 0x4e
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <clcd_Command+0x5c>)
 80012ba:	f001 fe0d 	bl	8002ed8 <HAL_I2C_Master_Transmit>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000033c 	.word	0x2000033c

080012cc <clcd_Data>:


void clcd_Data(uint8_t data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[4];
	uint8_t data_u, data_l;

	data_u = (data & 0xF0);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f023 030f 	bic.w	r3, r3, #15
 80012dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4) & 0xF0);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0D;  //EN=1, RS=1
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	f043 030d 	orr.w	r3, r3, #13
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //EN=0, RS=1
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	f043 0309 	orr.w	r3, r3, #9
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //EN=1, RS=1
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	f043 030d 	orr.w	r3, r3, #13
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //EN=0, RS=1
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	f043 0309 	orr.w	r3, r3, #9
 8001308:	b2db      	uxtb	r3, r3
 800130a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit (&CLCD_I2C_PORT, CLCD_ADDRESS, data_t, 4, 100);
 800130c:	f107 0208 	add.w	r2, r7, #8
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2304      	movs	r3, #4
 8001316:	214e      	movs	r1, #78	; 0x4e
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <clcd_Data+0x5c>)
 800131a:	f001 fddd 	bl	8002ed8 <HAL_I2C_Master_Transmit>
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000033c 	.word	0x2000033c

0800132c <clcd_Str>:


void clcd_Str(char *string)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	while(*string != '\0')
 8001334:	e007      	b.n	8001346 <clcd_Str+0x1a>
	{
		clcd_Data(*string);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffc6 	bl	80012cc <clcd_Data>
		string++;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3301      	adds	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
	while(*string != '\0')
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f3      	bne.n	8001336 <clcd_Str+0xa>
	}
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <clcd_Position>:


void clcd_Position(uint8_t col, uint8_t row)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
	clcd_Command(0x80 | (col * 0x40 + row));
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	019b      	lsls	r3, r3, #6
 800136c:	b2da      	uxtb	r2, r3
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	4413      	add	r3, r2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800137a:	b25b      	sxtb	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff74 	bl	800126c <clcd_Command>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <clcd_Clear>:


void clcd_Clear(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	clcd_Command(CMD_CLEAR_DISPLAY);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ff6b 	bl	800126c <clcd_Command>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}

0800139a <dfplayer_Init>:
 * @brief	DFplayer 초기화 함수
 * @note 	DFplayer 모듈이  전원이 켜진 후 초기화되기까지 1.5~ 3sec 정도 필요
 *
 */
void dfplayer_Init(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
	delay_ms(1500);
 800139e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013a2:	f7ff fd2b 	bl	8000dfc <delay_ms>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <gpioInit>:




bool gpioInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  bool ret = true;
 80013b2:	2301      	movs	r3, #1
 80013b4:	70fb      	strb	r3, [r7, #3]

 // __HAL_RCC_GPIOB_CLK_ENABLE();

  for (int i = 0; i < GPIO_MAX_CH; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e01e      	b.n	80013fa <gpioInit+0x4e>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	b2d8      	uxtb	r0, r3
 80013c0:	4912      	ldr	r1, [pc, #72]	; (800140c <gpioInit+0x60>)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3306      	adds	r3, #6
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	f000 f81c 	bl	8001410 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_vlaue);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b2d8      	uxtb	r0, r3
 80013dc:	490b      	ldr	r1, [pc, #44]	; (800140c <gpioInit+0x60>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	3309      	adds	r3, #9
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	f000 f876 	bl	80014e0 <gpioPinWrite>
  for (int i = 0; i < GPIO_MAX_CH; i++)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dddd      	ble.n	80013bc <gpioInit+0x10>
  }

  return ret;
 8001400:	78fb      	ldrb	r3, [r7, #3]

}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000004 	.word	0x20000004

08001410 <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8001420:	2301      	movs	r3, #1
 8001422:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]

  switch(mode)
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d833      	bhi.n	80014a0 <gpioPinMode+0x90>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <gpioPinMode+0x30>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001459 	.word	0x08001459
 8001444:	08001463 	.word	0x08001463
 8001448:	0800146d 	.word	0x0800146d
 800144c:	08001477 	.word	0x08001477
 8001450:	08001485 	.word	0x08001485
 8001454:	08001493 	.word	0x08001493
  {
      case _DEF_INPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
        break;
 8001460:	e01e      	b.n	80014a0 <gpioPinMode+0x90>

      case _DEF_INPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
        break;
 800146a:	e019      	b.n	80014a0 <gpioPinMode+0x90>

      case _DEF_INPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001470:	2302      	movs	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
        break;
 8001474:	e014      	b.n	80014a0 <gpioPinMode+0x90>

      case _DEF_OUTPUT:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-Pull, Open Drain 필요 시 OD로 변경
 8001476:	2301      	movs	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // 필요 시  Medium, High로 변경
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
        break;
 8001482:	e00d      	b.n	80014a0 <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLUP:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
        break;
 8001490:	e006      	b.n	80014a0 <gpioPinMode+0x90>

      case _DEF_OUTPUT_PULLDOWN:
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001496:	2302      	movs	r3, #2
 8001498:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
        break;
 800149e:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <gpioPinMode+0xcc>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3304      	adds	r3, #4
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4909      	ldr	r1, [pc, #36]	; (80014dc <gpioPinMode+0xcc>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f107 020c 	add.w	r2, r7, #12
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f968 	bl	80027a0 <HAL_GPIO_Init>

  return ret;
 80014d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000004 	.word	0x20000004

080014e0 <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	460a      	mov	r2, r1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71bb      	strb	r3, [r7, #6]
  if (ch > GPIO_MAX_CH)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d83e      	bhi.n	8001574 <gpioPinWrite+0x94>
  {
    return ;
  }

  if (value == true)
 80014f6:	79bb      	ldrb	r3, [r7, #6]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01d      	beq.n	8001538 <gpioPinWrite+0x58>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	491f      	ldr	r1, [pc, #124]	; (800157c <gpioPinWrite+0x9c>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	491b      	ldr	r1, [pc, #108]	; (800157c <gpioPinWrite+0x9c>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3304      	adds	r3, #4
 800151c:	8819      	ldrh	r1, [r3, #0]
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	4c16      	ldr	r4, [pc, #88]	; (800157c <gpioPinWrite+0x9c>)
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4423      	add	r3, r4
 800152c:	3307      	adds	r3, #7
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	f001 fb75 	bl	8002c20 <HAL_GPIO_WritePin>
 8001536:	e01e      	b.n	8001576 <gpioPinWrite+0x96>
  }

  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	4910      	ldr	r1, [pc, #64]	; (800157c <gpioPinWrite+0x9c>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	79fa      	ldrb	r2, [r7, #7]
 800154a:	490c      	ldr	r1, [pc, #48]	; (800157c <gpioPinWrite+0x9c>)
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3304      	adds	r3, #4
 8001558:	8819      	ldrh	r1, [r3, #0]
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	4c07      	ldr	r4, [pc, #28]	; (800157c <gpioPinWrite+0x9c>)
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4423      	add	r3, r4
 8001568:	3308      	adds	r3, #8
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	f001 fb57 	bl	8002c20 <HAL_GPIO_WritePin>
 8001572:	e000      	b.n	8001576 <gpioPinWrite+0x96>
    return ;
 8001574:	bf00      	nop
  }

}
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	20000004 	.word	0x20000004

08001580 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <MX_I2C1_Init+0x54>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C1_Init+0x50>)
 800158c:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_I2C1_Init+0x58>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_I2C1_Init+0x50>)
 800159e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015be:	f001 fb47 	bl	8002c50 <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f7ff fc87 	bl	8000eda <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000033c 	.word	0x2000033c
 80015d4:	40005400 	.word	0x40005400
 80015d8:	000186a0 	.word	0x000186a0

080015dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <HAL_I2C_MspInit+0x70>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d123      	bne.n	8001644 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_I2C_MspInit+0x74>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_I2C_MspInit+0x74>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_I2C_MspInit+0x74>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001614:	23c0      	movs	r3, #192	; 0xc0
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_I2C_MspInit+0x78>)
 8001628:	f001 f8ba 	bl	80027a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0x74>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_I2C_MspInit+0x74>)
 8001632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001636:	61d3      	str	r3, [r2, #28]
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_I2C_MspInit+0x74>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40005400 	.word	0x40005400
 8001650:	40021000 	.word	0x40021000
 8001654:	40010c00 	.word	0x40010c00

08001658 <ledInit>:




bool ledInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
	bool ret = true;
 800165e:	2301      	movs	r3, #1
 8001660:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2302      	movs	r3, #2
 8001678:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e016      	b.n	80016ae <ledInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <ledInit+0x68>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	889b      	ldrh	r3, [r3, #4]
 800168a:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <ledInit+0x68>)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001694:	463a      	mov	r2, r7
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f001 f881 	bl	80027a0 <HAL_GPIO_Init>

		  ledOff(i);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f80e 	bl	80016c4 <ledOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dde5      	ble.n	8001680 <ledInit+0x28>

	  }
	return ret;
 80016b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000010 	.word	0x20000010

080016c4 <ledOff>:
}



void ledOff(uint8_t ch)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d111      	bne.n	80016f8 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <ledOff+0x3c>)
 80016d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <ledOff+0x3c>)
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	8899      	ldrh	r1, [r3, #4]
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <ledOff+0x3c>)
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	79db      	ldrb	r3, [r3, #7]
 80016f0:	461a      	mov	r2, r3
 80016f2:	f001 fa95 	bl	8002c20 <HAL_GPIO_WritePin>
 80016f6:	e000      	b.n	80016fa <ledOff+0x36>
	if (ch >= LED_MAX_CH) return;
 80016f8:	bf00      	nop

}
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010

08001704 <NRF24L01_Init>:



/* nRF24L01 Pin 변경 시 헤더파일만 변경하면 됨  */
void NRF24L01_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
     /* 클럭 활성화는  bsp.c 에서 처리 함*/

     GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

     /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(NRF24L01_CE_PORT , NRF24L01_CE_PIN , GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2120      	movs	r1, #32
 800171a:	4812      	ldr	r0, [pc, #72]	; (8001764 <NRF24L01_Init+0x60>)
 800171c:	f001 fa80 	bl	8002c20 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2110      	movs	r1, #16
 8001724:	480f      	ldr	r0, [pc, #60]	; (8001764 <NRF24L01_Init+0x60>)
 8001726:	f001 fa7b 	bl	8002c20 <HAL_GPIO_WritePin>

     /*Configure GPIO pins : PBPin PBPin */
     GPIO_InitStruct.Pin = NRF24L01_CE_PIN|NRF24L01_SPI_CS_PIN;
 800172a:	2330      	movs	r3, #48	; 0x30
 800172c:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2302      	movs	r3, #2
 8001738:	60fb      	str	r3, [r7, #12]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <NRF24L01_Init+0x60>)
 8001740:	f001 f82e 	bl	80027a0 <HAL_GPIO_Init>

     /*Configure GPIO pin : PtPin */
     GPIO_InitStruct.Pin =  NRF24L01_IRQ_PIN;
 8001744:	2308      	movs	r3, #8
 8001746:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174c:	2301      	movs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
     HAL_GPIO_Init(NRF24L01_IRQ_PORT , &GPIO_InitStruct);
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <NRF24L01_Init+0x60>)
 8001756:	f001 f823 	bl	80027a0 <HAL_GPIO_Init>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40010c00 	.word	0x40010c00

08001768 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <MX_SPI1_Init+0x64>)
 800176e:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <MX_SPI1_Init+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_SPI1_Init+0x64>)
 8001774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_SPI1_Init+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_SPI1_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_SPI1_Init+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_SPI1_Init+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_SPI1_Init+0x64>)
 8001794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_SPI1_Init+0x64>)
 800179c:	2210      	movs	r2, #16
 800179e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_SPI1_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_SPI1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_SPI1_Init+0x64>)
 80017b4:	220a      	movs	r2, #10
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_SPI1_Init+0x64>)
 80017ba:	f002 faad 	bl	8003d18 <HAL_SPI_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017c4:	f7ff fb89 	bl	8000eda <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000390 	.word	0x20000390
 80017d0:	40013000 	.word	0x40013000

080017d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_SPI_MspInit+0x88>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d12f      	bne.n	8001854 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 80017fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001824:	23a0      	movs	r3, #160	; 0xa0
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_SPI_MspInit+0x90>)
 8001838:	f000 ffb2 	bl	80027a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_SPI_MspInit+0x90>)
 8001850:	f000 ffa6 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013000 	.word	0x40013000
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800

08001868 <uartInit>:




bool uartInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	e007      	b.n	8001884 <uartInit+0x1c>
  {
    is_open[i] = false;
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <uartInit+0x30>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3301      	adds	r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	ddf4      	ble.n	8001874 <uartInit+0xc>
  }

  return true;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000210 	.word	0x20000210

0800189c <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <uartOpen+0x1c>
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d076      	beq.n	80019a4 <uartOpen+0x108>
 80018b6:	e0eb      	b.n	8001a90 <uartOpen+0x1f4>
  {
    /* UART1 */
    case _DEF_UART1:
      huart1.Instance             = USART1;
 80018b8:	4b78      	ldr	r3, [pc, #480]	; (8001a9c <uartOpen+0x200>)
 80018ba:	4a79      	ldr	r2, [pc, #484]	; (8001aa0 <uartOpen+0x204>)
 80018bc:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate        = baud;
 80018be:	4a77      	ldr	r2, [pc, #476]	; (8001a9c <uartOpen+0x200>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 80018c4:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <uartOpen+0x200>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 80018ca:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <uartOpen+0x200>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity          = UART_PARITY_NONE;
 80018d0:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <uartOpen+0x200>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode            = UART_MODE_TX_RX;
 80018d6:	4b71      	ldr	r3, [pc, #452]	; (8001a9c <uartOpen+0x200>)
 80018d8:	220c      	movs	r2, #12
 80018da:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <uartOpen+0x200>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 80018e2:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <uartOpen+0x200>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 80018e8:	486c      	ldr	r0, [pc, #432]	; (8001a9c <uartOpen+0x200>)
 80018ea:	f002 fae6 	bl	8003eba <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4a6c      	ldr	r2, [pc, #432]	; (8001aa4 <uartOpen+0x208>)
 80018f4:	4413      	add	r3, r2
 80018f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fa:	496b      	ldr	r1, [pc, #428]	; (8001aa8 <uartOpen+0x20c>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fc72 	bl	80011e6 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8001902:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <uartOpen+0x210>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a69      	ldr	r2, [pc, #420]	; (8001aac <uartOpen+0x210>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b67      	ldr	r3, [pc, #412]	; (8001aac <uartOpen+0x210>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0); // RX DMA
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	200f      	movs	r0, #15
 8001920:	f000 fbff 	bl	8002122 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001924:	200f      	movs	r0, #15
 8001926:	f000 fc18 	bl	800215a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 800192a:	485c      	ldr	r0, [pc, #368]	; (8001a9c <uartOpen+0x200>)
 800192c:	f002 fa78 	bl	8003e20 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <uartOpen+0xa0>
      {
        ret = false;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]

        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
      }

      break;
 800193a:	e0a9      	b.n	8001a90 <uartOpen+0x1f4>
        ret = true;
 800193c:	2301      	movs	r3, #1
 800193e:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <uartOpen+0x214>)
 8001944:	2101      	movs	r1, #1
 8001946:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194c:	4956      	ldr	r1, [pc, #344]	; (8001aa8 <uartOpen+0x20c>)
 800194e:	4853      	ldr	r0, [pc, #332]	; (8001a9c <uartOpen+0x200>)
 8001950:	f002 fae2 	bl	8003f18 <HAL_UART_Receive_DMA>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <uartOpen+0xc2>
          ret = false;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4a50      	ldr	r2, [pc, #320]	; (8001aa4 <uartOpen+0x208>)
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	3308      	adds	r3, #8
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	4b52      	ldr	r3, [pc, #328]	; (8001ab4 <uartOpen+0x218>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	1a8a      	subs	r2, r1, r2
 8001974:	494b      	ldr	r1, [pc, #300]	; (8001aa4 <uartOpen+0x208>)
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	440b      	add	r3, r1
 800197a:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4948      	ldr	r1, [pc, #288]	; (8001aa4 <uartOpen+0x208>)
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	440a      	add	r2, r1
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4946      	ldr	r1, [pc, #280]	; (8001aa4 <uartOpen+0x208>)
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	440b      	add	r3, r1
 800198e:	3304      	adds	r3, #4
 8001990:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0); // TX DMA
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	200e      	movs	r0, #14
 8001998:	f000 fbc3 	bl	8002122 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800199c:	200e      	movs	r0, #14
 800199e:	f000 fbdc 	bl	800215a <HAL_NVIC_EnableIRQ>
      break;
 80019a2:	e075      	b.n	8001a90 <uartOpen+0x1f4>


    /* UART2 */
    case _DEF_UART2:
    	  huart2.Instance = USART2;
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <uartOpen+0x21c>)
 80019a6:	4a45      	ldr	r2, [pc, #276]	; (8001abc <uartOpen+0x220>)
 80019a8:	601a      	str	r2, [r3, #0]
    	  huart2.Init.BaudRate = baud;
 80019aa:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <uartOpen+0x21c>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6053      	str	r3, [r2, #4]
    	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <uartOpen+0x21c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    	  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <uartOpen+0x21c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
    	  huart2.Init.Parity = UART_PARITY_NONE;
 80019bc:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <uartOpen+0x21c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
    	  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <uartOpen+0x21c>)
 80019c4:	220c      	movs	r2, #12
 80019c6:	615a      	str	r2, [r3, #20]
    	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <uartOpen+0x21c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
    	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ce:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <uartOpen+0x21c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]

          HAL_UART_DeInit(&huart2);
 80019d4:	4838      	ldr	r0, [pc, #224]	; (8001ab8 <uartOpen+0x21c>)
 80019d6:	f002 fa70 	bl	8003eba <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <uartOpen+0x208>)
 80019e0:	4413      	add	r3, r2
 80019e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e6:	4930      	ldr	r1, [pc, #192]	; (8001aa8 <uartOpen+0x20c>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fbfc 	bl	80011e6 <qbufferCreate>

          __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <uartOpen+0x210>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <uartOpen+0x210>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <uartOpen+0x210>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

          HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);  // RX DMA
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2010      	movs	r0, #16
 8001a0c:	f000 fb89 	bl	8002122 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a10:	2010      	movs	r0, #16
 8001a12:	f000 fba2 	bl	800215a <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a16:	4828      	ldr	r0, [pc, #160]	; (8001ab8 <uartOpen+0x21c>)
 8001a18:	f002 fa02 	bl	8003e20 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <uartOpen+0x18c>
          {
            ret = false;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]

            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
          }

          break;
 8001a26:	e032      	b.n	8001a8e <uartOpen+0x1f2>
            ret = true;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	75fb      	strb	r3, [r7, #23]
            is_open[ch] = true;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <uartOpen+0x214>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a38:	491b      	ldr	r1, [pc, #108]	; (8001aa8 <uartOpen+0x20c>)
 8001a3a:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <uartOpen+0x21c>)
 8001a3c:	f002 fa6c 	bl	8003f18 <HAL_UART_Receive_DMA>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <uartOpen+0x1ae>
              ret = false;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <uartOpen+0x208>)
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	3308      	adds	r3, #8
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <uartOpen+0x224>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	1a8a      	subs	r2, r1, r2
 8001a60:	4910      	ldr	r1, [pc, #64]	; (8001aa4 <uartOpen+0x208>)
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	490d      	ldr	r1, [pc, #52]	; (8001aa4 <uartOpen+0x208>)
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	440a      	add	r2, r1
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	490b      	ldr	r1, [pc, #44]	; (8001aa4 <uartOpen+0x208>)
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	440b      	add	r3, r1
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	601a      	str	r2, [r3, #0]
            HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);  // TX DMA
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2011      	movs	r0, #17
 8001a84:	f000 fb4d 	bl	8002122 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a88:	2011      	movs	r0, #17
 8001a8a:	f000 fb66 	bl	800215a <HAL_NVIC_EnableIRQ>
          break;
 8001a8e:	bf00      	nop
  }

  return ret;
 8001a90:	7dfb      	ldrb	r3, [r7, #23]

}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200004f8 	.word	0x200004f8
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	20000214 	.word	0x20000214
 8001aa8:	20000234 	.word	0x20000234
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	20000210 	.word	0x20000210
 8001ab4:	20000470 	.word	0x20000470
 8001ab8:	2000053c 	.word	0x2000053c
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	200003e8 	.word	0x200003e8

08001ac4 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return;
 8001af0:	bf00      	nop
}
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a86      	ldr	r2, [pc, #536]	; (8001d30 <HAL_UART_MspInit+0x234>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d17a      	bne.n	8001c12 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b1c:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a84      	ldr	r2, [pc, #528]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b82      	ldr	r3, [pc, #520]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
 //   __HAL_RCC_GPIOA_CLK_ENABLE();				/* bsp.c에서 초기화 시킴 */
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4619      	mov	r1, r3
 8001b48:	487b      	ldr	r0, [pc, #492]	; (8001d38 <HAL_UART_MspInit+0x23c>)
 8001b4a:	f000 fe29 	bl	80027a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4875      	ldr	r0, [pc, #468]	; (8001d38 <HAL_UART_MspInit+0x23c>)
 8001b64:	f000 fe1c 	bl	80027a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b68:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b6a:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_UART_MspInit+0x244>)
 8001b6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b6e:	4b73      	ldr	r3, [pc, #460]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b74:	4b71      	ldr	r3, [pc, #452]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b80:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b86:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b8e:	2220      	movs	r2, #32
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b92:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b98:	4868      	ldr	r0, [pc, #416]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001b9a:	f000 fb07 	bl	80021ac <HAL_DMA_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8001ba4:	f7ff f999 	bl	8000eda <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a64      	ldr	r2, [pc, #400]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38
 8001bae:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_UART_MspInit+0x240>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001bb4:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bb6:	4a64      	ldr	r2, [pc, #400]	; (8001d48 <HAL_UART_MspInit+0x24c>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bba:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b60      	ldr	r3, [pc, #384]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b5c      	ldr	r3, [pc, #368]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001be4:	4857      	ldr	r0, [pc, #348]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001be6:	f000 fae1 	bl	80021ac <HAL_DMA_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001bf0:	f7ff f973 	bl	8000eda <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a53      	ldr	r2, [pc, #332]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bfa:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_UART_MspInit+0x248>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2025      	movs	r0, #37	; 0x25
 8001c06:	f000 fa8c 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c0a:	2025      	movs	r0, #37	; 0x25
 8001c0c:	f000 faa5 	bl	800215a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c10:	e089      	b.n	8001d26 <HAL_UART_MspInit+0x22a>
  else if(uartHandle->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_UART_MspInit+0x250>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	f040 8084 	bne.w	8001d26 <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1e:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a44      	ldr	r2, [pc, #272]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6193      	str	r3, [r2, #24]
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_UART_MspInit+0x238>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0318 	add.w	r3, r7, #24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4835      	ldr	r0, [pc, #212]	; (8001d38 <HAL_UART_MspInit+0x23c>)
 8001c62:	f000 fd9d 	bl	80027a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c66:	2308      	movs	r3, #8
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	4619      	mov	r1, r3
 8001c78:	482f      	ldr	r0, [pc, #188]	; (8001d38 <HAL_UART_MspInit+0x23c>)
 8001c7a:	f000 fd91 	bl	80027a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001c80:	4a34      	ldr	r2, [pc, #208]	; (8001d54 <HAL_UART_MspInit+0x258>)
 8001c82:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001cae:	4828      	ldr	r0, [pc, #160]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001cb0:	f000 fa7c 	bl	80021ac <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8001cba:	f7ff f90e 	bl	8000eda <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc4:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <HAL_UART_MspInit+0x254>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001ccc:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_UART_MspInit+0x260>)
 8001cce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cfa:	4817      	ldr	r0, [pc, #92]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001cfc:	f000 fa56 	bl	80021ac <HAL_DMA_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_UART_MspInit+0x20e>
      Error_Handler();
 8001d06:	f7ff f8e8 	bl	8000eda <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d10:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_UART_MspInit+0x25c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2026      	movs	r0, #38	; 0x26
 8001d1c:	f000 fa01 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d20:	2026      	movs	r0, #38	; 0x26
 8001d22:	f000 fa1a 	bl	800215a <HAL_NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	20000470 	.word	0x20000470
 8001d40:	40020058 	.word	0x40020058
 8001d44:	2000042c 	.word	0x2000042c
 8001d48:	40020044 	.word	0x40020044
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	200003e8 	.word	0x200003e8
 8001d54:	4002006c 	.word	0x4002006c
 8001d58:	200004b4 	.word	0x200004b4
 8001d5c:	40020080 	.word	0x40020080

08001d60 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_UART_MspDeInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d118      	bne.n	8001da4 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_UART_MspDeInit+0x88>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_UART_MspDeInit+0x88>)
 8001d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d7c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001d7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001d82:	481a      	ldr	r0, [pc, #104]	; (8001dec <HAL_UART_MspDeInit+0x8c>)
 8001d84:	f000 fe90 	bl	8002aa8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fa67 	bl	8002260 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fa62 	bl	8002260 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001d9c:	2025      	movs	r0, #37	; 0x25
 8001d9e:	f000 f9ea 	bl	8002176 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001da2:	e01b      	b.n	8001ddc <HAL_UART_MspDeInit+0x7c>
  else if(uartHandle->Instance==USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_UART_MspDeInit+0x90>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d116      	bne.n	8001ddc <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_UART_MspDeInit+0x88>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <HAL_UART_MspDeInit+0x88>)
 8001db4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001db8:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001dba:	210c      	movs	r1, #12
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <HAL_UART_MspDeInit+0x8c>)
 8001dbe:	f000 fe73 	bl	8002aa8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fa4a 	bl	8002260 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fa45 	bl	8002260 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001dd6:	2026      	movs	r0, #38	; 0x26
 8001dd8:	f000 f9cd 	bl	8002176 <HAL_NVIC_DisableIRQ>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010800 	.word	0x40010800
 8001df0:	40004400 	.word	0x40004400

08001df4 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	bspInit();
 8001df8:	f7fe ffc2 	bl	8000d80 <bspInit>

/*  TODO: HW 설정 - "하드웨어 초기화" (3) */

	uartInit();
 8001dfc:	f7ff fd34 	bl	8001868 <uartInit>
	MX_I2C1_Init();
 8001e00:	f7ff fbbe 	bl	8001580 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001e04:	f7ff fcb0 	bl	8001768 <MX_SPI1_Init>
	gpioInit();
 8001e08:	f7ff fad0 	bl	80013ac <gpioInit>
	clcd_Init();
 8001e0c:	f7ff fa05 	bl	800121a <clcd_Init>
	NRF24L01_Init();
 8001e10:	f7ff fc78 	bl	8001704 <NRF24L01_Init>
	dfplayer_Init();
 8001e14:	f7ff fac1 	bl	800139a <dfplayer_Init>
	ledInit();
 8001e18:	f7ff fc1e 	bl	8001658 <ledInit>

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x28>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x28>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f96b 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff f852 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f991 	bl	8002192 <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f94b 	bl	8002122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	2000001c 	.word	0x2000001c
 8001ea8:	20000018 	.word	0x20000018

08001eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_IncTick+0x1c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_IncTick+0x20>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	2000001c 	.word	0x2000001c
 8001ecc:	20000580 	.word	0x20000580

08001ed0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b02      	ldr	r3, [pc, #8]	; (8001ee0 <HAL_GetTick+0x10>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	20000580 	.word	0x20000580

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffe0 	bl	8001ed0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000001c 	.word	0x2000001c

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <__NVIC_EnableIRQ+0x34>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db12      	blt.n	8002000 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	490a      	ldr	r1, [pc, #40]	; (800200c <__NVIC_DisableIRQ+0x44>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	3320      	adds	r3, #32
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ff4:	f3bf 8f4f 	dsb	sy
}
 8001ff8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ffa:	f3bf 8f6f 	isb	sy
}
 8001ffe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff90 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff09 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff1e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff90 	bl	8002064 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5f 	bl	8002010 <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff11 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff1f 	bl	8001fc8 <__NVIC_DisableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff94 	bl	80020c8 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e043      	b.n	800224a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_DMA_Init+0xa8>)
 80021ca:	4413      	add	r3, r2
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_DMA_Init+0xac>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	009a      	lsls	r2, r3, #2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_DMA_Init+0xb0>)
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	bffdfff8 	.word	0xbffdfff8
 8002258:	cccccccd 	.word	0xcccccccd
 800225c:	40020000 	.word	0x40020000

08002260 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e046      	b.n	8002300 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_DMA_DeInit+0xac>)
 80022aa:	4413      	add	r3, r2
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_DMA_DeInit+0xb0>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_DMA_DeInit+0xb4>)
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	bffdfff8 	.word	0xbffdfff8
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_DMA_Start_IT+0x20>
 8002334:	2302      	movs	r3, #2
 8002336:	e04a      	b.n	80023ce <HAL_DMA_Start_IT+0xb6>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002346:	2b01      	cmp	r3, #1
 8002348:	d13a      	bne.n	80023c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f9e8 	bl	8002744 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 020e 	orr.w	r2, r2, #14
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e00f      	b.n	80023ae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0204 	bic.w	r2, r2, #4
 800239c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 020a 	orr.w	r2, r2, #10
 80023ac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e005      	b.n	80023cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
 80023ca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d008      	beq.n	80023fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2204      	movs	r2, #4
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e020      	b.n	8002440 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 020e 	bic.w	r2, r2, #14
 800240c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800245e:	2b02      	cmp	r3, #2
 8002460:	d005      	beq.n	800246e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2204      	movs	r2, #4
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e051      	b.n	8002512 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 020e 	bic.w	r2, r2, #14
 800247c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_DMA_Abort_IT+0xd0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d029      	beq.n	80024ec <HAL_DMA_Abort_IT+0xa0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_DMA_Abort_IT+0xd4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d022      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x9c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_DMA_Abort_IT+0xd8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d01a      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x96>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_DMA_Abort_IT+0xdc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d012      	beq.n	80024dc <HAL_DMA_Abort_IT+0x90>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_DMA_Abort_IT+0xe0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00a      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x8a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HAL_DMA_Abort_IT+0xe4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d102      	bne.n	80024d0 <HAL_DMA_Abort_IT+0x84>
 80024ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024ce:	e00e      	b.n	80024ee <HAL_DMA_Abort_IT+0xa2>
 80024d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d4:	e00b      	b.n	80024ee <HAL_DMA_Abort_IT+0xa2>
 80024d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024da:	e008      	b.n	80024ee <HAL_DMA_Abort_IT+0xa2>
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	e005      	b.n	80024ee <HAL_DMA_Abort_IT+0xa2>
 80024e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e6:	e002      	b.n	80024ee <HAL_DMA_Abort_IT+0xa2>
 80024e8:	2310      	movs	r3, #16
 80024ea:	e000      	b.n	80024ee <HAL_DMA_Abort_IT+0xa2>
 80024ec:	2301      	movs	r3, #1
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_DMA_Abort_IT+0xe8>)
 80024f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
    } 
  }
  return status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40020008 	.word	0x40020008
 8002520:	4002001c 	.word	0x4002001c
 8002524:	40020030 	.word	0x40020030
 8002528:	40020044 	.word	0x40020044
 800252c:	40020058 	.word	0x40020058
 8002530:	4002006c 	.word	0x4002006c
 8002534:	40020000 	.word	0x40020000

08002538 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2204      	movs	r2, #4
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d04f      	beq.n	8002600 <HAL_DMA_IRQHandler+0xc8>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d04a      	beq.n	8002600 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0204 	bic.w	r2, r2, #4
 8002586:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a66      	ldr	r2, [pc, #408]	; (8002728 <HAL_DMA_IRQHandler+0x1f0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d029      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xae>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a65      	ldr	r2, [pc, #404]	; (800272c <HAL_DMA_IRQHandler+0x1f4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d022      	beq.n	80025e2 <HAL_DMA_IRQHandler+0xaa>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a63      	ldr	r2, [pc, #396]	; (8002730 <HAL_DMA_IRQHandler+0x1f8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01a      	beq.n	80025dc <HAL_DMA_IRQHandler+0xa4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a62      	ldr	r2, [pc, #392]	; (8002734 <HAL_DMA_IRQHandler+0x1fc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d012      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x9e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a60      	ldr	r2, [pc, #384]	; (8002738 <HAL_DMA_IRQHandler+0x200>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00a      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x98>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a5f      	ldr	r2, [pc, #380]	; (800273c <HAL_DMA_IRQHandler+0x204>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d102      	bne.n	80025ca <HAL_DMA_IRQHandler+0x92>
 80025c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025c8:	e00e      	b.n	80025e8 <HAL_DMA_IRQHandler+0xb0>
 80025ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025ce:	e00b      	b.n	80025e8 <HAL_DMA_IRQHandler+0xb0>
 80025d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025d4:	e008      	b.n	80025e8 <HAL_DMA_IRQHandler+0xb0>
 80025d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025da:	e005      	b.n	80025e8 <HAL_DMA_IRQHandler+0xb0>
 80025dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e0:	e002      	b.n	80025e8 <HAL_DMA_IRQHandler+0xb0>
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	e000      	b.n	80025e8 <HAL_DMA_IRQHandler+0xb0>
 80025e6:	2304      	movs	r3, #4
 80025e8:	4a55      	ldr	r2, [pc, #340]	; (8002740 <HAL_DMA_IRQHandler+0x208>)
 80025ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8094 	beq.w	800271e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025fe:	e08e      	b.n	800271e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2202      	movs	r2, #2
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d056      	beq.n	80026be <HAL_DMA_IRQHandler+0x186>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d051      	beq.n	80026be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 020a 	bic.w	r2, r2, #10
 8002636:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a38      	ldr	r2, [pc, #224]	; (8002728 <HAL_DMA_IRQHandler+0x1f0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d029      	beq.n	800269e <HAL_DMA_IRQHandler+0x166>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a37      	ldr	r2, [pc, #220]	; (800272c <HAL_DMA_IRQHandler+0x1f4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d022      	beq.n	800269a <HAL_DMA_IRQHandler+0x162>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a35      	ldr	r2, [pc, #212]	; (8002730 <HAL_DMA_IRQHandler+0x1f8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01a      	beq.n	8002694 <HAL_DMA_IRQHandler+0x15c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_DMA_IRQHandler+0x1fc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d012      	beq.n	800268e <HAL_DMA_IRQHandler+0x156>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a32      	ldr	r2, [pc, #200]	; (8002738 <HAL_DMA_IRQHandler+0x200>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00a      	beq.n	8002688 <HAL_DMA_IRQHandler+0x150>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_DMA_IRQHandler+0x204>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d102      	bne.n	8002682 <HAL_DMA_IRQHandler+0x14a>
 800267c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002680:	e00e      	b.n	80026a0 <HAL_DMA_IRQHandler+0x168>
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	e00b      	b.n	80026a0 <HAL_DMA_IRQHandler+0x168>
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	e008      	b.n	80026a0 <HAL_DMA_IRQHandler+0x168>
 800268e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002692:	e005      	b.n	80026a0 <HAL_DMA_IRQHandler+0x168>
 8002694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002698:	e002      	b.n	80026a0 <HAL_DMA_IRQHandler+0x168>
 800269a:	2320      	movs	r3, #32
 800269c:	e000      	b.n	80026a0 <HAL_DMA_IRQHandler+0x168>
 800269e:	2302      	movs	r3, #2
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <HAL_DMA_IRQHandler+0x208>)
 80026a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d034      	beq.n	800271e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026bc:	e02f      	b.n	800271e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2208      	movs	r2, #8
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d028      	beq.n	8002720 <HAL_DMA_IRQHandler+0x1e8>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d023      	beq.n	8002720 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 020e 	bic.w	r2, r2, #14
 80026e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
    }
  }
  return;
 800271e:	bf00      	nop
 8002720:	bf00      	nop
}
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40020008 	.word	0x40020008
 800272c:	4002001c 	.word	0x4002001c
 8002730:	40020030 	.word	0x40020030
 8002734:	40020044 	.word	0x40020044
 8002738:	40020058 	.word	0x40020058
 800273c:	4002006c 	.word	0x4002006c
 8002740:	40020000 	.word	0x40020000

08002744 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b10      	cmp	r3, #16
 8002770:	d108      	bne.n	8002784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002782:	e007      	b.n	8002794 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b08b      	sub	sp, #44	; 0x2c
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b2:	e169      	b.n	8002a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027b4:	2201      	movs	r2, #1
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 8158 	bne.w	8002a82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a9a      	ldr	r2, [pc, #616]	; (8002a40 <HAL_GPIO_Init+0x2a0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d05e      	beq.n	800289a <HAL_GPIO_Init+0xfa>
 80027dc:	4a98      	ldr	r2, [pc, #608]	; (8002a40 <HAL_GPIO_Init+0x2a0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d875      	bhi.n	80028ce <HAL_GPIO_Init+0x12e>
 80027e2:	4a98      	ldr	r2, [pc, #608]	; (8002a44 <HAL_GPIO_Init+0x2a4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d058      	beq.n	800289a <HAL_GPIO_Init+0xfa>
 80027e8:	4a96      	ldr	r2, [pc, #600]	; (8002a44 <HAL_GPIO_Init+0x2a4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d86f      	bhi.n	80028ce <HAL_GPIO_Init+0x12e>
 80027ee:	4a96      	ldr	r2, [pc, #600]	; (8002a48 <HAL_GPIO_Init+0x2a8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d052      	beq.n	800289a <HAL_GPIO_Init+0xfa>
 80027f4:	4a94      	ldr	r2, [pc, #592]	; (8002a48 <HAL_GPIO_Init+0x2a8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d869      	bhi.n	80028ce <HAL_GPIO_Init+0x12e>
 80027fa:	4a94      	ldr	r2, [pc, #592]	; (8002a4c <HAL_GPIO_Init+0x2ac>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d04c      	beq.n	800289a <HAL_GPIO_Init+0xfa>
 8002800:	4a92      	ldr	r2, [pc, #584]	; (8002a4c <HAL_GPIO_Init+0x2ac>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d863      	bhi.n	80028ce <HAL_GPIO_Init+0x12e>
 8002806:	4a92      	ldr	r2, [pc, #584]	; (8002a50 <HAL_GPIO_Init+0x2b0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d046      	beq.n	800289a <HAL_GPIO_Init+0xfa>
 800280c:	4a90      	ldr	r2, [pc, #576]	; (8002a50 <HAL_GPIO_Init+0x2b0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d85d      	bhi.n	80028ce <HAL_GPIO_Init+0x12e>
 8002812:	2b12      	cmp	r3, #18
 8002814:	d82a      	bhi.n	800286c <HAL_GPIO_Init+0xcc>
 8002816:	2b12      	cmp	r3, #18
 8002818:	d859      	bhi.n	80028ce <HAL_GPIO_Init+0x12e>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <HAL_GPIO_Init+0x80>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	0800289b 	.word	0x0800289b
 8002824:	08002875 	.word	0x08002875
 8002828:	08002887 	.word	0x08002887
 800282c:	080028c9 	.word	0x080028c9
 8002830:	080028cf 	.word	0x080028cf
 8002834:	080028cf 	.word	0x080028cf
 8002838:	080028cf 	.word	0x080028cf
 800283c:	080028cf 	.word	0x080028cf
 8002840:	080028cf 	.word	0x080028cf
 8002844:	080028cf 	.word	0x080028cf
 8002848:	080028cf 	.word	0x080028cf
 800284c:	080028cf 	.word	0x080028cf
 8002850:	080028cf 	.word	0x080028cf
 8002854:	080028cf 	.word	0x080028cf
 8002858:	080028cf 	.word	0x080028cf
 800285c:	080028cf 	.word	0x080028cf
 8002860:	080028cf 	.word	0x080028cf
 8002864:	0800287d 	.word	0x0800287d
 8002868:	08002891 	.word	0x08002891
 800286c:	4a79      	ldr	r2, [pc, #484]	; (8002a54 <HAL_GPIO_Init+0x2b4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002872:	e02c      	b.n	80028ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	623b      	str	r3, [r7, #32]
          break;
 800287a:	e029      	b.n	80028d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	3304      	adds	r3, #4
 8002882:	623b      	str	r3, [r7, #32]
          break;
 8002884:	e024      	b.n	80028d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	3308      	adds	r3, #8
 800288c:	623b      	str	r3, [r7, #32]
          break;
 800288e:	e01f      	b.n	80028d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	330c      	adds	r3, #12
 8002896:	623b      	str	r3, [r7, #32]
          break;
 8002898:	e01a      	b.n	80028d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028a2:	2304      	movs	r3, #4
 80028a4:	623b      	str	r3, [r7, #32]
          break;
 80028a6:	e013      	b.n	80028d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b0:	2308      	movs	r3, #8
 80028b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	611a      	str	r2, [r3, #16]
          break;
 80028ba:	e009      	b.n	80028d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028bc:	2308      	movs	r3, #8
 80028be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	615a      	str	r2, [r3, #20]
          break;
 80028c6:	e003      	b.n	80028d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x130>
          break;
 80028ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2bff      	cmp	r3, #255	; 0xff
 80028d4:	d801      	bhi.n	80028da <HAL_GPIO_Init+0x13a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	e001      	b.n	80028de <HAL_GPIO_Init+0x13e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2bff      	cmp	r3, #255	; 0xff
 80028e4:	d802      	bhi.n	80028ec <HAL_GPIO_Init+0x14c>
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x152>
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	3b08      	subs	r3, #8
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	210f      	movs	r1, #15
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	401a      	ands	r2, r3
 8002904:	6a39      	ldr	r1, [r7, #32]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80b1 	beq.w	8002a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002920:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_GPIO_Init+0x2b8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_GPIO_Init+0x2b8>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6193      	str	r3, [r2, #24]
 800292c:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <HAL_GPIO_Init+0x2b8>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002938:	4a48      	ldr	r2, [pc, #288]	; (8002a5c <HAL_GPIO_Init+0x2bc>)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	220f      	movs	r2, #15
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a40      	ldr	r2, [pc, #256]	; (8002a60 <HAL_GPIO_Init+0x2c0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_GPIO_Init+0x1ec>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3f      	ldr	r2, [pc, #252]	; (8002a64 <HAL_GPIO_Init+0x2c4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00d      	beq.n	8002988 <HAL_GPIO_Init+0x1e8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3e      	ldr	r2, [pc, #248]	; (8002a68 <HAL_GPIO_Init+0x2c8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <HAL_GPIO_Init+0x1e4>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3d      	ldr	r2, [pc, #244]	; (8002a6c <HAL_GPIO_Init+0x2cc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_GPIO_Init+0x1e0>
 800297c:	2303      	movs	r3, #3
 800297e:	e006      	b.n	800298e <HAL_GPIO_Init+0x1ee>
 8002980:	2304      	movs	r3, #4
 8002982:	e004      	b.n	800298e <HAL_GPIO_Init+0x1ee>
 8002984:	2302      	movs	r3, #2
 8002986:	e002      	b.n	800298e <HAL_GPIO_Init+0x1ee>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_GPIO_Init+0x1ee>
 800298c:	2300      	movs	r3, #0
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	f002 0203 	and.w	r2, r2, #3
 8002994:	0092      	lsls	r2, r2, #2
 8002996:	4093      	lsls	r3, r2
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800299e:	492f      	ldr	r1, [pc, #188]	; (8002a5c <HAL_GPIO_Init+0x2bc>)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	492c      	ldr	r1, [pc, #176]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e006      	b.n	80029d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029c6:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	4928      	ldr	r1, [pc, #160]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4922      	ldr	r1, [pc, #136]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
 80029ec:	e006      	b.n	80029fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	491e      	ldr	r1, [pc, #120]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4918      	ldr	r1, [pc, #96]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4914      	ldr	r1, [pc, #80]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d021      	beq.n	8002a74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60cb      	str	r3, [r1, #12]
 8002a3c:	e021      	b.n	8002a82 <HAL_GPIO_Init+0x2e2>
 8002a3e:	bf00      	nop
 8002a40:	10320000 	.word	0x10320000
 8002a44:	10310000 	.word	0x10310000
 8002a48:	10220000 	.word	0x10220000
 8002a4c:	10210000 	.word	0x10210000
 8002a50:	10120000 	.word	0x10120000
 8002a54:	10110000 	.word	0x10110000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40010800 	.word	0x40010800
 8002a64:	40010c00 	.word	0x40010c00
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	40011400 	.word	0x40011400
 8002a70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	3301      	adds	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f47f ae8e 	bne.w	80027b4 <HAL_GPIO_Init+0x14>
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	372c      	adds	r7, #44	; 0x2c
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002ab6:	e09a      	b.n	8002bee <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 808d 	beq.w	8002be8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002ace:	4a4e      	ldr	r2, [pc, #312]	; (8002c08 <HAL_GPIO_DeInit+0x160>)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ada:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_GPIO_DeInit+0x164>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_GPIO_DeInit+0x78>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a45      	ldr	r2, [pc, #276]	; (8002c10 <HAL_GPIO_DeInit+0x168>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00d      	beq.n	8002b1c <HAL_GPIO_DeInit+0x74>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a44      	ldr	r2, [pc, #272]	; (8002c14 <HAL_GPIO_DeInit+0x16c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_DeInit+0x70>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a43      	ldr	r2, [pc, #268]	; (8002c18 <HAL_GPIO_DeInit+0x170>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_GPIO_DeInit+0x6c>
 8002b10:	2303      	movs	r3, #3
 8002b12:	e006      	b.n	8002b22 <HAL_GPIO_DeInit+0x7a>
 8002b14:	2304      	movs	r3, #4
 8002b16:	e004      	b.n	8002b22 <HAL_GPIO_DeInit+0x7a>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e002      	b.n	8002b22 <HAL_GPIO_DeInit+0x7a>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_GPIO_DeInit+0x7a>
 8002b20:	2300      	movs	r3, #0
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	f002 0203 	and.w	r2, r2, #3
 8002b28:	0092      	lsls	r2, r2, #2
 8002b2a:	4093      	lsls	r3, r2
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d132      	bne.n	8002b98 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002b42:	4a31      	ldr	r2, [pc, #196]	; (8002c08 <HAL_GPIO_DeInit+0x160>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	482d      	ldr	r0, [pc, #180]	; (8002c08 <HAL_GPIO_DeInit+0x160>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	400a      	ands	r2, r1
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	492c      	ldr	r1, [pc, #176]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4929      	ldr	r1, [pc, #164]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4925      	ldr	r1, [pc, #148]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2bff      	cmp	r3, #255	; 0xff
 8002b9c:	d801      	bhi.n	8002ba2 <HAL_GPIO_DeInit+0xfa>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_DeInit+0xfe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	d802      	bhi.n	8002bb4 <HAL_GPIO_DeInit+0x10c>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_DeInit+0x112>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3b08      	subs	r3, #8
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	401a      	ands	r2, r3
 8002bcc:	2104      	movs	r1, #4
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3301      	adds	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f47f af5e 	bne.w	8002ab8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40010800 	.word	0x40010800
 8002c10:	40010c00 	.word	0x40010c00
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40011400 	.word	0x40011400
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c3c:	e003      	b.n	8002c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	041a      	lsls	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e12b      	b.n	8002eba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe fcb0 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f000 ffea 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a81      	ldr	r2, [pc, #516]	; (8002ec4 <HAL_I2C_Init+0x274>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <HAL_I2C_Init+0x84>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a80      	ldr	r2, [pc, #512]	; (8002ec8 <HAL_I2C_Init+0x278>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e006      	b.n	8002ce2 <HAL_I2C_Init+0x92>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <HAL_I2C_Init+0x27c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0e7      	b.n	8002eba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a78      	ldr	r2, [pc, #480]	; (8002ed0 <HAL_I2C_Init+0x280>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_I2C_Init+0x274>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d802      	bhi.n	8002d24 <HAL_I2C_Init+0xd4>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	e009      	b.n	8002d38 <HAL_I2C_Init+0xe8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	4a69      	ldr	r2, [pc, #420]	; (8002ed4 <HAL_I2C_Init+0x284>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	495c      	ldr	r1, [pc, #368]	; (8002ec4 <HAL_I2C_Init+0x274>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d819      	bhi.n	8002d8c <HAL_I2C_Init+0x13c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e59      	subs	r1, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d66:	1c59      	adds	r1, r3, #1
 8002d68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_I2C_Init+0x138>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e59      	subs	r1, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	e051      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	e04f      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d111      	bne.n	8002db8 <HAL_I2C_Init+0x168>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e012      	b.n	8002dde <HAL_I2C_Init+0x18e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	0099      	lsls	r1, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Init+0x196>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e022      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10e      	bne.n	8002e0c <HAL_I2C_Init+0x1bc>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1e58      	subs	r0, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	440b      	add	r3, r1
 8002dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0a:	e00f      	b.n	8002e2c <HAL_I2C_Init+0x1dc>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	0099      	lsls	r1, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6809      	ldr	r1, [r1, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6911      	ldr	r1, [r2, #16]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68d2      	ldr	r2, [r2, #12]
 8002e66:	4311      	orrs	r1, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	000186a0 	.word	0x000186a0
 8002ec8:	001e847f 	.word	0x001e847f
 8002ecc:	003d08ff 	.word	0x003d08ff
 8002ed0:	431bde83 	.word	0x431bde83
 8002ed4:	10624dd3 	.word	0x10624dd3

08002ed8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	817b      	strh	r3, [r7, #10]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7fe fff0 	bl	8001ed0 <HAL_GetTick>
 8002ef0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	f040 80e0 	bne.w	80030c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2319      	movs	r3, #25
 8002f06:	2201      	movs	r2, #1
 8002f08:	4970      	ldr	r1, [pc, #448]	; (80030cc <HAL_I2C_Master_Transmit+0x1f4>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f964 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0d3      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_I2C_Master_Transmit+0x50>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0cc      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d007      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2221      	movs	r2, #33	; 0x21
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	893a      	ldrh	r2, [r7, #8]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a50      	ldr	r2, [pc, #320]	; (80030d0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f90:	8979      	ldrh	r1, [r7, #10]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f89c 	bl	80030d4 <I2C_MasterRequestWrite>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e08d      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fbc:	e066      	b.n	800308c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	6a39      	ldr	r1, [r7, #32]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f9de 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d107      	bne.n	8002fe6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d11b      	bne.n	8003060 <HAL_I2C_Master_Transmit+0x188>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	6a39      	ldr	r1, [r7, #32]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f9ce 	bl	8003406 <I2C_WaitOnBTFFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e01a      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	d194      	bne.n	8002fbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	00100002 	.word	0x00100002
 80030d0:	ffff0000 	.word	0xffff0000

080030d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	460b      	mov	r3, r1
 80030e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d006      	beq.n	80030fe <I2C_MasterRequestWrite+0x2a>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d003      	beq.n	80030fe <I2C_MasterRequestWrite+0x2a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030fc:	d108      	bne.n	8003110 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e00b      	b.n	8003128 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	2b12      	cmp	r3, #18
 8003116:	d107      	bne.n	8003128 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f84f 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	d103      	bne.n	8003158 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e035      	b.n	80031c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003164:	d108      	bne.n	8003178 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003174:	611a      	str	r2, [r3, #16]
 8003176:	e01b      	b.n	80031b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003178:	897b      	ldrh	r3, [r7, #10]
 800317a:	11db      	asrs	r3, r3, #7
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f003 0306 	and.w	r3, r3, #6
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f063 030f 	orn	r3, r3, #15
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <I2C_MasterRequestWrite+0xfc>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f875 	bl	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e010      	b.n	80031c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031a6:	897b      	ldrh	r3, [r7, #10]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <I2C_MasterRequestWrite+0x100>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f865 	bl	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	00010008 	.word	0x00010008
 80031d4:	00010002 	.word	0x00010002

080031d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e8:	e025      	b.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d021      	beq.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fe fe6d 	bl	8001ed0 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d116      	bne.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e023      	b.n	800327e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10d      	bne.n	800325c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	e00c      	b.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d0b6      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003294:	e051      	b.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d123      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e046      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d021      	beq.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fdeb 	bl	8001ed0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e020      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10c      	bne.n	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e00b      	b.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d18d      	bne.n	8003296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003390:	e02d      	b.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f878 	bl	8003488 <I2C_IsAcknowledgeFailed>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02d      	b.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe fd91 	bl	8001ed0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d1ca      	bne.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003412:	e02d      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f837 	bl	8003488 <I2C_IsAcknowledgeFailed>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e02d      	b.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d021      	beq.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342c:	f7fe fd50 	bl	8001ed0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e007      	b.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d1ca      	bne.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d11b      	bne.n	80034d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e26c      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8087 	beq.w	8003612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003504:	4b92      	ldr	r3, [pc, #584]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b04      	cmp	r3, #4
 800350e:	d00c      	beq.n	800352a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003510:	4b8f      	ldr	r3, [pc, #572]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d112      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d10b      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352a:	4b89      	ldr	r3, [pc, #548]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d06c      	beq.n	8003610 <HAL_RCC_OscConfig+0x12c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d168      	bne.n	8003610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e246      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x76>
 800354c:	4b80      	ldr	r3, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a7f      	ldr	r2, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e02e      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a77      	ldr	r2, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e01d      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0xbc>
 8003586:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a71      	ldr	r2, [pc, #452]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6e      	ldr	r2, [pc, #440]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 80035a0:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a67      	ldr	r2, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fc86 	bl	8001ed0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fc82 	bl	8001ed0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1fa      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe4>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe fc72 	bl	8001ed0 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fc6e 	bl	8001ed0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1e6      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x10c>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d063      	beq.n	80036e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800362a:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
 8003636:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1ba      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4939      	ldr	r1, [pc, #228]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e03a      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe fc27 	bl	8001ed0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe fc23 	bl	8001ed0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e19b      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4927      	ldr	r1, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe fc06 	bl	8001ed0 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe fc02 	bl	8001ed0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e17a      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03a      	beq.n	8003768 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d019      	beq.n	800372e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe fbe6 	bl	8001ed0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe fbe2 	bl	8001ed0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e15a      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003726:	2001      	movs	r0, #1
 8003728:	f000 fad8 	bl	8003cdc <RCC_Delay>
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7fe fbcc 	bl	8001ed0 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373a:	e00f      	b.n	800375c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe fbc8 	bl	8001ed0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d908      	bls.n	800375c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e140      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	42420000 	.word	0x42420000
 8003758:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b9e      	ldr	r3, [pc, #632]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e9      	bne.n	800373c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a6 	beq.w	80038c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b97      	ldr	r3, [pc, #604]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	4b94      	ldr	r3, [pc, #592]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a93      	ldr	r2, [pc, #588]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b8e      	ldr	r3, [pc, #568]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b8b      	ldr	r3, [pc, #556]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a8a      	ldr	r2, [pc, #552]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe fb89 	bl	8001ed0 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe fb85 	bl	8001ed0 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0fd      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b81      	ldr	r3, [pc, #516]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x312>
 80037e8:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	e02d      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x334>
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6213      	str	r3, [r2, #32]
 800380a:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a72      	ldr	r2, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x356>
 8003820:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4a6c      	ldr	r2, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6213      	str	r3, [r2, #32]
 800382c:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a66      	ldr	r2, [pc, #408]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a63      	ldr	r2, [pc, #396]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fb39 	bl	8001ed0 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe fb35 	bl	8001ed0 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0ab      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x37e>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fe fb23 	bl	8001ed0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe fb1f 	bl	8001ed0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e095      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4a47      	ldr	r2, [pc, #284]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8081 	beq.w	80039ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038cc:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d061      	beq.n	800399c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d146      	bne.n	800396e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_RCC_OscConfig+0x4fc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe faf3 	bl	8001ed0 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe faef 	bl	8001ed0 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e067      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	492d      	ldr	r1, [pc, #180]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a19      	ldr	r1, [r3, #32]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	430b      	orrs	r3, r1
 800393a:	4927      	ldr	r1, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_OscConfig+0x4fc>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe fac3 	bl	8001ed0 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe fabf 	bl	8001ed0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e037      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x46a>
 800396c:	e02f      	b.n	80039ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_RCC_OscConfig+0x4fc>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe faac 	bl	8001ed0 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe faa8 	bl	8001ed0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e020      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x498>
 800399a:	e018      	b.n	80039ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e013      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42420060 	.word	0x42420060

080039e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0d0      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b6a      	ldr	r3, [pc, #424]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d910      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b67      	ldr	r3, [pc, #412]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0207 	bic.w	r2, r3, #7
 8003a0e:	4965      	ldr	r1, [pc, #404]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b8      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	494d      	ldr	r1, [pc, #308]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d040      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d115      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e073      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06b      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4936      	ldr	r1, [pc, #216]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7fe f9fc 	bl	8001ed0 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fe f9f8 	bl	8001ed0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e053      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b04:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d210      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 0207 	bic.w	r2, r3, #7
 8003b1a:	4922      	ldr	r1, [pc, #136]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e032      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b72:	f000 f821 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	490a      	ldr	r1, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	5ccb      	ldrb	r3, [r1, r3]
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe f95a 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	080079c8 	.word	0x080079c8
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	20000018 	.word	0x20000018

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	b490      	push	{r4, r7}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bc0:	1d3c      	adds	r4, r7, #4
 8003bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bc8:	f240 2301 	movw	r3, #513	; 0x201
 8003bcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d002      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_GetSysClockFreq+0x46>
 8003bf6:	e02d      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfa:	623b      	str	r3, [r7, #32]
      break;
 8003bfc:	e02d      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	0c9b      	lsrs	r3, r3, #18
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0c5b      	lsrs	r3, r3, #17
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	fb02 f203 	mul.w	r2, r2, r3
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e004      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	623b      	str	r3, [r7, #32]
      break;
 8003c52:	e002      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c56:	623b      	str	r3, [r7, #32]
      break;
 8003c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc90      	pop	{r4, r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	080079b8 	.word	0x080079b8
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	007a1200 	.word	0x007a1200
 8003c74:	003d0900 	.word	0x003d0900

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000000 	.word	0x20000000

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c90:	f7ff fff2 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	080079d8 	.word	0x080079d8

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cb8:	f7ff ffde 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	080079d8 	.word	0x080079d8

08003cdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <RCC_Delay+0x34>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <RCC_Delay+0x38>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0a5b      	lsrs	r3, r3, #9
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cf8:	bf00      	nop
  }
  while (Delay --);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e5a      	subs	r2, r3, #1
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f9      	bne.n	8003cf8 <RCC_Delay+0x1c>
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	20000000 	.word	0x20000000
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e076      	b.n	8003e18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3a:	d009      	beq.n	8003d50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
 8003d42:	e005      	b.n	8003d50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fd32 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	ea42 0103 	orr.w	r1, r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	0c1a      	lsrs	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f002 0204 	and.w	r2, r2, #4
 8003df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e03f      	b.n	8003eb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd fe58 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fcbf 	bl	80047e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e021      	b.n	8003f10 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	; 0x24
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fd ff3b 	bl	8001d60 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d11d      	bne.n	8003f6e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_UART_Receive_DMA+0x26>
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e016      	b.n	8003f70 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_UART_Receive_DMA+0x38>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e00f      	b.n	8003f70 <HAL_UART_Receive_DMA+0x58>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fa75 	bl	8004454 <UART_Start_Receive_DMA>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	e000      	b.n	8003f70 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_UART_IRQHandler+0x52>
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fb66 	bl	8004694 <UART_Receive_IT>
      return;
 8003fc8:	e17b      	b.n	80042c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80b1 	beq.w	8004134 <HAL_UART_IRQHandler+0x1bc>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x70>
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80a6 	beq.w	8004134 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_UART_IRQHandler+0x90>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f043 0201 	orr.w	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_UART_IRQHandler+0xb0>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f043 0202 	orr.w	r2, r3, #2
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_UART_IRQHandler+0xd0>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0204 	orr.w	r2, r3, #4
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00f      	beq.n	8004072 <HAL_UART_IRQHandler+0xfa>
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_UART_IRQHandler+0xee>
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f043 0208 	orr.w	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 811e 	beq.w	80042b8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <HAL_UART_IRQHandler+0x11e>
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 faff 	bl	8004694 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_UART_IRQHandler+0x146>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d031      	beq.n	8004122 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa41 	bl	8004546 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d023      	beq.n	800411a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d013      	beq.n	8004112 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	4a76      	ldr	r2, [pc, #472]	; (80042c8 <HAL_UART_IRQHandler+0x350>)
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe f9a8 	bl	800244c <HAL_DMA_Abort_IT>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800410c:	4610      	mov	r0, r2
 800410e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	e00e      	b.n	8004130 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd fcd6 	bl	8001ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00a      	b.n	8004130 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fcd2 	bl	8001ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e006      	b.n	8004130 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd fcce 	bl	8001ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800412e:	e0c3      	b.n	80042b8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	bf00      	nop
    return;
 8004132:	e0c1      	b.n	80042b8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 80a1 	bne.w	8004280 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 809b 	beq.w	8004280 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8095 	beq.w	8004280 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d04e      	beq.n	8004218 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004184:	8a3b      	ldrh	r3, [r7, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8098 	beq.w	80042bc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004190:	8a3a      	ldrh	r2, [r7, #16]
 8004192:	429a      	cmp	r2, r3
 8004194:	f080 8092 	bcs.w	80042bc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8a3a      	ldrh	r2, [r7, #16]
 800419c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d02b      	beq.n	8004200 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041b6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0210 	bic.w	r2, r2, #16
 80041f4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe f8eb 	bl	80023d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	b29b      	uxth	r3, r3
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f864 	bl	80042de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004216:	e051      	b.n	80042bc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004220:	b29b      	uxth	r3, r3
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d047      	beq.n	80042c0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004230:	8a7b      	ldrh	r3, [r7, #18]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d044      	beq.n	80042c0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004244:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004274:	8a7b      	ldrh	r3, [r7, #18]
 8004276:	4619      	mov	r1, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f830 	bl	80042de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800427e:	e01f      	b.n	80042c0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_UART_IRQHandler+0x324>
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f996 	bl	80045c6 <UART_Transmit_IT>
    return;
 800429a:	e012      	b.n	80042c2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <HAL_UART_IRQHandler+0x34a>
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f9d7 	bl	8004664 <UART_EndTransmit_IT>
    return;
 80042b6:	e004      	b.n	80042c2 <HAL_UART_IRQHandler+0x34a>
    return;
 80042b8:	bf00      	nop
 80042ba:	e002      	b.n	80042c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80042bc:	bf00      	nop
 80042be:	e000      	b.n	80042c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80042c0:	bf00      	nop
  }
}
 80042c2:	3728      	adds	r7, #40	; 0x28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	0800459f 	.word	0x0800459f

080042cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d12a      	bne.n	8004366 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004324:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004344:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0210 	bic.w	r2, r2, #16
 8004364:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	2b01      	cmp	r3, #1
 800436c:	d106      	bne.n	800437c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff ffb2 	bl	80042de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800437a:	e002      	b.n	8004382 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7fd fbaa 	bl	8001ad6 <HAL_UART_RxCpltCallback>
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	2b01      	cmp	r3, #1
 800439e:	d108      	bne.n	80043b2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ff97 	bl	80042de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043b0:	e002      	b.n	80043b8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff ff8a 	bl	80042cc <HAL_UART_RxHalfCpltCallback>
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b21      	cmp	r3, #33	; 0x21
 80043f2:	d108      	bne.n	8004406 <UART_DMAError+0x46>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004400:	68b8      	ldr	r0, [r7, #8]
 8004402:	f000 f88b 	bl	800451c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b22      	cmp	r3, #34	; 0x22
 8004426:	d108      	bne.n	800443a <UART_DMAError+0x7a>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2200      	movs	r2, #0
 8004432:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004434:	68b8      	ldr	r0, [r7, #8]
 8004436:	f000 f886 	bl	8004546 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004446:	68b8      	ldr	r0, [r7, #8]
 8004448:	f7fd fb3c 	bl	8001ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2222      	movs	r2, #34	; 0x22
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	4a23      	ldr	r2, [pc, #140]	; (8004510 <UART_Start_Receive_DMA+0xbc>)
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <UART_Start_Receive_DMA+0xc0>)
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	4a21      	ldr	r2, [pc, #132]	; (8004518 <UART_Start_Receive_DMA+0xc4>)
 8004492:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	2200      	movs	r2, #0
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	f7fd ff30 	bl	8002318 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004504:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	080042f5 	.word	0x080042f5
 8004514:	0800438b 	.word	0x0800438b
 8004518:	080043c1 	.word	0x080043c1

0800451c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004532:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800455c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	2b01      	cmp	r3, #1
 8004574:	d107      	bne.n	8004586 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0210 	bic.w	r2, r2, #16
 8004584:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7fd fa83 	bl	8001ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b21      	cmp	r3, #33	; 0x21
 80045d8:	d13e      	bne.n	8004658 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e2:	d114      	bne.n	800460e <UART_Transmit_IT+0x48>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d110      	bne.n	800460e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004600:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	1c9a      	adds	r2, r3, #2
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]
 800460c:	e008      	b.n	8004620 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	1c59      	adds	r1, r3, #1
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6211      	str	r1, [r2, #32]
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4619      	mov	r1, r3
 800462e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10f      	bne.n	8004654 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004642:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004652:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fd fa2f 	bl	8001ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b22      	cmp	r3, #34	; 0x22
 80046a6:	f040 8099 	bne.w	80047dc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d117      	bne.n	80046e4 <UART_Receive_IT+0x50>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d113      	bne.n	80046e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	1c9a      	adds	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
 80046e2:	e026      	b.n	8004732 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d007      	beq.n	8004708 <UART_Receive_IT+0x74>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <UART_Receive_IT+0x82>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e008      	b.n	8004728 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004722:	b2da      	uxtb	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29b      	uxth	r3, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4619      	mov	r1, r3
 8004740:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004742:	2b00      	cmp	r3, #0
 8004744:	d148      	bne.n	80047d8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0220 	bic.w	r2, r2, #32
 8004754:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004764:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	2b01      	cmp	r3, #1
 8004784:	d123      	bne.n	80047ce <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0210 	bic.w	r2, r2, #16
 800479a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d10a      	bne.n	80047c0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fd89 	bl	80042de <HAL_UARTEx_RxEventCallback>
 80047cc:	e002      	b.n	80047d4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd f981 	bl	8001ad6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e002      	b.n	80047de <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004822:	f023 030c 	bic.w	r3, r3, #12
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	430b      	orrs	r3, r1
 800482e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <UART_SetConfig+0x114>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d103      	bne.n	8004858 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7ff fa30 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	e002      	b.n	800485e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7ff fa18 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 800485c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009a      	lsls	r2, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	4a22      	ldr	r2, [pc, #136]	; (8004900 <UART_SetConfig+0x118>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	0119      	lsls	r1, r3, #4
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009a      	lsls	r2, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	fbb2 f2f3 	udiv	r2, r2, r3
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <UART_SetConfig+0x118>)
 8004896:	fba3 0302 	umull	r0, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2064      	movs	r0, #100	; 0x64
 800489e:	fb00 f303 	mul.w	r3, r0, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	3332      	adds	r3, #50	; 0x32
 80048a8:	4a15      	ldr	r2, [pc, #84]	; (8004900 <UART_SetConfig+0x118>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b4:	4419      	add	r1, r3
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009a      	lsls	r2, r3, #2
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <UART_SetConfig+0x118>)
 80048ce:	fba3 0302 	umull	r0, r3, r3, r2
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	2064      	movs	r0, #100	; 0x64
 80048d6:	fb00 f303 	mul.w	r3, r0, r3
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	3332      	adds	r3, #50	; 0x32
 80048e0:	4a07      	ldr	r2, [pc, #28]	; (8004900 <UART_SetConfig+0x118>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	440a      	add	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40013800 	.word	0x40013800
 8004900:	51eb851f 	.word	0x51eb851f

08004904 <main>:
#include "main.h"



int main(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
	hwInit();
 8004908:	f7fd fa74 	bl	8001df4 <hwInit>
	apInit();
 800490c:	f7fc f8bc 	bl	8000a88 <apInit>
//	apUartTest();
//	apGpioTest();
//  apDFPlayerTest();
//	apNRF24L01RxTest();
//	apNRF24L01TxTest();
	apCLCDTest();
 8004910:	f7fc f8c8 	bl	8000aa4 <apCLCDTest>

	return 0;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <__errno>:
 800491c:	4b01      	ldr	r3, [pc, #4]	; (8004924 <__errno+0x8>)
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000020 	.word	0x20000020

08004928 <__libc_init_array>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	2600      	movs	r6, #0
 800492c:	4d0c      	ldr	r5, [pc, #48]	; (8004960 <__libc_init_array+0x38>)
 800492e:	4c0d      	ldr	r4, [pc, #52]	; (8004964 <__libc_init_array+0x3c>)
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	42a6      	cmp	r6, r4
 8004936:	d109      	bne.n	800494c <__libc_init_array+0x24>
 8004938:	f002 febc 	bl	80076b4 <_init>
 800493c:	2600      	movs	r6, #0
 800493e:	4d0a      	ldr	r5, [pc, #40]	; (8004968 <__libc_init_array+0x40>)
 8004940:	4c0a      	ldr	r4, [pc, #40]	; (800496c <__libc_init_array+0x44>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	42a6      	cmp	r6, r4
 8004948:	d105      	bne.n	8004956 <__libc_init_array+0x2e>
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004950:	4798      	blx	r3
 8004952:	3601      	adds	r6, #1
 8004954:	e7ee      	b.n	8004934 <__libc_init_array+0xc>
 8004956:	f855 3b04 	ldr.w	r3, [r5], #4
 800495a:	4798      	blx	r3
 800495c:	3601      	adds	r6, #1
 800495e:	e7f2      	b.n	8004946 <__libc_init_array+0x1e>
 8004960:	08007dc4 	.word	0x08007dc4
 8004964:	08007dc4 	.word	0x08007dc4
 8004968:	08007dc4 	.word	0x08007dc4
 800496c:	08007dc8 	.word	0x08007dc8

08004970 <memset>:
 8004970:	4603      	mov	r3, r0
 8004972:	4402      	add	r2, r0
 8004974:	4293      	cmp	r3, r2
 8004976:	d100      	bne.n	800497a <memset+0xa>
 8004978:	4770      	bx	lr
 800497a:	f803 1b01 	strb.w	r1, [r3], #1
 800497e:	e7f9      	b.n	8004974 <memset+0x4>

08004980 <__cvt>:
 8004980:	2b00      	cmp	r3, #0
 8004982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004986:	461f      	mov	r7, r3
 8004988:	bfbb      	ittet	lt
 800498a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800498e:	461f      	movlt	r7, r3
 8004990:	2300      	movge	r3, #0
 8004992:	232d      	movlt	r3, #45	; 0x2d
 8004994:	b088      	sub	sp, #32
 8004996:	4614      	mov	r4, r2
 8004998:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800499a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800499c:	7013      	strb	r3, [r2, #0]
 800499e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80049a4:	f023 0820 	bic.w	r8, r3, #32
 80049a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ac:	d005      	beq.n	80049ba <__cvt+0x3a>
 80049ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049b2:	d100      	bne.n	80049b6 <__cvt+0x36>
 80049b4:	3501      	adds	r5, #1
 80049b6:	2302      	movs	r3, #2
 80049b8:	e000      	b.n	80049bc <__cvt+0x3c>
 80049ba:	2303      	movs	r3, #3
 80049bc:	aa07      	add	r2, sp, #28
 80049be:	9204      	str	r2, [sp, #16]
 80049c0:	aa06      	add	r2, sp, #24
 80049c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049c6:	e9cd 3500 	strd	r3, r5, [sp]
 80049ca:	4622      	mov	r2, r4
 80049cc:	463b      	mov	r3, r7
 80049ce:	f000 fce7 	bl	80053a0 <_dtoa_r>
 80049d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049d6:	4606      	mov	r6, r0
 80049d8:	d102      	bne.n	80049e0 <__cvt+0x60>
 80049da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049dc:	07db      	lsls	r3, r3, #31
 80049de:	d522      	bpl.n	8004a26 <__cvt+0xa6>
 80049e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049e4:	eb06 0905 	add.w	r9, r6, r5
 80049e8:	d110      	bne.n	8004a0c <__cvt+0x8c>
 80049ea:	7833      	ldrb	r3, [r6, #0]
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d10a      	bne.n	8004a06 <__cvt+0x86>
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	4620      	mov	r0, r4
 80049f6:	4639      	mov	r1, r7
 80049f8:	f7fb ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80049fc:	b918      	cbnz	r0, 8004a06 <__cvt+0x86>
 80049fe:	f1c5 0501 	rsb	r5, r5, #1
 8004a02:	f8ca 5000 	str.w	r5, [sl]
 8004a06:	f8da 3000 	ldr.w	r3, [sl]
 8004a0a:	4499      	add	r9, r3
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4620      	mov	r0, r4
 8004a12:	4639      	mov	r1, r7
 8004a14:	f7fb ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004a18:	b108      	cbz	r0, 8004a1e <__cvt+0x9e>
 8004a1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a1e:	2230      	movs	r2, #48	; 0x30
 8004a20:	9b07      	ldr	r3, [sp, #28]
 8004a22:	454b      	cmp	r3, r9
 8004a24:	d307      	bcc.n	8004a36 <__cvt+0xb6>
 8004a26:	4630      	mov	r0, r6
 8004a28:	9b07      	ldr	r3, [sp, #28]
 8004a2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a2c:	1b9b      	subs	r3, r3, r6
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	b008      	add	sp, #32
 8004a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a36:	1c59      	adds	r1, r3, #1
 8004a38:	9107      	str	r1, [sp, #28]
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	e7f0      	b.n	8004a20 <__cvt+0xa0>

08004a3e <__exponent>:
 8004a3e:	4603      	mov	r3, r0
 8004a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a42:	2900      	cmp	r1, #0
 8004a44:	f803 2b02 	strb.w	r2, [r3], #2
 8004a48:	bfb6      	itet	lt
 8004a4a:	222d      	movlt	r2, #45	; 0x2d
 8004a4c:	222b      	movge	r2, #43	; 0x2b
 8004a4e:	4249      	neglt	r1, r1
 8004a50:	2909      	cmp	r1, #9
 8004a52:	7042      	strb	r2, [r0, #1]
 8004a54:	dd2b      	ble.n	8004aae <__exponent+0x70>
 8004a56:	f10d 0407 	add.w	r4, sp, #7
 8004a5a:	46a4      	mov	ip, r4
 8004a5c:	270a      	movs	r7, #10
 8004a5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a62:	460a      	mov	r2, r1
 8004a64:	46a6      	mov	lr, r4
 8004a66:	fb07 1516 	mls	r5, r7, r6, r1
 8004a6a:	2a63      	cmp	r2, #99	; 0x63
 8004a6c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004a70:	4631      	mov	r1, r6
 8004a72:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a7a:	dcf0      	bgt.n	8004a5e <__exponent+0x20>
 8004a7c:	3130      	adds	r1, #48	; 0x30
 8004a7e:	f1ae 0502 	sub.w	r5, lr, #2
 8004a82:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a86:	4629      	mov	r1, r5
 8004a88:	1c44      	adds	r4, r0, #1
 8004a8a:	4561      	cmp	r1, ip
 8004a8c:	d30a      	bcc.n	8004aa4 <__exponent+0x66>
 8004a8e:	f10d 0209 	add.w	r2, sp, #9
 8004a92:	eba2 020e 	sub.w	r2, r2, lr
 8004a96:	4565      	cmp	r5, ip
 8004a98:	bf88      	it	hi
 8004a9a:	2200      	movhi	r2, #0
 8004a9c:	4413      	add	r3, r2
 8004a9e:	1a18      	subs	r0, r3, r0
 8004aa0:	b003      	add	sp, #12
 8004aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aa8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004aac:	e7ed      	b.n	8004a8a <__exponent+0x4c>
 8004aae:	2330      	movs	r3, #48	; 0x30
 8004ab0:	3130      	adds	r1, #48	; 0x30
 8004ab2:	7083      	strb	r3, [r0, #2]
 8004ab4:	70c1      	strb	r1, [r0, #3]
 8004ab6:	1d03      	adds	r3, r0, #4
 8004ab8:	e7f1      	b.n	8004a9e <__exponent+0x60>
	...

08004abc <_printf_float>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	b091      	sub	sp, #68	; 0x44
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ac8:	4616      	mov	r6, r2
 8004aca:	461f      	mov	r7, r3
 8004acc:	4605      	mov	r5, r0
 8004ace:	f001 fa55 	bl	8005f7c <_localeconv_r>
 8004ad2:	6803      	ldr	r3, [r0, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad8:	f7fb fb3a 	bl	8000150 <strlen>
 8004adc:	2300      	movs	r3, #0
 8004ade:	930e      	str	r3, [sp, #56]	; 0x38
 8004ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	f023 0307 	bic.w	r3, r3, #7
 8004aec:	f103 0208 	add.w	r2, r3, #8
 8004af0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004af4:	f8d4 b000 	ldr.w	fp, [r4]
 8004af8:	f8c8 2000 	str.w	r2, [r8]
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b04:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004b08:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	4640      	mov	r0, r8
 8004b14:	4b9c      	ldr	r3, [pc, #624]	; (8004d88 <_printf_float+0x2cc>)
 8004b16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b18:	f7fb ff78 	bl	8000a0c <__aeabi_dcmpun>
 8004b1c:	bb70      	cbnz	r0, 8004b7c <_printf_float+0xc0>
 8004b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b22:	4640      	mov	r0, r8
 8004b24:	4b98      	ldr	r3, [pc, #608]	; (8004d88 <_printf_float+0x2cc>)
 8004b26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b28:	f7fb ff52 	bl	80009d0 <__aeabi_dcmple>
 8004b2c:	bb30      	cbnz	r0, 8004b7c <_printf_float+0xc0>
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	4640      	mov	r0, r8
 8004b34:	4651      	mov	r1, sl
 8004b36:	f7fb ff41 	bl	80009bc <__aeabi_dcmplt>
 8004b3a:	b110      	cbz	r0, 8004b42 <_printf_float+0x86>
 8004b3c:	232d      	movs	r3, #45	; 0x2d
 8004b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b42:	4b92      	ldr	r3, [pc, #584]	; (8004d8c <_printf_float+0x2d0>)
 8004b44:	4892      	ldr	r0, [pc, #584]	; (8004d90 <_printf_float+0x2d4>)
 8004b46:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b4a:	bf94      	ite	ls
 8004b4c:	4698      	movls	r8, r3
 8004b4e:	4680      	movhi	r8, r0
 8004b50:	2303      	movs	r3, #3
 8004b52:	f04f 0a00 	mov.w	sl, #0
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	f02b 0304 	bic.w	r3, fp, #4
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	4633      	mov	r3, r6
 8004b60:	4621      	mov	r1, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	9700      	str	r7, [sp, #0]
 8004b66:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b68:	f000 f9d4 	bl	8004f14 <_printf_common>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f040 8090 	bne.w	8004c92 <_printf_float+0x1d6>
 8004b72:	f04f 30ff 	mov.w	r0, #4294967295
 8004b76:	b011      	add	sp, #68	; 0x44
 8004b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	4653      	mov	r3, sl
 8004b80:	4640      	mov	r0, r8
 8004b82:	4651      	mov	r1, sl
 8004b84:	f7fb ff42 	bl	8000a0c <__aeabi_dcmpun>
 8004b88:	b148      	cbz	r0, 8004b9e <_printf_float+0xe2>
 8004b8a:	f1ba 0f00 	cmp.w	sl, #0
 8004b8e:	bfb8      	it	lt
 8004b90:	232d      	movlt	r3, #45	; 0x2d
 8004b92:	4880      	ldr	r0, [pc, #512]	; (8004d94 <_printf_float+0x2d8>)
 8004b94:	bfb8      	it	lt
 8004b96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b9a:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <_printf_float+0x2dc>)
 8004b9c:	e7d3      	b.n	8004b46 <_printf_float+0x8a>
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	d142      	bne.n	8004c2e <_printf_float+0x172>
 8004ba8:	2306      	movs	r3, #6
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	9206      	str	r2, [sp, #24]
 8004bb0:	aa0e      	add	r2, sp, #56	; 0x38
 8004bb2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004bb6:	aa0d      	add	r2, sp, #52	; 0x34
 8004bb8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004bbc:	9203      	str	r2, [sp, #12]
 8004bbe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004bc2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	4642      	mov	r2, r8
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	4628      	mov	r0, r5
 8004bd0:	4653      	mov	r3, sl
 8004bd2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004bd4:	f7ff fed4 	bl	8004980 <__cvt>
 8004bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bda:	4680      	mov	r8, r0
 8004bdc:	2947      	cmp	r1, #71	; 0x47
 8004bde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004be0:	d108      	bne.n	8004bf4 <_printf_float+0x138>
 8004be2:	1cc8      	adds	r0, r1, #3
 8004be4:	db02      	blt.n	8004bec <_printf_float+0x130>
 8004be6:	6863      	ldr	r3, [r4, #4]
 8004be8:	4299      	cmp	r1, r3
 8004bea:	dd40      	ble.n	8004c6e <_printf_float+0x1b2>
 8004bec:	f1a9 0902 	sub.w	r9, r9, #2
 8004bf0:	fa5f f989 	uxtb.w	r9, r9
 8004bf4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bf8:	d81f      	bhi.n	8004c3a <_printf_float+0x17e>
 8004bfa:	464a      	mov	r2, r9
 8004bfc:	3901      	subs	r1, #1
 8004bfe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c02:	910d      	str	r1, [sp, #52]	; 0x34
 8004c04:	f7ff ff1b 	bl	8004a3e <__exponent>
 8004c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c0a:	4682      	mov	sl, r0
 8004c0c:	1813      	adds	r3, r2, r0
 8004c0e:	2a01      	cmp	r2, #1
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	dc02      	bgt.n	8004c1a <_printf_float+0x15e>
 8004c14:	6822      	ldr	r2, [r4, #0]
 8004c16:	07d2      	lsls	r2, r2, #31
 8004c18:	d501      	bpl.n	8004c1e <_printf_float+0x162>
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d09b      	beq.n	8004b5e <_printf_float+0xa2>
 8004c26:	232d      	movs	r3, #45	; 0x2d
 8004c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2c:	e797      	b.n	8004b5e <_printf_float+0xa2>
 8004c2e:	2947      	cmp	r1, #71	; 0x47
 8004c30:	d1bc      	bne.n	8004bac <_printf_float+0xf0>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ba      	bne.n	8004bac <_printf_float+0xf0>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e7b7      	b.n	8004baa <_printf_float+0xee>
 8004c3a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c3e:	d118      	bne.n	8004c72 <_printf_float+0x1b6>
 8004c40:	2900      	cmp	r1, #0
 8004c42:	6863      	ldr	r3, [r4, #4]
 8004c44:	dd0b      	ble.n	8004c5e <_printf_float+0x1a2>
 8004c46:	6121      	str	r1, [r4, #16]
 8004c48:	b913      	cbnz	r3, 8004c50 <_printf_float+0x194>
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	07d0      	lsls	r0, r2, #31
 8004c4e:	d502      	bpl.n	8004c56 <_printf_float+0x19a>
 8004c50:	3301      	adds	r3, #1
 8004c52:	440b      	add	r3, r1
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	f04f 0a00 	mov.w	sl, #0
 8004c5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c5c:	e7df      	b.n	8004c1e <_printf_float+0x162>
 8004c5e:	b913      	cbnz	r3, 8004c66 <_printf_float+0x1aa>
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	07d2      	lsls	r2, r2, #31
 8004c64:	d501      	bpl.n	8004c6a <_printf_float+0x1ae>
 8004c66:	3302      	adds	r3, #2
 8004c68:	e7f4      	b.n	8004c54 <_printf_float+0x198>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e7f2      	b.n	8004c54 <_printf_float+0x198>
 8004c6e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c74:	4299      	cmp	r1, r3
 8004c76:	db05      	blt.n	8004c84 <_printf_float+0x1c8>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	6121      	str	r1, [r4, #16]
 8004c7c:	07d8      	lsls	r0, r3, #31
 8004c7e:	d5ea      	bpl.n	8004c56 <_printf_float+0x19a>
 8004c80:	1c4b      	adds	r3, r1, #1
 8004c82:	e7e7      	b.n	8004c54 <_printf_float+0x198>
 8004c84:	2900      	cmp	r1, #0
 8004c86:	bfcc      	ite	gt
 8004c88:	2201      	movgt	r2, #1
 8004c8a:	f1c1 0202 	rsble	r2, r1, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	e7e0      	b.n	8004c54 <_printf_float+0x198>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	055a      	lsls	r2, r3, #21
 8004c96:	d407      	bmi.n	8004ca8 <_printf_float+0x1ec>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d12b      	bne.n	8004cfe <_printf_float+0x242>
 8004ca6:	e764      	b.n	8004b72 <_printf_float+0xb6>
 8004ca8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cac:	f240 80dd 	bls.w	8004e6a <_printf_float+0x3ae>
 8004cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f7fb fe76 	bl	80009a8 <__aeabi_dcmpeq>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d033      	beq.n	8004d28 <_printf_float+0x26c>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <_printf_float+0x2e0>)
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f af51 	beq.w	8004b72 <_printf_float+0xb6>
 8004cd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	db02      	blt.n	8004cde <_printf_float+0x222>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07d8      	lsls	r0, r3, #31
 8004cdc:	d50f      	bpl.n	8004cfe <_printf_float+0x242>
 8004cde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f af42 	beq.w	8004b72 <_printf_float+0xb6>
 8004cee:	f04f 0800 	mov.w	r8, #0
 8004cf2:	f104 091a 	add.w	r9, r4, #26
 8004cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	4543      	cmp	r3, r8
 8004cfc:	dc09      	bgt.n	8004d12 <_printf_float+0x256>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	079b      	lsls	r3, r3, #30
 8004d02:	f100 8102 	bmi.w	8004f0a <_printf_float+0x44e>
 8004d06:	68e0      	ldr	r0, [r4, #12]
 8004d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d0a:	4298      	cmp	r0, r3
 8004d0c:	bfb8      	it	lt
 8004d0e:	4618      	movlt	r0, r3
 8004d10:	e731      	b.n	8004b76 <_printf_float+0xba>
 8004d12:	2301      	movs	r3, #1
 8004d14:	464a      	mov	r2, r9
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f af28 	beq.w	8004b72 <_printf_float+0xb6>
 8004d22:	f108 0801 	add.w	r8, r8, #1
 8004d26:	e7e6      	b.n	8004cf6 <_printf_float+0x23a>
 8004d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dc38      	bgt.n	8004da0 <_printf_float+0x2e4>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4631      	mov	r1, r6
 8004d32:	4628      	mov	r0, r5
 8004d34:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <_printf_float+0x2e0>)
 8004d36:	47b8      	blx	r7
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f43f af1a 	beq.w	8004b72 <_printf_float+0xb6>
 8004d3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d102      	bne.n	8004d4c <_printf_float+0x290>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	07d9      	lsls	r1, r3, #31
 8004d4a:	d5d8      	bpl.n	8004cfe <_printf_float+0x242>
 8004d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d50:	4631      	mov	r1, r6
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	f43f af0b 	beq.w	8004b72 <_printf_float+0xb6>
 8004d5c:	f04f 0900 	mov.w	r9, #0
 8004d60:	f104 0a1a 	add.w	sl, r4, #26
 8004d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d66:	425b      	negs	r3, r3
 8004d68:	454b      	cmp	r3, r9
 8004d6a:	dc01      	bgt.n	8004d70 <_printf_float+0x2b4>
 8004d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d6e:	e794      	b.n	8004c9a <_printf_float+0x1de>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4652      	mov	r2, sl
 8004d74:	4631      	mov	r1, r6
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f aef9 	beq.w	8004b72 <_printf_float+0xb6>
 8004d80:	f109 0901 	add.w	r9, r9, #1
 8004d84:	e7ee      	b.n	8004d64 <_printf_float+0x2a8>
 8004d86:	bf00      	nop
 8004d88:	7fefffff 	.word	0x7fefffff
 8004d8c:	080079e4 	.word	0x080079e4
 8004d90:	080079e8 	.word	0x080079e8
 8004d94:	080079f0 	.word	0x080079f0
 8004d98:	080079ec 	.word	0x080079ec
 8004d9c:	080079f4 	.word	0x080079f4
 8004da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004da2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004da4:	429a      	cmp	r2, r3
 8004da6:	bfa8      	it	ge
 8004da8:	461a      	movge	r2, r3
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	4691      	mov	r9, r2
 8004dae:	dc37      	bgt.n	8004e20 <_printf_float+0x364>
 8004db0:	f04f 0b00 	mov.w	fp, #0
 8004db4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004db8:	f104 021a 	add.w	r2, r4, #26
 8004dbc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004dc0:	ebaa 0309 	sub.w	r3, sl, r9
 8004dc4:	455b      	cmp	r3, fp
 8004dc6:	dc33      	bgt.n	8004e30 <_printf_float+0x374>
 8004dc8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	db3b      	blt.n	8004e48 <_printf_float+0x38c>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07da      	lsls	r2, r3, #31
 8004dd4:	d438      	bmi.n	8004e48 <_printf_float+0x38c>
 8004dd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dda:	eba2 030a 	sub.w	r3, r2, sl
 8004dde:	eba2 0901 	sub.w	r9, r2, r1
 8004de2:	4599      	cmp	r9, r3
 8004de4:	bfa8      	it	ge
 8004de6:	4699      	movge	r9, r3
 8004de8:	f1b9 0f00 	cmp.w	r9, #0
 8004dec:	dc34      	bgt.n	8004e58 <_printf_float+0x39c>
 8004dee:	f04f 0800 	mov.w	r8, #0
 8004df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df6:	f104 0a1a 	add.w	sl, r4, #26
 8004dfa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	eba3 0309 	sub.w	r3, r3, r9
 8004e04:	4543      	cmp	r3, r8
 8004e06:	f77f af7a 	ble.w	8004cfe <_printf_float+0x242>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f aeac 	beq.w	8004b72 <_printf_float+0xb6>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	e7ec      	b.n	8004dfa <_printf_float+0x33e>
 8004e20:	4613      	mov	r3, r2
 8004e22:	4631      	mov	r1, r6
 8004e24:	4642      	mov	r2, r8
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d1c0      	bne.n	8004db0 <_printf_float+0x2f4>
 8004e2e:	e6a0      	b.n	8004b72 <_printf_float+0xb6>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f ae99 	beq.w	8004b72 <_printf_float+0xb6>
 8004e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e42:	f10b 0b01 	add.w	fp, fp, #1
 8004e46:	e7b9      	b.n	8004dbc <_printf_float+0x300>
 8004e48:	4631      	mov	r1, r6
 8004e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	d1bf      	bne.n	8004dd6 <_printf_float+0x31a>
 8004e56:	e68c      	b.n	8004b72 <_printf_float+0xb6>
 8004e58:	464b      	mov	r3, r9
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	eb08 020a 	add.w	r2, r8, sl
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	d1c2      	bne.n	8004dee <_printf_float+0x332>
 8004e68:	e683      	b.n	8004b72 <_printf_float+0xb6>
 8004e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e6c:	2a01      	cmp	r2, #1
 8004e6e:	dc01      	bgt.n	8004e74 <_printf_float+0x3b8>
 8004e70:	07db      	lsls	r3, r3, #31
 8004e72:	d537      	bpl.n	8004ee4 <_printf_float+0x428>
 8004e74:	2301      	movs	r3, #1
 8004e76:	4642      	mov	r2, r8
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f43f ae77 	beq.w	8004b72 <_printf_float+0xb6>
 8004e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f43f ae6f 	beq.w	8004b72 <_printf_float+0xb6>
 8004e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f7fb fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea0:	b9d8      	cbnz	r0, 8004eda <_printf_float+0x41e>
 8004ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ea4:	f108 0201 	add.w	r2, r8, #1
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d10e      	bne.n	8004ed2 <_printf_float+0x416>
 8004eb4:	e65d      	b.n	8004b72 <_printf_float+0xb6>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	464a      	mov	r2, r9
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f43f ae56 	beq.w	8004b72 <_printf_float+0xb6>
 8004ec6:	f108 0801 	add.w	r8, r8, #1
 8004eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	4543      	cmp	r3, r8
 8004ed0:	dcf1      	bgt.n	8004eb6 <_printf_float+0x3fa>
 8004ed2:	4653      	mov	r3, sl
 8004ed4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ed8:	e6e0      	b.n	8004c9c <_printf_float+0x1e0>
 8004eda:	f04f 0800 	mov.w	r8, #0
 8004ede:	f104 091a 	add.w	r9, r4, #26
 8004ee2:	e7f2      	b.n	8004eca <_printf_float+0x40e>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	e7df      	b.n	8004eaa <_printf_float+0x3ee>
 8004eea:	2301      	movs	r3, #1
 8004eec:	464a      	mov	r2, r9
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f43f ae3c 	beq.w	8004b72 <_printf_float+0xb6>
 8004efa:	f108 0801 	add.w	r8, r8, #1
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f02:	1a5b      	subs	r3, r3, r1
 8004f04:	4543      	cmp	r3, r8
 8004f06:	dcf0      	bgt.n	8004eea <_printf_float+0x42e>
 8004f08:	e6fd      	b.n	8004d06 <_printf_float+0x24a>
 8004f0a:	f04f 0800 	mov.w	r8, #0
 8004f0e:	f104 0919 	add.w	r9, r4, #25
 8004f12:	e7f4      	b.n	8004efe <_printf_float+0x442>

08004f14 <_printf_common>:
 8004f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f18:	4616      	mov	r6, r2
 8004f1a:	4699      	mov	r9, r3
 8004f1c:	688a      	ldr	r2, [r1, #8]
 8004f1e:	690b      	ldr	r3, [r1, #16]
 8004f20:	4607      	mov	r7, r0
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bfb8      	it	lt
 8004f26:	4613      	movlt	r3, r2
 8004f28:	6033      	str	r3, [r6, #0]
 8004f2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f2e:	460c      	mov	r4, r1
 8004f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f34:	b10a      	cbz	r2, 8004f3a <_printf_common+0x26>
 8004f36:	3301      	adds	r3, #1
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	0699      	lsls	r1, r3, #26
 8004f3e:	bf42      	ittt	mi
 8004f40:	6833      	ldrmi	r3, [r6, #0]
 8004f42:	3302      	addmi	r3, #2
 8004f44:	6033      	strmi	r3, [r6, #0]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	f015 0506 	ands.w	r5, r5, #6
 8004f4c:	d106      	bne.n	8004f5c <_printf_common+0x48>
 8004f4e:	f104 0a19 	add.w	sl, r4, #25
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	6832      	ldr	r2, [r6, #0]
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	dc28      	bgt.n	8004fae <_printf_common+0x9a>
 8004f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f60:	1e13      	subs	r3, r2, #0
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	bf18      	it	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	0692      	lsls	r2, r2, #26
 8004f6a:	d42d      	bmi.n	8004fc8 <_printf_common+0xb4>
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f74:	47c0      	blx	r8
 8004f76:	3001      	adds	r0, #1
 8004f78:	d020      	beq.n	8004fbc <_printf_common+0xa8>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	68e5      	ldr	r5, [r4, #12]
 8004f7e:	f003 0306 	and.w	r3, r3, #6
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf18      	it	ne
 8004f86:	2500      	movne	r5, #0
 8004f88:	6832      	ldr	r2, [r6, #0]
 8004f8a:	f04f 0600 	mov.w	r6, #0
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	bf08      	it	eq
 8004f92:	1aad      	subeq	r5, r5, r2
 8004f94:	6922      	ldr	r2, [r4, #16]
 8004f96:	bf08      	it	eq
 8004f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bfc4      	itt	gt
 8004fa0:	1a9b      	subgt	r3, r3, r2
 8004fa2:	18ed      	addgt	r5, r5, r3
 8004fa4:	341a      	adds	r4, #26
 8004fa6:	42b5      	cmp	r5, r6
 8004fa8:	d11a      	bne.n	8004fe0 <_printf_common+0xcc>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e008      	b.n	8004fc0 <_printf_common+0xac>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	47c0      	blx	r8
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d103      	bne.n	8004fc4 <_printf_common+0xb0>
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	e7c4      	b.n	8004f52 <_printf_common+0x3e>
 8004fc8:	2030      	movs	r0, #48	; 0x30
 8004fca:	18e1      	adds	r1, r4, r3
 8004fcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd6:	4422      	add	r2, r4
 8004fd8:	3302      	adds	r3, #2
 8004fda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fde:	e7c5      	b.n	8004f6c <_printf_common+0x58>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d0e6      	beq.n	8004fbc <_printf_common+0xa8>
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7d9      	b.n	8004fa6 <_printf_common+0x92>
	...

08004ff4 <_printf_i>:
 8004ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	7e27      	ldrb	r7, [r4, #24]
 8004ffc:	4691      	mov	r9, r2
 8004ffe:	2f78      	cmp	r7, #120	; 0x78
 8005000:	4680      	mov	r8, r0
 8005002:	469a      	mov	sl, r3
 8005004:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005006:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800500a:	d807      	bhi.n	800501c <_printf_i+0x28>
 800500c:	2f62      	cmp	r7, #98	; 0x62
 800500e:	d80a      	bhi.n	8005026 <_printf_i+0x32>
 8005010:	2f00      	cmp	r7, #0
 8005012:	f000 80d9 	beq.w	80051c8 <_printf_i+0x1d4>
 8005016:	2f58      	cmp	r7, #88	; 0x58
 8005018:	f000 80a4 	beq.w	8005164 <_printf_i+0x170>
 800501c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005024:	e03a      	b.n	800509c <_printf_i+0xa8>
 8005026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800502a:	2b15      	cmp	r3, #21
 800502c:	d8f6      	bhi.n	800501c <_printf_i+0x28>
 800502e:	a001      	add	r0, pc, #4	; (adr r0, 8005034 <_printf_i+0x40>)
 8005030:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005034:	0800508d 	.word	0x0800508d
 8005038:	080050a1 	.word	0x080050a1
 800503c:	0800501d 	.word	0x0800501d
 8005040:	0800501d 	.word	0x0800501d
 8005044:	0800501d 	.word	0x0800501d
 8005048:	0800501d 	.word	0x0800501d
 800504c:	080050a1 	.word	0x080050a1
 8005050:	0800501d 	.word	0x0800501d
 8005054:	0800501d 	.word	0x0800501d
 8005058:	0800501d 	.word	0x0800501d
 800505c:	0800501d 	.word	0x0800501d
 8005060:	080051af 	.word	0x080051af
 8005064:	080050d1 	.word	0x080050d1
 8005068:	08005191 	.word	0x08005191
 800506c:	0800501d 	.word	0x0800501d
 8005070:	0800501d 	.word	0x0800501d
 8005074:	080051d1 	.word	0x080051d1
 8005078:	0800501d 	.word	0x0800501d
 800507c:	080050d1 	.word	0x080050d1
 8005080:	0800501d 	.word	0x0800501d
 8005084:	0800501d 	.word	0x0800501d
 8005088:	08005199 	.word	0x08005199
 800508c:	680b      	ldr	r3, [r1, #0]
 800508e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005092:	1d1a      	adds	r2, r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	600a      	str	r2, [r1, #0]
 8005098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800509c:	2301      	movs	r3, #1
 800509e:	e0a4      	b.n	80051ea <_printf_i+0x1f6>
 80050a0:	6825      	ldr	r5, [r4, #0]
 80050a2:	6808      	ldr	r0, [r1, #0]
 80050a4:	062e      	lsls	r6, r5, #24
 80050a6:	f100 0304 	add.w	r3, r0, #4
 80050aa:	d50a      	bpl.n	80050c2 <_printf_i+0xce>
 80050ac:	6805      	ldr	r5, [r0, #0]
 80050ae:	600b      	str	r3, [r1, #0]
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	da03      	bge.n	80050bc <_printf_i+0xc8>
 80050b4:	232d      	movs	r3, #45	; 0x2d
 80050b6:	426d      	negs	r5, r5
 80050b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050bc:	230a      	movs	r3, #10
 80050be:	485e      	ldr	r0, [pc, #376]	; (8005238 <_printf_i+0x244>)
 80050c0:	e019      	b.n	80050f6 <_printf_i+0x102>
 80050c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050c6:	6805      	ldr	r5, [r0, #0]
 80050c8:	600b      	str	r3, [r1, #0]
 80050ca:	bf18      	it	ne
 80050cc:	b22d      	sxthne	r5, r5
 80050ce:	e7ef      	b.n	80050b0 <_printf_i+0xbc>
 80050d0:	680b      	ldr	r3, [r1, #0]
 80050d2:	6825      	ldr	r5, [r4, #0]
 80050d4:	1d18      	adds	r0, r3, #4
 80050d6:	6008      	str	r0, [r1, #0]
 80050d8:	0628      	lsls	r0, r5, #24
 80050da:	d501      	bpl.n	80050e0 <_printf_i+0xec>
 80050dc:	681d      	ldr	r5, [r3, #0]
 80050de:	e002      	b.n	80050e6 <_printf_i+0xf2>
 80050e0:	0669      	lsls	r1, r5, #25
 80050e2:	d5fb      	bpl.n	80050dc <_printf_i+0xe8>
 80050e4:	881d      	ldrh	r5, [r3, #0]
 80050e6:	2f6f      	cmp	r7, #111	; 0x6f
 80050e8:	bf0c      	ite	eq
 80050ea:	2308      	moveq	r3, #8
 80050ec:	230a      	movne	r3, #10
 80050ee:	4852      	ldr	r0, [pc, #328]	; (8005238 <_printf_i+0x244>)
 80050f0:	2100      	movs	r1, #0
 80050f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050f6:	6866      	ldr	r6, [r4, #4]
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	bfa8      	it	ge
 80050fc:	6821      	ldrge	r1, [r4, #0]
 80050fe:	60a6      	str	r6, [r4, #8]
 8005100:	bfa4      	itt	ge
 8005102:	f021 0104 	bicge.w	r1, r1, #4
 8005106:	6021      	strge	r1, [r4, #0]
 8005108:	b90d      	cbnz	r5, 800510e <_printf_i+0x11a>
 800510a:	2e00      	cmp	r6, #0
 800510c:	d04d      	beq.n	80051aa <_printf_i+0x1b6>
 800510e:	4616      	mov	r6, r2
 8005110:	fbb5 f1f3 	udiv	r1, r5, r3
 8005114:	fb03 5711 	mls	r7, r3, r1, r5
 8005118:	5dc7      	ldrb	r7, [r0, r7]
 800511a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800511e:	462f      	mov	r7, r5
 8005120:	42bb      	cmp	r3, r7
 8005122:	460d      	mov	r5, r1
 8005124:	d9f4      	bls.n	8005110 <_printf_i+0x11c>
 8005126:	2b08      	cmp	r3, #8
 8005128:	d10b      	bne.n	8005142 <_printf_i+0x14e>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	07df      	lsls	r7, r3, #31
 800512e:	d508      	bpl.n	8005142 <_printf_i+0x14e>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	6861      	ldr	r1, [r4, #4]
 8005134:	4299      	cmp	r1, r3
 8005136:	bfde      	ittt	le
 8005138:	2330      	movle	r3, #48	; 0x30
 800513a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800513e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005142:	1b92      	subs	r2, r2, r6
 8005144:	6122      	str	r2, [r4, #16]
 8005146:	464b      	mov	r3, r9
 8005148:	4621      	mov	r1, r4
 800514a:	4640      	mov	r0, r8
 800514c:	f8cd a000 	str.w	sl, [sp]
 8005150:	aa03      	add	r2, sp, #12
 8005152:	f7ff fedf 	bl	8004f14 <_printf_common>
 8005156:	3001      	adds	r0, #1
 8005158:	d14c      	bne.n	80051f4 <_printf_i+0x200>
 800515a:	f04f 30ff 	mov.w	r0, #4294967295
 800515e:	b004      	add	sp, #16
 8005160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005164:	4834      	ldr	r0, [pc, #208]	; (8005238 <_printf_i+0x244>)
 8005166:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800516a:	680e      	ldr	r6, [r1, #0]
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005172:	061f      	lsls	r7, r3, #24
 8005174:	600e      	str	r6, [r1, #0]
 8005176:	d514      	bpl.n	80051a2 <_printf_i+0x1ae>
 8005178:	07d9      	lsls	r1, r3, #31
 800517a:	bf44      	itt	mi
 800517c:	f043 0320 	orrmi.w	r3, r3, #32
 8005180:	6023      	strmi	r3, [r4, #0]
 8005182:	b91d      	cbnz	r5, 800518c <_printf_i+0x198>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	2310      	movs	r3, #16
 800518e:	e7af      	b.n	80050f0 <_printf_i+0xfc>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	f043 0320 	orr.w	r3, r3, #32
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	2378      	movs	r3, #120	; 0x78
 800519a:	4828      	ldr	r0, [pc, #160]	; (800523c <_printf_i+0x248>)
 800519c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051a0:	e7e3      	b.n	800516a <_printf_i+0x176>
 80051a2:	065e      	lsls	r6, r3, #25
 80051a4:	bf48      	it	mi
 80051a6:	b2ad      	uxthmi	r5, r5
 80051a8:	e7e6      	b.n	8005178 <_printf_i+0x184>
 80051aa:	4616      	mov	r6, r2
 80051ac:	e7bb      	b.n	8005126 <_printf_i+0x132>
 80051ae:	680b      	ldr	r3, [r1, #0]
 80051b0:	6826      	ldr	r6, [r4, #0]
 80051b2:	1d1d      	adds	r5, r3, #4
 80051b4:	6960      	ldr	r0, [r4, #20]
 80051b6:	600d      	str	r5, [r1, #0]
 80051b8:	0635      	lsls	r5, r6, #24
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	d501      	bpl.n	80051c2 <_printf_i+0x1ce>
 80051be:	6018      	str	r0, [r3, #0]
 80051c0:	e002      	b.n	80051c8 <_printf_i+0x1d4>
 80051c2:	0671      	lsls	r1, r6, #25
 80051c4:	d5fb      	bpl.n	80051be <_printf_i+0x1ca>
 80051c6:	8018      	strh	r0, [r3, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	4616      	mov	r6, r2
 80051cc:	6123      	str	r3, [r4, #16]
 80051ce:	e7ba      	b.n	8005146 <_printf_i+0x152>
 80051d0:	680b      	ldr	r3, [r1, #0]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	600a      	str	r2, [r1, #0]
 80051d6:	681e      	ldr	r6, [r3, #0]
 80051d8:	2100      	movs	r1, #0
 80051da:	4630      	mov	r0, r6
 80051dc:	6862      	ldr	r2, [r4, #4]
 80051de:	f000 fed9 	bl	8005f94 <memchr>
 80051e2:	b108      	cbz	r0, 80051e8 <_printf_i+0x1f4>
 80051e4:	1b80      	subs	r0, r0, r6
 80051e6:	6060      	str	r0, [r4, #4]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	2300      	movs	r3, #0
 80051ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f2:	e7a8      	b.n	8005146 <_printf_i+0x152>
 80051f4:	4632      	mov	r2, r6
 80051f6:	4649      	mov	r1, r9
 80051f8:	4640      	mov	r0, r8
 80051fa:	6923      	ldr	r3, [r4, #16]
 80051fc:	47d0      	blx	sl
 80051fe:	3001      	adds	r0, #1
 8005200:	d0ab      	beq.n	800515a <_printf_i+0x166>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	079b      	lsls	r3, r3, #30
 8005206:	d413      	bmi.n	8005230 <_printf_i+0x23c>
 8005208:	68e0      	ldr	r0, [r4, #12]
 800520a:	9b03      	ldr	r3, [sp, #12]
 800520c:	4298      	cmp	r0, r3
 800520e:	bfb8      	it	lt
 8005210:	4618      	movlt	r0, r3
 8005212:	e7a4      	b.n	800515e <_printf_i+0x16a>
 8005214:	2301      	movs	r3, #1
 8005216:	4632      	mov	r2, r6
 8005218:	4649      	mov	r1, r9
 800521a:	4640      	mov	r0, r8
 800521c:	47d0      	blx	sl
 800521e:	3001      	adds	r0, #1
 8005220:	d09b      	beq.n	800515a <_printf_i+0x166>
 8005222:	3501      	adds	r5, #1
 8005224:	68e3      	ldr	r3, [r4, #12]
 8005226:	9903      	ldr	r1, [sp, #12]
 8005228:	1a5b      	subs	r3, r3, r1
 800522a:	42ab      	cmp	r3, r5
 800522c:	dcf2      	bgt.n	8005214 <_printf_i+0x220>
 800522e:	e7eb      	b.n	8005208 <_printf_i+0x214>
 8005230:	2500      	movs	r5, #0
 8005232:	f104 0619 	add.w	r6, r4, #25
 8005236:	e7f5      	b.n	8005224 <_printf_i+0x230>
 8005238:	080079f6 	.word	0x080079f6
 800523c:	08007a07 	.word	0x08007a07

08005240 <siprintf>:
 8005240:	b40e      	push	{r1, r2, r3}
 8005242:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005246:	b500      	push	{lr}
 8005248:	b09c      	sub	sp, #112	; 0x70
 800524a:	ab1d      	add	r3, sp, #116	; 0x74
 800524c:	9002      	str	r0, [sp, #8]
 800524e:	9006      	str	r0, [sp, #24]
 8005250:	9107      	str	r1, [sp, #28]
 8005252:	9104      	str	r1, [sp, #16]
 8005254:	4808      	ldr	r0, [pc, #32]	; (8005278 <siprintf+0x38>)
 8005256:	4909      	ldr	r1, [pc, #36]	; (800527c <siprintf+0x3c>)
 8005258:	f853 2b04 	ldr.w	r2, [r3], #4
 800525c:	9105      	str	r1, [sp, #20]
 800525e:	6800      	ldr	r0, [r0, #0]
 8005260:	a902      	add	r1, sp, #8
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	f001 fb44 	bl	80068f0 <_svfiprintf_r>
 8005268:	2200      	movs	r2, #0
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	b01c      	add	sp, #112	; 0x70
 8005270:	f85d eb04 	ldr.w	lr, [sp], #4
 8005274:	b003      	add	sp, #12
 8005276:	4770      	bx	lr
 8005278:	20000020 	.word	0x20000020
 800527c:	ffff0208 	.word	0xffff0208

08005280 <quorem>:
 8005280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	6903      	ldr	r3, [r0, #16]
 8005286:	690c      	ldr	r4, [r1, #16]
 8005288:	4607      	mov	r7, r0
 800528a:	42a3      	cmp	r3, r4
 800528c:	f2c0 8083 	blt.w	8005396 <quorem+0x116>
 8005290:	3c01      	subs	r4, #1
 8005292:	f100 0514 	add.w	r5, r0, #20
 8005296:	f101 0814 	add.w	r8, r1, #20
 800529a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052a8:	3301      	adds	r3, #1
 80052aa:	429a      	cmp	r2, r3
 80052ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80052b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052b8:	d332      	bcc.n	8005320 <quorem+0xa0>
 80052ba:	f04f 0e00 	mov.w	lr, #0
 80052be:	4640      	mov	r0, r8
 80052c0:	46ac      	mov	ip, r5
 80052c2:	46f2      	mov	sl, lr
 80052c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80052c8:	b293      	uxth	r3, r2
 80052ca:	fb06 e303 	mla	r3, r6, r3, lr
 80052ce:	0c12      	lsrs	r2, r2, #16
 80052d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052d4:	fb06 e202 	mla	r2, r6, r2, lr
 80052d8:	b29b      	uxth	r3, r3
 80052da:	ebaa 0303 	sub.w	r3, sl, r3
 80052de:	f8dc a000 	ldr.w	sl, [ip]
 80052e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052e6:	fa1f fa8a 	uxth.w	sl, sl
 80052ea:	4453      	add	r3, sl
 80052ec:	fa1f fa82 	uxth.w	sl, r2
 80052f0:	f8dc 2000 	ldr.w	r2, [ip]
 80052f4:	4581      	cmp	r9, r0
 80052f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80052fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052fe:	b29b      	uxth	r3, r3
 8005300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005304:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005308:	f84c 3b04 	str.w	r3, [ip], #4
 800530c:	d2da      	bcs.n	80052c4 <quorem+0x44>
 800530e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005312:	b92b      	cbnz	r3, 8005320 <quorem+0xa0>
 8005314:	9b01      	ldr	r3, [sp, #4]
 8005316:	3b04      	subs	r3, #4
 8005318:	429d      	cmp	r5, r3
 800531a:	461a      	mov	r2, r3
 800531c:	d32f      	bcc.n	800537e <quorem+0xfe>
 800531e:	613c      	str	r4, [r7, #16]
 8005320:	4638      	mov	r0, r7
 8005322:	f001 f8cd 	bl	80064c0 <__mcmp>
 8005326:	2800      	cmp	r0, #0
 8005328:	db25      	blt.n	8005376 <quorem+0xf6>
 800532a:	4628      	mov	r0, r5
 800532c:	f04f 0c00 	mov.w	ip, #0
 8005330:	3601      	adds	r6, #1
 8005332:	f858 1b04 	ldr.w	r1, [r8], #4
 8005336:	f8d0 e000 	ldr.w	lr, [r0]
 800533a:	b28b      	uxth	r3, r1
 800533c:	ebac 0303 	sub.w	r3, ip, r3
 8005340:	fa1f f28e 	uxth.w	r2, lr
 8005344:	4413      	add	r3, r2
 8005346:	0c0a      	lsrs	r2, r1, #16
 8005348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800534c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005350:	b29b      	uxth	r3, r3
 8005352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005356:	45c1      	cmp	r9, r8
 8005358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800535c:	f840 3b04 	str.w	r3, [r0], #4
 8005360:	d2e7      	bcs.n	8005332 <quorem+0xb2>
 8005362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800536a:	b922      	cbnz	r2, 8005376 <quorem+0xf6>
 800536c:	3b04      	subs	r3, #4
 800536e:	429d      	cmp	r5, r3
 8005370:	461a      	mov	r2, r3
 8005372:	d30a      	bcc.n	800538a <quorem+0x10a>
 8005374:	613c      	str	r4, [r7, #16]
 8005376:	4630      	mov	r0, r6
 8005378:	b003      	add	sp, #12
 800537a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	3b04      	subs	r3, #4
 8005382:	2a00      	cmp	r2, #0
 8005384:	d1cb      	bne.n	800531e <quorem+0x9e>
 8005386:	3c01      	subs	r4, #1
 8005388:	e7c6      	b.n	8005318 <quorem+0x98>
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	3b04      	subs	r3, #4
 800538e:	2a00      	cmp	r2, #0
 8005390:	d1f0      	bne.n	8005374 <quorem+0xf4>
 8005392:	3c01      	subs	r4, #1
 8005394:	e7eb      	b.n	800536e <quorem+0xee>
 8005396:	2000      	movs	r0, #0
 8005398:	e7ee      	b.n	8005378 <quorem+0xf8>
 800539a:	0000      	movs	r0, r0
 800539c:	0000      	movs	r0, r0
	...

080053a0 <_dtoa_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	4616      	mov	r6, r2
 80053a6:	461f      	mov	r7, r3
 80053a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80053aa:	b099      	sub	sp, #100	; 0x64
 80053ac:	4605      	mov	r5, r0
 80053ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80053b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80053b6:	b974      	cbnz	r4, 80053d6 <_dtoa_r+0x36>
 80053b8:	2010      	movs	r0, #16
 80053ba:	f000 fde3 	bl	8005f84 <malloc>
 80053be:	4602      	mov	r2, r0
 80053c0:	6268      	str	r0, [r5, #36]	; 0x24
 80053c2:	b920      	cbnz	r0, 80053ce <_dtoa_r+0x2e>
 80053c4:	21ea      	movs	r1, #234	; 0xea
 80053c6:	4bae      	ldr	r3, [pc, #696]	; (8005680 <_dtoa_r+0x2e0>)
 80053c8:	48ae      	ldr	r0, [pc, #696]	; (8005684 <_dtoa_r+0x2e4>)
 80053ca:	f001 fba1 	bl	8006b10 <__assert_func>
 80053ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053d2:	6004      	str	r4, [r0, #0]
 80053d4:	60c4      	str	r4, [r0, #12]
 80053d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	b151      	cbz	r1, 80053f2 <_dtoa_r+0x52>
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	2301      	movs	r3, #1
 80053e0:	4093      	lsls	r3, r2
 80053e2:	604a      	str	r2, [r1, #4]
 80053e4:	608b      	str	r3, [r1, #8]
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fe30 	bl	800604c <_Bfree>
 80053ec:	2200      	movs	r2, #0
 80053ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	1e3b      	subs	r3, r7, #0
 80053f4:	bfaf      	iteee	ge
 80053f6:	2300      	movge	r3, #0
 80053f8:	2201      	movlt	r2, #1
 80053fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053fe:	9305      	strlt	r3, [sp, #20]
 8005400:	bfa8      	it	ge
 8005402:	f8c8 3000 	strge.w	r3, [r8]
 8005406:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800540a:	4b9f      	ldr	r3, [pc, #636]	; (8005688 <_dtoa_r+0x2e8>)
 800540c:	bfb8      	it	lt
 800540e:	f8c8 2000 	strlt.w	r2, [r8]
 8005412:	ea33 0309 	bics.w	r3, r3, r9
 8005416:	d119      	bne.n	800544c <_dtoa_r+0xac>
 8005418:	f242 730f 	movw	r3, #9999	; 0x270f
 800541c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005424:	4333      	orrs	r3, r6
 8005426:	f000 8580 	beq.w	8005f2a <_dtoa_r+0xb8a>
 800542a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800542c:	b953      	cbnz	r3, 8005444 <_dtoa_r+0xa4>
 800542e:	4b97      	ldr	r3, [pc, #604]	; (800568c <_dtoa_r+0x2ec>)
 8005430:	e022      	b.n	8005478 <_dtoa_r+0xd8>
 8005432:	4b97      	ldr	r3, [pc, #604]	; (8005690 <_dtoa_r+0x2f0>)
 8005434:	9308      	str	r3, [sp, #32]
 8005436:	3308      	adds	r3, #8
 8005438:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	9808      	ldr	r0, [sp, #32]
 800543e:	b019      	add	sp, #100	; 0x64
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	4b91      	ldr	r3, [pc, #580]	; (800568c <_dtoa_r+0x2ec>)
 8005446:	9308      	str	r3, [sp, #32]
 8005448:	3303      	adds	r3, #3
 800544a:	e7f5      	b.n	8005438 <_dtoa_r+0x98>
 800544c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005450:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	f7fb faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8005460:	4680      	mov	r8, r0
 8005462:	b158      	cbz	r0, 800547c <_dtoa_r+0xdc>
 8005464:	2301      	movs	r3, #1
 8005466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8559 	beq.w	8005f24 <_dtoa_r+0xb84>
 8005472:	4888      	ldr	r0, [pc, #544]	; (8005694 <_dtoa_r+0x2f4>)
 8005474:	6018      	str	r0, [r3, #0]
 8005476:	1e43      	subs	r3, r0, #1
 8005478:	9308      	str	r3, [sp, #32]
 800547a:	e7df      	b.n	800543c <_dtoa_r+0x9c>
 800547c:	ab16      	add	r3, sp, #88	; 0x58
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	ab17      	add	r3, sp, #92	; 0x5c
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4628      	mov	r0, r5
 8005486:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800548a:	f001 f8c5 	bl	8006618 <__d2b>
 800548e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005492:	4682      	mov	sl, r0
 8005494:	2c00      	cmp	r4, #0
 8005496:	d07e      	beq.n	8005596 <_dtoa_r+0x1f6>
 8005498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800549c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800549e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80054a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80054aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80054ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80054b2:	2200      	movs	r2, #0
 80054b4:	4b78      	ldr	r3, [pc, #480]	; (8005698 <_dtoa_r+0x2f8>)
 80054b6:	f7fa fe57 	bl	8000168 <__aeabi_dsub>
 80054ba:	a36b      	add	r3, pc, #428	; (adr r3, 8005668 <_dtoa_r+0x2c8>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f7fb f80a 	bl	80004d8 <__aeabi_dmul>
 80054c4:	a36a      	add	r3, pc, #424	; (adr r3, 8005670 <_dtoa_r+0x2d0>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f7fa fe4f 	bl	800016c <__adddf3>
 80054ce:	4606      	mov	r6, r0
 80054d0:	4620      	mov	r0, r4
 80054d2:	460f      	mov	r7, r1
 80054d4:	f7fa ff96 	bl	8000404 <__aeabi_i2d>
 80054d8:	a367      	add	r3, pc, #412	; (adr r3, 8005678 <_dtoa_r+0x2d8>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa fffb 	bl	80004d8 <__aeabi_dmul>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fa fe3f 	bl	800016c <__adddf3>
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fb faa1 	bl	8000a38 <__aeabi_d2iz>
 80054f6:	2200      	movs	r2, #0
 80054f8:	4681      	mov	r9, r0
 80054fa:	2300      	movs	r3, #0
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	f7fb fa5c 	bl	80009bc <__aeabi_dcmplt>
 8005504:	b148      	cbz	r0, 800551a <_dtoa_r+0x17a>
 8005506:	4648      	mov	r0, r9
 8005508:	f7fa ff7c 	bl	8000404 <__aeabi_i2d>
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	f7fb fa4a 	bl	80009a8 <__aeabi_dcmpeq>
 8005514:	b908      	cbnz	r0, 800551a <_dtoa_r+0x17a>
 8005516:	f109 39ff 	add.w	r9, r9, #4294967295
 800551a:	f1b9 0f16 	cmp.w	r9, #22
 800551e:	d857      	bhi.n	80055d0 <_dtoa_r+0x230>
 8005520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005524:	4b5d      	ldr	r3, [pc, #372]	; (800569c <_dtoa_r+0x2fc>)
 8005526:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f7fb fa45 	bl	80009bc <__aeabi_dcmplt>
 8005532:	2800      	cmp	r0, #0
 8005534:	d04e      	beq.n	80055d4 <_dtoa_r+0x234>
 8005536:	2300      	movs	r3, #0
 8005538:	f109 39ff 	add.w	r9, r9, #4294967295
 800553c:	930f      	str	r3, [sp, #60]	; 0x3c
 800553e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005540:	1b1c      	subs	r4, r3, r4
 8005542:	1e63      	subs	r3, r4, #1
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	bf49      	itett	mi
 8005548:	f1c4 0301 	rsbmi	r3, r4, #1
 800554c:	2300      	movpl	r3, #0
 800554e:	9306      	strmi	r3, [sp, #24]
 8005550:	2300      	movmi	r3, #0
 8005552:	bf54      	ite	pl
 8005554:	9306      	strpl	r3, [sp, #24]
 8005556:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005558:	f1b9 0f00 	cmp.w	r9, #0
 800555c:	db3c      	blt.n	80055d8 <_dtoa_r+0x238>
 800555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005560:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005564:	444b      	add	r3, r9
 8005566:	9309      	str	r3, [sp, #36]	; 0x24
 8005568:	2300      	movs	r3, #0
 800556a:	930a      	str	r3, [sp, #40]	; 0x28
 800556c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800556e:	2b09      	cmp	r3, #9
 8005570:	d86c      	bhi.n	800564c <_dtoa_r+0x2ac>
 8005572:	2b05      	cmp	r3, #5
 8005574:	bfc4      	itt	gt
 8005576:	3b04      	subgt	r3, #4
 8005578:	9322      	strgt	r3, [sp, #136]	; 0x88
 800557a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800557c:	bfc8      	it	gt
 800557e:	2400      	movgt	r4, #0
 8005580:	f1a3 0302 	sub.w	r3, r3, #2
 8005584:	bfd8      	it	le
 8005586:	2401      	movle	r4, #1
 8005588:	2b03      	cmp	r3, #3
 800558a:	f200 808b 	bhi.w	80056a4 <_dtoa_r+0x304>
 800558e:	e8df f003 	tbb	[pc, r3]
 8005592:	4f2d      	.short	0x4f2d
 8005594:	5b4d      	.short	0x5b4d
 8005596:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800559a:	441c      	add	r4, r3
 800559c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	bfc3      	ittte	gt
 80055a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055a8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80055ac:	fa09 f303 	lslgt.w	r3, r9, r3
 80055b0:	f1c3 0320 	rsble	r3, r3, #32
 80055b4:	bfc6      	itte	gt
 80055b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055ba:	4318      	orrgt	r0, r3
 80055bc:	fa06 f003 	lslle.w	r0, r6, r3
 80055c0:	f7fa ff10 	bl	80003e4 <__aeabi_ui2d>
 80055c4:	2301      	movs	r3, #1
 80055c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80055ca:	3c01      	subs	r4, #1
 80055cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80055ce:	e770      	b.n	80054b2 <_dtoa_r+0x112>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e7b3      	b.n	800553c <_dtoa_r+0x19c>
 80055d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80055d6:	e7b2      	b.n	800553e <_dtoa_r+0x19e>
 80055d8:	9b06      	ldr	r3, [sp, #24]
 80055da:	eba3 0309 	sub.w	r3, r3, r9
 80055de:	9306      	str	r3, [sp, #24]
 80055e0:	f1c9 0300 	rsb	r3, r9, #0
 80055e4:	930a      	str	r3, [sp, #40]	; 0x28
 80055e6:	2300      	movs	r3, #0
 80055e8:	930e      	str	r3, [sp, #56]	; 0x38
 80055ea:	e7bf      	b.n	800556c <_dtoa_r+0x1cc>
 80055ec:	2300      	movs	r3, #0
 80055ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	dc59      	bgt.n	80056aa <_dtoa_r+0x30a>
 80055f6:	f04f 0b01 	mov.w	fp, #1
 80055fa:	465b      	mov	r3, fp
 80055fc:	f8cd b008 	str.w	fp, [sp, #8]
 8005600:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005604:	2200      	movs	r2, #0
 8005606:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005608:	6042      	str	r2, [r0, #4]
 800560a:	2204      	movs	r2, #4
 800560c:	f102 0614 	add.w	r6, r2, #20
 8005610:	429e      	cmp	r6, r3
 8005612:	6841      	ldr	r1, [r0, #4]
 8005614:	d94f      	bls.n	80056b6 <_dtoa_r+0x316>
 8005616:	4628      	mov	r0, r5
 8005618:	f000 fcd8 	bl	8005fcc <_Balloc>
 800561c:	9008      	str	r0, [sp, #32]
 800561e:	2800      	cmp	r0, #0
 8005620:	d14d      	bne.n	80056be <_dtoa_r+0x31e>
 8005622:	4602      	mov	r2, r0
 8005624:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <_dtoa_r+0x300>)
 800562a:	e6cd      	b.n	80053c8 <_dtoa_r+0x28>
 800562c:	2301      	movs	r3, #1
 800562e:	e7de      	b.n	80055ee <_dtoa_r+0x24e>
 8005630:	2300      	movs	r3, #0
 8005632:	930b      	str	r3, [sp, #44]	; 0x2c
 8005634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005636:	eb09 0b03 	add.w	fp, r9, r3
 800563a:	f10b 0301 	add.w	r3, fp, #1
 800563e:	2b01      	cmp	r3, #1
 8005640:	9302      	str	r3, [sp, #8]
 8005642:	bfb8      	it	lt
 8005644:	2301      	movlt	r3, #1
 8005646:	e7dd      	b.n	8005604 <_dtoa_r+0x264>
 8005648:	2301      	movs	r3, #1
 800564a:	e7f2      	b.n	8005632 <_dtoa_r+0x292>
 800564c:	2401      	movs	r4, #1
 800564e:	2300      	movs	r3, #0
 8005650:	940b      	str	r4, [sp, #44]	; 0x2c
 8005652:	9322      	str	r3, [sp, #136]	; 0x88
 8005654:	f04f 3bff 	mov.w	fp, #4294967295
 8005658:	2200      	movs	r2, #0
 800565a:	2312      	movs	r3, #18
 800565c:	f8cd b008 	str.w	fp, [sp, #8]
 8005660:	9223      	str	r2, [sp, #140]	; 0x8c
 8005662:	e7cf      	b.n	8005604 <_dtoa_r+0x264>
 8005664:	f3af 8000 	nop.w
 8005668:	636f4361 	.word	0x636f4361
 800566c:	3fd287a7 	.word	0x3fd287a7
 8005670:	8b60c8b3 	.word	0x8b60c8b3
 8005674:	3fc68a28 	.word	0x3fc68a28
 8005678:	509f79fb 	.word	0x509f79fb
 800567c:	3fd34413 	.word	0x3fd34413
 8005680:	08007a25 	.word	0x08007a25
 8005684:	08007a3c 	.word	0x08007a3c
 8005688:	7ff00000 	.word	0x7ff00000
 800568c:	08007a21 	.word	0x08007a21
 8005690:	08007a18 	.word	0x08007a18
 8005694:	080079f5 	.word	0x080079f5
 8005698:	3ff80000 	.word	0x3ff80000
 800569c:	08007b38 	.word	0x08007b38
 80056a0:	08007a9b 	.word	0x08007a9b
 80056a4:	2301      	movs	r3, #1
 80056a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80056a8:	e7d4      	b.n	8005654 <_dtoa_r+0x2b4>
 80056aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80056ae:	465b      	mov	r3, fp
 80056b0:	f8cd b008 	str.w	fp, [sp, #8]
 80056b4:	e7a6      	b.n	8005604 <_dtoa_r+0x264>
 80056b6:	3101      	adds	r1, #1
 80056b8:	6041      	str	r1, [r0, #4]
 80056ba:	0052      	lsls	r2, r2, #1
 80056bc:	e7a6      	b.n	800560c <_dtoa_r+0x26c>
 80056be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056c0:	9a08      	ldr	r2, [sp, #32]
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	9b02      	ldr	r3, [sp, #8]
 80056c6:	2b0e      	cmp	r3, #14
 80056c8:	f200 80a8 	bhi.w	800581c <_dtoa_r+0x47c>
 80056cc:	2c00      	cmp	r4, #0
 80056ce:	f000 80a5 	beq.w	800581c <_dtoa_r+0x47c>
 80056d2:	f1b9 0f00 	cmp.w	r9, #0
 80056d6:	dd34      	ble.n	8005742 <_dtoa_r+0x3a2>
 80056d8:	4a9a      	ldr	r2, [pc, #616]	; (8005944 <_dtoa_r+0x5a4>)
 80056da:	f009 030f 	and.w	r3, r9, #15
 80056de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056e2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80056e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056ee:	ea4f 1429 	mov.w	r4, r9, asr #4
 80056f2:	d016      	beq.n	8005722 <_dtoa_r+0x382>
 80056f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056f8:	4b93      	ldr	r3, [pc, #588]	; (8005948 <_dtoa_r+0x5a8>)
 80056fa:	2703      	movs	r7, #3
 80056fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005700:	f7fb f814 	bl	800072c <__aeabi_ddiv>
 8005704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005708:	f004 040f 	and.w	r4, r4, #15
 800570c:	4e8e      	ldr	r6, [pc, #568]	; (8005948 <_dtoa_r+0x5a8>)
 800570e:	b954      	cbnz	r4, 8005726 <_dtoa_r+0x386>
 8005710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005718:	f7fb f808 	bl	800072c <__aeabi_ddiv>
 800571c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005720:	e029      	b.n	8005776 <_dtoa_r+0x3d6>
 8005722:	2702      	movs	r7, #2
 8005724:	e7f2      	b.n	800570c <_dtoa_r+0x36c>
 8005726:	07e1      	lsls	r1, r4, #31
 8005728:	d508      	bpl.n	800573c <_dtoa_r+0x39c>
 800572a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800572e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005732:	f7fa fed1 	bl	80004d8 <__aeabi_dmul>
 8005736:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800573a:	3701      	adds	r7, #1
 800573c:	1064      	asrs	r4, r4, #1
 800573e:	3608      	adds	r6, #8
 8005740:	e7e5      	b.n	800570e <_dtoa_r+0x36e>
 8005742:	f000 80a5 	beq.w	8005890 <_dtoa_r+0x4f0>
 8005746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800574a:	f1c9 0400 	rsb	r4, r9, #0
 800574e:	4b7d      	ldr	r3, [pc, #500]	; (8005944 <_dtoa_r+0x5a4>)
 8005750:	f004 020f 	and.w	r2, r4, #15
 8005754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fa febc 	bl	80004d8 <__aeabi_dmul>
 8005760:	2702      	movs	r7, #2
 8005762:	2300      	movs	r3, #0
 8005764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005768:	4e77      	ldr	r6, [pc, #476]	; (8005948 <_dtoa_r+0x5a8>)
 800576a:	1124      	asrs	r4, r4, #4
 800576c:	2c00      	cmp	r4, #0
 800576e:	f040 8084 	bne.w	800587a <_dtoa_r+0x4da>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1d2      	bne.n	800571c <_dtoa_r+0x37c>
 8005776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 808b 	beq.w	8005894 <_dtoa_r+0x4f4>
 800577e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005782:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005786:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800578a:	2200      	movs	r2, #0
 800578c:	4b6f      	ldr	r3, [pc, #444]	; (800594c <_dtoa_r+0x5ac>)
 800578e:	f7fb f915 	bl	80009bc <__aeabi_dcmplt>
 8005792:	2800      	cmp	r0, #0
 8005794:	d07e      	beq.n	8005894 <_dtoa_r+0x4f4>
 8005796:	9b02      	ldr	r3, [sp, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d07b      	beq.n	8005894 <_dtoa_r+0x4f4>
 800579c:	f1bb 0f00 	cmp.w	fp, #0
 80057a0:	dd38      	ble.n	8005814 <_dtoa_r+0x474>
 80057a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057a6:	2200      	movs	r2, #0
 80057a8:	4b69      	ldr	r3, [pc, #420]	; (8005950 <_dtoa_r+0x5b0>)
 80057aa:	f7fa fe95 	bl	80004d8 <__aeabi_dmul>
 80057ae:	465c      	mov	r4, fp
 80057b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057b4:	f109 38ff 	add.w	r8, r9, #4294967295
 80057b8:	3701      	adds	r7, #1
 80057ba:	4638      	mov	r0, r7
 80057bc:	f7fa fe22 	bl	8000404 <__aeabi_i2d>
 80057c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057c4:	f7fa fe88 	bl	80004d8 <__aeabi_dmul>
 80057c8:	2200      	movs	r2, #0
 80057ca:	4b62      	ldr	r3, [pc, #392]	; (8005954 <_dtoa_r+0x5b4>)
 80057cc:	f7fa fcce 	bl	800016c <__adddf3>
 80057d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057d8:	9611      	str	r6, [sp, #68]	; 0x44
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d15d      	bne.n	800589a <_dtoa_r+0x4fa>
 80057de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e2:	2200      	movs	r2, #0
 80057e4:	4b5c      	ldr	r3, [pc, #368]	; (8005958 <_dtoa_r+0x5b8>)
 80057e6:	f7fa fcbf 	bl	8000168 <__aeabi_dsub>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057f2:	4633      	mov	r3, r6
 80057f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057f6:	f7fb f8ff 	bl	80009f8 <__aeabi_dcmpgt>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f040 829e 	bne.w	8005d3c <_dtoa_r+0x99c>
 8005800:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005806:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800580a:	f7fb f8d7 	bl	80009bc <__aeabi_dcmplt>
 800580e:	2800      	cmp	r0, #0
 8005810:	f040 8292 	bne.w	8005d38 <_dtoa_r+0x998>
 8005814:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005818:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800581c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800581e:	2b00      	cmp	r3, #0
 8005820:	f2c0 8153 	blt.w	8005aca <_dtoa_r+0x72a>
 8005824:	f1b9 0f0e 	cmp.w	r9, #14
 8005828:	f300 814f 	bgt.w	8005aca <_dtoa_r+0x72a>
 800582c:	4b45      	ldr	r3, [pc, #276]	; (8005944 <_dtoa_r+0x5a4>)
 800582e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005832:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005836:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800583a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800583c:	2b00      	cmp	r3, #0
 800583e:	f280 80db 	bge.w	80059f8 <_dtoa_r+0x658>
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f300 80d7 	bgt.w	80059f8 <_dtoa_r+0x658>
 800584a:	f040 8274 	bne.w	8005d36 <_dtoa_r+0x996>
 800584e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005852:	2200      	movs	r2, #0
 8005854:	4b40      	ldr	r3, [pc, #256]	; (8005958 <_dtoa_r+0x5b8>)
 8005856:	f7fa fe3f 	bl	80004d8 <__aeabi_dmul>
 800585a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800585e:	f7fb f8c1 	bl	80009e4 <__aeabi_dcmpge>
 8005862:	9c02      	ldr	r4, [sp, #8]
 8005864:	4626      	mov	r6, r4
 8005866:	2800      	cmp	r0, #0
 8005868:	f040 824a 	bne.w	8005d00 <_dtoa_r+0x960>
 800586c:	2331      	movs	r3, #49	; 0x31
 800586e:	9f08      	ldr	r7, [sp, #32]
 8005870:	f109 0901 	add.w	r9, r9, #1
 8005874:	f807 3b01 	strb.w	r3, [r7], #1
 8005878:	e246      	b.n	8005d08 <_dtoa_r+0x968>
 800587a:	07e2      	lsls	r2, r4, #31
 800587c:	d505      	bpl.n	800588a <_dtoa_r+0x4ea>
 800587e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005882:	f7fa fe29 	bl	80004d8 <__aeabi_dmul>
 8005886:	2301      	movs	r3, #1
 8005888:	3701      	adds	r7, #1
 800588a:	1064      	asrs	r4, r4, #1
 800588c:	3608      	adds	r6, #8
 800588e:	e76d      	b.n	800576c <_dtoa_r+0x3cc>
 8005890:	2702      	movs	r7, #2
 8005892:	e770      	b.n	8005776 <_dtoa_r+0x3d6>
 8005894:	46c8      	mov	r8, r9
 8005896:	9c02      	ldr	r4, [sp, #8]
 8005898:	e78f      	b.n	80057ba <_dtoa_r+0x41a>
 800589a:	9908      	ldr	r1, [sp, #32]
 800589c:	4b29      	ldr	r3, [pc, #164]	; (8005944 <_dtoa_r+0x5a4>)
 800589e:	4421      	add	r1, r4
 80058a0:	9112      	str	r1, [sp, #72]	; 0x48
 80058a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80058ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058b0:	2900      	cmp	r1, #0
 80058b2:	d055      	beq.n	8005960 <_dtoa_r+0x5c0>
 80058b4:	2000      	movs	r0, #0
 80058b6:	4929      	ldr	r1, [pc, #164]	; (800595c <_dtoa_r+0x5bc>)
 80058b8:	f7fa ff38 	bl	800072c <__aeabi_ddiv>
 80058bc:	463b      	mov	r3, r7
 80058be:	4632      	mov	r2, r6
 80058c0:	f7fa fc52 	bl	8000168 <__aeabi_dsub>
 80058c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058c8:	9f08      	ldr	r7, [sp, #32]
 80058ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ce:	f7fb f8b3 	bl	8000a38 <__aeabi_d2iz>
 80058d2:	4604      	mov	r4, r0
 80058d4:	f7fa fd96 	bl	8000404 <__aeabi_i2d>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e0:	f7fa fc42 	bl	8000168 <__aeabi_dsub>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	3430      	adds	r4, #48	; 0x30
 80058ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058f2:	f807 4b01 	strb.w	r4, [r7], #1
 80058f6:	f7fb f861 	bl	80009bc <__aeabi_dcmplt>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d174      	bne.n	80059e8 <_dtoa_r+0x648>
 80058fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005902:	2000      	movs	r0, #0
 8005904:	4911      	ldr	r1, [pc, #68]	; (800594c <_dtoa_r+0x5ac>)
 8005906:	f7fa fc2f 	bl	8000168 <__aeabi_dsub>
 800590a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800590e:	f7fb f855 	bl	80009bc <__aeabi_dcmplt>
 8005912:	2800      	cmp	r0, #0
 8005914:	f040 80b6 	bne.w	8005a84 <_dtoa_r+0x6e4>
 8005918:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800591a:	429f      	cmp	r7, r3
 800591c:	f43f af7a 	beq.w	8005814 <_dtoa_r+0x474>
 8005920:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005924:	2200      	movs	r2, #0
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <_dtoa_r+0x5b0>)
 8005928:	f7fa fdd6 	bl	80004d8 <__aeabi_dmul>
 800592c:	2200      	movs	r2, #0
 800592e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <_dtoa_r+0x5b0>)
 8005938:	f7fa fdce 	bl	80004d8 <__aeabi_dmul>
 800593c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005940:	e7c3      	b.n	80058ca <_dtoa_r+0x52a>
 8005942:	bf00      	nop
 8005944:	08007b38 	.word	0x08007b38
 8005948:	08007b10 	.word	0x08007b10
 800594c:	3ff00000 	.word	0x3ff00000
 8005950:	40240000 	.word	0x40240000
 8005954:	401c0000 	.word	0x401c0000
 8005958:	40140000 	.word	0x40140000
 800595c:	3fe00000 	.word	0x3fe00000
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	f7fa fdb8 	bl	80004d8 <__aeabi_dmul>
 8005968:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800596a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800596e:	9c08      	ldr	r4, [sp, #32]
 8005970:	9314      	str	r3, [sp, #80]	; 0x50
 8005972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005976:	f7fb f85f 	bl	8000a38 <__aeabi_d2iz>
 800597a:	9015      	str	r0, [sp, #84]	; 0x54
 800597c:	f7fa fd42 	bl	8000404 <__aeabi_i2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005988:	f7fa fbee 	bl	8000168 <__aeabi_dsub>
 800598c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800598e:	4606      	mov	r6, r0
 8005990:	3330      	adds	r3, #48	; 0x30
 8005992:	f804 3b01 	strb.w	r3, [r4], #1
 8005996:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005998:	460f      	mov	r7, r1
 800599a:	429c      	cmp	r4, r3
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	d124      	bne.n	80059ec <_dtoa_r+0x64c>
 80059a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059a6:	4bb3      	ldr	r3, [pc, #716]	; (8005c74 <_dtoa_r+0x8d4>)
 80059a8:	f7fa fbe0 	bl	800016c <__adddf3>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f820 	bl	80009f8 <__aeabi_dcmpgt>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d162      	bne.n	8005a82 <_dtoa_r+0x6e2>
 80059bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059c0:	2000      	movs	r0, #0
 80059c2:	49ac      	ldr	r1, [pc, #688]	; (8005c74 <_dtoa_r+0x8d4>)
 80059c4:	f7fa fbd0 	bl	8000168 <__aeabi_dsub>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4630      	mov	r0, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	f7fa fff4 	bl	80009bc <__aeabi_dcmplt>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f43f af1d 	beq.w	8005814 <_dtoa_r+0x474>
 80059da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80059dc:	1e7b      	subs	r3, r7, #1
 80059de:	9314      	str	r3, [sp, #80]	; 0x50
 80059e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	d0f8      	beq.n	80059da <_dtoa_r+0x63a>
 80059e8:	46c1      	mov	r9, r8
 80059ea:	e03a      	b.n	8005a62 <_dtoa_r+0x6c2>
 80059ec:	4ba2      	ldr	r3, [pc, #648]	; (8005c78 <_dtoa_r+0x8d8>)
 80059ee:	f7fa fd73 	bl	80004d8 <__aeabi_dmul>
 80059f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059f6:	e7bc      	b.n	8005972 <_dtoa_r+0x5d2>
 80059f8:	9f08      	ldr	r7, [sp, #32]
 80059fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a02:	f7fa fe93 	bl	800072c <__aeabi_ddiv>
 8005a06:	f7fb f817 	bl	8000a38 <__aeabi_d2iz>
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	f7fa fcfa 	bl	8000404 <__aeabi_i2d>
 8005a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a14:	f7fa fd60 	bl	80004d8 <__aeabi_dmul>
 8005a18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4602      	mov	r2, r0
 8005a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a24:	f7fa fba0 	bl	8000168 <__aeabi_dsub>
 8005a28:	f807 6b01 	strb.w	r6, [r7], #1
 8005a2c:	9e08      	ldr	r6, [sp, #32]
 8005a2e:	9b02      	ldr	r3, [sp, #8]
 8005a30:	1bbe      	subs	r6, r7, r6
 8005a32:	42b3      	cmp	r3, r6
 8005a34:	d13a      	bne.n	8005aac <_dtoa_r+0x70c>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	f7fa fb97 	bl	800016c <__adddf3>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a4a:	f7fa ffd5 	bl	80009f8 <__aeabi_dcmpgt>
 8005a4e:	bb58      	cbnz	r0, 8005aa8 <_dtoa_r+0x708>
 8005a50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a58:	f7fa ffa6 	bl	80009a8 <__aeabi_dcmpeq>
 8005a5c:	b108      	cbz	r0, 8005a62 <_dtoa_r+0x6c2>
 8005a5e:	07e1      	lsls	r1, r4, #31
 8005a60:	d422      	bmi.n	8005aa8 <_dtoa_r+0x708>
 8005a62:	4628      	mov	r0, r5
 8005a64:	4651      	mov	r1, sl
 8005a66:	f000 faf1 	bl	800604c <_Bfree>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	703b      	strb	r3, [r7, #0]
 8005a6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a70:	f109 0001 	add.w	r0, r9, #1
 8005a74:	6018      	str	r0, [r3, #0]
 8005a76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f43f acdf 	beq.w	800543c <_dtoa_r+0x9c>
 8005a7e:	601f      	str	r7, [r3, #0]
 8005a80:	e4dc      	b.n	800543c <_dtoa_r+0x9c>
 8005a82:	4627      	mov	r7, r4
 8005a84:	463b      	mov	r3, r7
 8005a86:	461f      	mov	r7, r3
 8005a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a8c:	2a39      	cmp	r2, #57	; 0x39
 8005a8e:	d107      	bne.n	8005aa0 <_dtoa_r+0x700>
 8005a90:	9a08      	ldr	r2, [sp, #32]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d1f7      	bne.n	8005a86 <_dtoa_r+0x6e6>
 8005a96:	2230      	movs	r2, #48	; 0x30
 8005a98:	9908      	ldr	r1, [sp, #32]
 8005a9a:	f108 0801 	add.w	r8, r8, #1
 8005a9e:	700a      	strb	r2, [r1, #0]
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e79f      	b.n	80059e8 <_dtoa_r+0x648>
 8005aa8:	46c8      	mov	r8, r9
 8005aaa:	e7eb      	b.n	8005a84 <_dtoa_r+0x6e4>
 8005aac:	2200      	movs	r2, #0
 8005aae:	4b72      	ldr	r3, [pc, #456]	; (8005c78 <_dtoa_r+0x8d8>)
 8005ab0:	f7fa fd12 	bl	80004d8 <__aeabi_dmul>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f7fa ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d098      	beq.n	80059fa <_dtoa_r+0x65a>
 8005ac8:	e7cb      	b.n	8005a62 <_dtoa_r+0x6c2>
 8005aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	f000 80cd 	beq.w	8005c6c <_dtoa_r+0x8cc>
 8005ad2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ad4:	2a01      	cmp	r2, #1
 8005ad6:	f300 80af 	bgt.w	8005c38 <_dtoa_r+0x898>
 8005ada:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	f000 80a7 	beq.w	8005c30 <_dtoa_r+0x890>
 8005ae2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ae6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ae8:	9f06      	ldr	r7, [sp, #24]
 8005aea:	9a06      	ldr	r2, [sp, #24]
 8005aec:	2101      	movs	r1, #1
 8005aee:	441a      	add	r2, r3
 8005af0:	9206      	str	r2, [sp, #24]
 8005af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af4:	4628      	mov	r0, r5
 8005af6:	441a      	add	r2, r3
 8005af8:	9209      	str	r2, [sp, #36]	; 0x24
 8005afa:	f000 fb61 	bl	80061c0 <__i2b>
 8005afe:	4606      	mov	r6, r0
 8005b00:	2f00      	cmp	r7, #0
 8005b02:	dd0c      	ble.n	8005b1e <_dtoa_r+0x77e>
 8005b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dd09      	ble.n	8005b1e <_dtoa_r+0x77e>
 8005b0a:	42bb      	cmp	r3, r7
 8005b0c:	bfa8      	it	ge
 8005b0e:	463b      	movge	r3, r7
 8005b10:	9a06      	ldr	r2, [sp, #24]
 8005b12:	1aff      	subs	r7, r7, r3
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	9206      	str	r2, [sp, #24]
 8005b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b20:	b1f3      	cbz	r3, 8005b60 <_dtoa_r+0x7c0>
 8005b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80a9 	beq.w	8005c7c <_dtoa_r+0x8dc>
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	dd10      	ble.n	8005b50 <_dtoa_r+0x7b0>
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4622      	mov	r2, r4
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 fbfe 	bl	8006334 <__pow5mult>
 8005b38:	4652      	mov	r2, sl
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 fb54 	bl	80061ec <__multiply>
 8005b44:	4680      	mov	r8, r0
 8005b46:	4651      	mov	r1, sl
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 fa7f 	bl	800604c <_Bfree>
 8005b4e:	46c2      	mov	sl, r8
 8005b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b52:	1b1a      	subs	r2, r3, r4
 8005b54:	d004      	beq.n	8005b60 <_dtoa_r+0x7c0>
 8005b56:	4651      	mov	r1, sl
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fbeb 	bl	8006334 <__pow5mult>
 8005b5e:	4682      	mov	sl, r0
 8005b60:	2101      	movs	r1, #1
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 fb2c 	bl	80061c0 <__i2b>
 8005b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f340 8087 	ble.w	8005c80 <_dtoa_r+0x8e0>
 8005b72:	461a      	mov	r2, r3
 8005b74:	4601      	mov	r1, r0
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 fbdc 	bl	8006334 <__pow5mult>
 8005b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b7e:	4604      	mov	r4, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	f340 8080 	ble.w	8005c86 <_dtoa_r+0x8e6>
 8005b86:	f04f 0800 	mov.w	r8, #0
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b90:	6918      	ldr	r0, [r3, #16]
 8005b92:	f000 fac7 	bl	8006124 <__hi0bits>
 8005b96:	f1c0 0020 	rsb	r0, r0, #32
 8005b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9c:	4418      	add	r0, r3
 8005b9e:	f010 001f 	ands.w	r0, r0, #31
 8005ba2:	f000 8092 	beq.w	8005cca <_dtoa_r+0x92a>
 8005ba6:	f1c0 0320 	rsb	r3, r0, #32
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	f340 808a 	ble.w	8005cc4 <_dtoa_r+0x924>
 8005bb0:	f1c0 001c 	rsb	r0, r0, #28
 8005bb4:	9b06      	ldr	r3, [sp, #24]
 8005bb6:	4407      	add	r7, r0
 8005bb8:	4403      	add	r3, r0
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	4403      	add	r3, r0
 8005bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc2:	9b06      	ldr	r3, [sp, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dd05      	ble.n	8005bd4 <_dtoa_r+0x834>
 8005bc8:	4651      	mov	r1, sl
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 fc0b 	bl	80063e8 <__lshift>
 8005bd2:	4682      	mov	sl, r0
 8005bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	dd05      	ble.n	8005be6 <_dtoa_r+0x846>
 8005bda:	4621      	mov	r1, r4
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 fc02 	bl	80063e8 <__lshift>
 8005be4:	4604      	mov	r4, r0
 8005be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d070      	beq.n	8005cce <_dtoa_r+0x92e>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4650      	mov	r0, sl
 8005bf0:	f000 fc66 	bl	80064c0 <__mcmp>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	da6a      	bge.n	8005cce <_dtoa_r+0x92e>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	220a      	movs	r2, #10
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fa46 	bl	8006090 <__multadd>
 8005c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c06:	4682      	mov	sl, r0
 8005c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8193 	beq.w	8005f38 <_dtoa_r+0xb98>
 8005c12:	4631      	mov	r1, r6
 8005c14:	2300      	movs	r3, #0
 8005c16:	220a      	movs	r2, #10
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f000 fa39 	bl	8006090 <__multadd>
 8005c1e:	f1bb 0f00 	cmp.w	fp, #0
 8005c22:	4606      	mov	r6, r0
 8005c24:	f300 8093 	bgt.w	8005d4e <_dtoa_r+0x9ae>
 8005c28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	dc57      	bgt.n	8005cde <_dtoa_r+0x93e>
 8005c2e:	e08e      	b.n	8005d4e <_dtoa_r+0x9ae>
 8005c30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c36:	e756      	b.n	8005ae6 <_dtoa_r+0x746>
 8005c38:	9b02      	ldr	r3, [sp, #8]
 8005c3a:	1e5c      	subs	r4, r3, #1
 8005c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	bfb7      	itett	lt
 8005c42:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c44:	1b1c      	subge	r4, r3, r4
 8005c46:	1ae2      	sublt	r2, r4, r3
 8005c48:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c4a:	bfbe      	ittt	lt
 8005c4c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005c4e:	189b      	addlt	r3, r3, r2
 8005c50:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c52:	9b02      	ldr	r3, [sp, #8]
 8005c54:	bfb8      	it	lt
 8005c56:	2400      	movlt	r4, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bfbb      	ittet	lt
 8005c5c:	9b06      	ldrlt	r3, [sp, #24]
 8005c5e:	9a02      	ldrlt	r2, [sp, #8]
 8005c60:	9f06      	ldrge	r7, [sp, #24]
 8005c62:	1a9f      	sublt	r7, r3, r2
 8005c64:	bfac      	ite	ge
 8005c66:	9b02      	ldrge	r3, [sp, #8]
 8005c68:	2300      	movlt	r3, #0
 8005c6a:	e73e      	b.n	8005aea <_dtoa_r+0x74a>
 8005c6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c6e:	9f06      	ldr	r7, [sp, #24]
 8005c70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c72:	e745      	b.n	8005b00 <_dtoa_r+0x760>
 8005c74:	3fe00000 	.word	0x3fe00000
 8005c78:	40240000 	.word	0x40240000
 8005c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c7e:	e76a      	b.n	8005b56 <_dtoa_r+0x7b6>
 8005c80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	dc19      	bgt.n	8005cba <_dtoa_r+0x91a>
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	b9bb      	cbnz	r3, 8005cba <_dtoa_r+0x91a>
 8005c8a:	9b05      	ldr	r3, [sp, #20]
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	b99b      	cbnz	r3, 8005cba <_dtoa_r+0x91a>
 8005c92:	9b05      	ldr	r3, [sp, #20]
 8005c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	0d1b      	lsrs	r3, r3, #20
 8005c9a:	051b      	lsls	r3, r3, #20
 8005c9c:	b183      	cbz	r3, 8005cc0 <_dtoa_r+0x920>
 8005c9e:	f04f 0801 	mov.w	r8, #1
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	9306      	str	r3, [sp, #24]
 8005ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005caa:	3301      	adds	r3, #1
 8005cac:	9309      	str	r3, [sp, #36]	; 0x24
 8005cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f47f af6a 	bne.w	8005b8a <_dtoa_r+0x7ea>
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	e76f      	b.n	8005b9a <_dtoa_r+0x7fa>
 8005cba:	f04f 0800 	mov.w	r8, #0
 8005cbe:	e7f6      	b.n	8005cae <_dtoa_r+0x90e>
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	e7f4      	b.n	8005cae <_dtoa_r+0x90e>
 8005cc4:	f43f af7d 	beq.w	8005bc2 <_dtoa_r+0x822>
 8005cc8:	4618      	mov	r0, r3
 8005cca:	301c      	adds	r0, #28
 8005ccc:	e772      	b.n	8005bb4 <_dtoa_r+0x814>
 8005cce:	9b02      	ldr	r3, [sp, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dc36      	bgt.n	8005d42 <_dtoa_r+0x9a2>
 8005cd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	dd33      	ble.n	8005d42 <_dtoa_r+0x9a2>
 8005cda:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005cde:	f1bb 0f00 	cmp.w	fp, #0
 8005ce2:	d10d      	bne.n	8005d00 <_dtoa_r+0x960>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	465b      	mov	r3, fp
 8005ce8:	2205      	movs	r2, #5
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f9d0 	bl	8006090 <__multadd>
 8005cf0:	4601      	mov	r1, r0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4650      	mov	r0, sl
 8005cf6:	f000 fbe3 	bl	80064c0 <__mcmp>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	f73f adb6 	bgt.w	800586c <_dtoa_r+0x4cc>
 8005d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d02:	9f08      	ldr	r7, [sp, #32]
 8005d04:	ea6f 0903 	mvn.w	r9, r3
 8005d08:	f04f 0800 	mov.w	r8, #0
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 f99c 	bl	800604c <_Bfree>
 8005d14:	2e00      	cmp	r6, #0
 8005d16:	f43f aea4 	beq.w	8005a62 <_dtoa_r+0x6c2>
 8005d1a:	f1b8 0f00 	cmp.w	r8, #0
 8005d1e:	d005      	beq.n	8005d2c <_dtoa_r+0x98c>
 8005d20:	45b0      	cmp	r8, r6
 8005d22:	d003      	beq.n	8005d2c <_dtoa_r+0x98c>
 8005d24:	4641      	mov	r1, r8
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 f990 	bl	800604c <_Bfree>
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f98c 	bl	800604c <_Bfree>
 8005d34:	e695      	b.n	8005a62 <_dtoa_r+0x6c2>
 8005d36:	2400      	movs	r4, #0
 8005d38:	4626      	mov	r6, r4
 8005d3a:	e7e1      	b.n	8005d00 <_dtoa_r+0x960>
 8005d3c:	46c1      	mov	r9, r8
 8005d3e:	4626      	mov	r6, r4
 8005d40:	e594      	b.n	800586c <_dtoa_r+0x4cc>
 8005d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d44:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80fc 	beq.w	8005f46 <_dtoa_r+0xba6>
 8005d4e:	2f00      	cmp	r7, #0
 8005d50:	dd05      	ble.n	8005d5e <_dtoa_r+0x9be>
 8005d52:	4631      	mov	r1, r6
 8005d54:	463a      	mov	r2, r7
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 fb46 	bl	80063e8 <__lshift>
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	f1b8 0f00 	cmp.w	r8, #0
 8005d62:	d05c      	beq.n	8005e1e <_dtoa_r+0xa7e>
 8005d64:	4628      	mov	r0, r5
 8005d66:	6871      	ldr	r1, [r6, #4]
 8005d68:	f000 f930 	bl	8005fcc <_Balloc>
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	b928      	cbnz	r0, 8005d7c <_dtoa_r+0x9dc>
 8005d70:	4602      	mov	r2, r0
 8005d72:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d76:	4b7e      	ldr	r3, [pc, #504]	; (8005f70 <_dtoa_r+0xbd0>)
 8005d78:	f7ff bb26 	b.w	80053c8 <_dtoa_r+0x28>
 8005d7c:	6932      	ldr	r2, [r6, #16]
 8005d7e:	f106 010c 	add.w	r1, r6, #12
 8005d82:	3202      	adds	r2, #2
 8005d84:	0092      	lsls	r2, r2, #2
 8005d86:	300c      	adds	r0, #12
 8005d88:	f000 f912 	bl	8005fb0 <memcpy>
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4639      	mov	r1, r7
 8005d90:	4628      	mov	r0, r5
 8005d92:	f000 fb29 	bl	80063e8 <__lshift>
 8005d96:	46b0      	mov	r8, r6
 8005d98:	4606      	mov	r6, r0
 8005d9a:	9b08      	ldr	r3, [sp, #32]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	9b08      	ldr	r3, [sp, #32]
 8005da2:	445b      	add	r3, fp
 8005da4:	930a      	str	r3, [sp, #40]	; 0x28
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	9309      	str	r3, [sp, #36]	; 0x24
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	4621      	mov	r1, r4
 8005db2:	4650      	mov	r0, sl
 8005db4:	f103 3bff 	add.w	fp, r3, #4294967295
 8005db8:	f7ff fa62 	bl	8005280 <quorem>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	3330      	adds	r3, #48	; 0x30
 8005dc2:	9004      	str	r0, [sp, #16]
 8005dc4:	4650      	mov	r0, sl
 8005dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc8:	f000 fb7a 	bl	80064c0 <__mcmp>
 8005dcc:	4632      	mov	r2, r6
 8005dce:	9006      	str	r0, [sp, #24]
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 fb90 	bl	80064f8 <__mdiff>
 8005dd8:	68c2      	ldr	r2, [r0, #12]
 8005dda:	4607      	mov	r7, r0
 8005ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dde:	bb02      	cbnz	r2, 8005e22 <_dtoa_r+0xa82>
 8005de0:	4601      	mov	r1, r0
 8005de2:	4650      	mov	r0, sl
 8005de4:	f000 fb6c 	bl	80064c0 <__mcmp>
 8005de8:	4602      	mov	r2, r0
 8005dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dec:	4639      	mov	r1, r7
 8005dee:	4628      	mov	r0, r5
 8005df0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005df4:	f000 f92a 	bl	800604c <_Bfree>
 8005df8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dfc:	9f02      	ldr	r7, [sp, #8]
 8005dfe:	ea43 0102 	orr.w	r1, r3, r2
 8005e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e04:	430b      	orrs	r3, r1
 8005e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e08:	d10d      	bne.n	8005e26 <_dtoa_r+0xa86>
 8005e0a:	2b39      	cmp	r3, #57	; 0x39
 8005e0c:	d027      	beq.n	8005e5e <_dtoa_r+0xabe>
 8005e0e:	9a06      	ldr	r2, [sp, #24]
 8005e10:	2a00      	cmp	r2, #0
 8005e12:	dd01      	ble.n	8005e18 <_dtoa_r+0xa78>
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	3331      	adds	r3, #49	; 0x31
 8005e18:	f88b 3000 	strb.w	r3, [fp]
 8005e1c:	e776      	b.n	8005d0c <_dtoa_r+0x96c>
 8005e1e:	4630      	mov	r0, r6
 8005e20:	e7b9      	b.n	8005d96 <_dtoa_r+0x9f6>
 8005e22:	2201      	movs	r2, #1
 8005e24:	e7e2      	b.n	8005dec <_dtoa_r+0xa4c>
 8005e26:	9906      	ldr	r1, [sp, #24]
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	db04      	blt.n	8005e36 <_dtoa_r+0xa96>
 8005e2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005e2e:	4301      	orrs	r1, r0
 8005e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e32:	4301      	orrs	r1, r0
 8005e34:	d120      	bne.n	8005e78 <_dtoa_r+0xad8>
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	ddee      	ble.n	8005e18 <_dtoa_r+0xa78>
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4628      	mov	r0, r5
 8005e40:	9302      	str	r3, [sp, #8]
 8005e42:	f000 fad1 	bl	80063e8 <__lshift>
 8005e46:	4621      	mov	r1, r4
 8005e48:	4682      	mov	sl, r0
 8005e4a:	f000 fb39 	bl	80064c0 <__mcmp>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	dc02      	bgt.n	8005e5a <_dtoa_r+0xaba>
 8005e54:	d1e0      	bne.n	8005e18 <_dtoa_r+0xa78>
 8005e56:	07da      	lsls	r2, r3, #31
 8005e58:	d5de      	bpl.n	8005e18 <_dtoa_r+0xa78>
 8005e5a:	2b39      	cmp	r3, #57	; 0x39
 8005e5c:	d1da      	bne.n	8005e14 <_dtoa_r+0xa74>
 8005e5e:	2339      	movs	r3, #57	; 0x39
 8005e60:	f88b 3000 	strb.w	r3, [fp]
 8005e64:	463b      	mov	r3, r7
 8005e66:	461f      	mov	r7, r3
 8005e68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	2a39      	cmp	r2, #57	; 0x39
 8005e70:	d050      	beq.n	8005f14 <_dtoa_r+0xb74>
 8005e72:	3201      	adds	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e749      	b.n	8005d0c <_dtoa_r+0x96c>
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	dd03      	ble.n	8005e84 <_dtoa_r+0xae4>
 8005e7c:	2b39      	cmp	r3, #57	; 0x39
 8005e7e:	d0ee      	beq.n	8005e5e <_dtoa_r+0xabe>
 8005e80:	3301      	adds	r3, #1
 8005e82:	e7c9      	b.n	8005e18 <_dtoa_r+0xa78>
 8005e84:	9a02      	ldr	r2, [sp, #8]
 8005e86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e8c:	428a      	cmp	r2, r1
 8005e8e:	d02a      	beq.n	8005ee6 <_dtoa_r+0xb46>
 8005e90:	4651      	mov	r1, sl
 8005e92:	2300      	movs	r3, #0
 8005e94:	220a      	movs	r2, #10
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f8fa 	bl	8006090 <__multadd>
 8005e9c:	45b0      	cmp	r8, r6
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	f04f 020a 	mov.w	r2, #10
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	4628      	mov	r0, r5
 8005eac:	d107      	bne.n	8005ebe <_dtoa_r+0xb1e>
 8005eae:	f000 f8ef 	bl	8006090 <__multadd>
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	9b02      	ldr	r3, [sp, #8]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	e777      	b.n	8005dae <_dtoa_r+0xa0e>
 8005ebe:	f000 f8e7 	bl	8006090 <__multadd>
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	220a      	movs	r2, #10
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 f8e0 	bl	8006090 <__multadd>
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	e7f0      	b.n	8005eb6 <_dtoa_r+0xb16>
 8005ed4:	f1bb 0f00 	cmp.w	fp, #0
 8005ed8:	bfcc      	ite	gt
 8005eda:	465f      	movgt	r7, fp
 8005edc:	2701      	movle	r7, #1
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	9a08      	ldr	r2, [sp, #32]
 8005ee4:	4417      	add	r7, r2
 8005ee6:	4651      	mov	r1, sl
 8005ee8:	2201      	movs	r2, #1
 8005eea:	4628      	mov	r0, r5
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	f000 fa7b 	bl	80063e8 <__lshift>
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	f000 fae3 	bl	80064c0 <__mcmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	dcb2      	bgt.n	8005e64 <_dtoa_r+0xac4>
 8005efe:	d102      	bne.n	8005f06 <_dtoa_r+0xb66>
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d4ae      	bmi.n	8005e64 <_dtoa_r+0xac4>
 8005f06:	463b      	mov	r3, r7
 8005f08:	461f      	mov	r7, r3
 8005f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f0e:	2a30      	cmp	r2, #48	; 0x30
 8005f10:	d0fa      	beq.n	8005f08 <_dtoa_r+0xb68>
 8005f12:	e6fb      	b.n	8005d0c <_dtoa_r+0x96c>
 8005f14:	9a08      	ldr	r2, [sp, #32]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d1a5      	bne.n	8005e66 <_dtoa_r+0xac6>
 8005f1a:	2331      	movs	r3, #49	; 0x31
 8005f1c:	f109 0901 	add.w	r9, r9, #1
 8005f20:	7013      	strb	r3, [r2, #0]
 8005f22:	e6f3      	b.n	8005d0c <_dtoa_r+0x96c>
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <_dtoa_r+0xbd4>)
 8005f26:	f7ff baa7 	b.w	8005478 <_dtoa_r+0xd8>
 8005f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f aa80 	bne.w	8005432 <_dtoa_r+0x92>
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <_dtoa_r+0xbd8>)
 8005f34:	f7ff baa0 	b.w	8005478 <_dtoa_r+0xd8>
 8005f38:	f1bb 0f00 	cmp.w	fp, #0
 8005f3c:	dc03      	bgt.n	8005f46 <_dtoa_r+0xba6>
 8005f3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f73f aecc 	bgt.w	8005cde <_dtoa_r+0x93e>
 8005f46:	9f08      	ldr	r7, [sp, #32]
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	f7ff f998 	bl	8005280 <quorem>
 8005f50:	9a08      	ldr	r2, [sp, #32]
 8005f52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f56:	f807 3b01 	strb.w	r3, [r7], #1
 8005f5a:	1aba      	subs	r2, r7, r2
 8005f5c:	4593      	cmp	fp, r2
 8005f5e:	ddb9      	ble.n	8005ed4 <_dtoa_r+0xb34>
 8005f60:	4651      	mov	r1, sl
 8005f62:	2300      	movs	r3, #0
 8005f64:	220a      	movs	r2, #10
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 f892 	bl	8006090 <__multadd>
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	e7eb      	b.n	8005f48 <_dtoa_r+0xba8>
 8005f70:	08007a9b 	.word	0x08007a9b
 8005f74:	080079f4 	.word	0x080079f4
 8005f78:	08007a18 	.word	0x08007a18

08005f7c <_localeconv_r>:
 8005f7c:	4800      	ldr	r0, [pc, #0]	; (8005f80 <_localeconv_r+0x4>)
 8005f7e:	4770      	bx	lr
 8005f80:	20000174 	.word	0x20000174

08005f84 <malloc>:
 8005f84:	4b02      	ldr	r3, [pc, #8]	; (8005f90 <malloc+0xc>)
 8005f86:	4601      	mov	r1, r0
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	f000 bbfb 	b.w	8006784 <_malloc_r>
 8005f8e:	bf00      	nop
 8005f90:	20000020 	.word	0x20000020

08005f94 <memchr>:
 8005f94:	4603      	mov	r3, r0
 8005f96:	b510      	push	{r4, lr}
 8005f98:	b2c9      	uxtb	r1, r1
 8005f9a:	4402      	add	r2, r0
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	d101      	bne.n	8005fa6 <memchr+0x12>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	e003      	b.n	8005fae <memchr+0x1a>
 8005fa6:	7804      	ldrb	r4, [r0, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	428c      	cmp	r4, r1
 8005fac:	d1f6      	bne.n	8005f9c <memchr+0x8>
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <memcpy>:
 8005fb0:	440a      	add	r2, r1
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb8:	d100      	bne.n	8005fbc <memcpy+0xc>
 8005fba:	4770      	bx	lr
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc2:	4291      	cmp	r1, r2
 8005fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc8:	d1f9      	bne.n	8005fbe <memcpy+0xe>
 8005fca:	bd10      	pop	{r4, pc}

08005fcc <_Balloc>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	b976      	cbnz	r6, 8005ff4 <_Balloc+0x28>
 8005fd6:	2010      	movs	r0, #16
 8005fd8:	f7ff ffd4 	bl	8005f84 <malloc>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6260      	str	r0, [r4, #36]	; 0x24
 8005fe0:	b920      	cbnz	r0, 8005fec <_Balloc+0x20>
 8005fe2:	2166      	movs	r1, #102	; 0x66
 8005fe4:	4b17      	ldr	r3, [pc, #92]	; (8006044 <_Balloc+0x78>)
 8005fe6:	4818      	ldr	r0, [pc, #96]	; (8006048 <_Balloc+0x7c>)
 8005fe8:	f000 fd92 	bl	8006b10 <__assert_func>
 8005fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ff0:	6006      	str	r6, [r0, #0]
 8005ff2:	60c6      	str	r6, [r0, #12]
 8005ff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ff6:	68f3      	ldr	r3, [r6, #12]
 8005ff8:	b183      	cbz	r3, 800601c <_Balloc+0x50>
 8005ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006002:	b9b8      	cbnz	r0, 8006034 <_Balloc+0x68>
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f605 	lsl.w	r6, r1, r5
 800600a:	1d72      	adds	r2, r6, #5
 800600c:	4620      	mov	r0, r4
 800600e:	0092      	lsls	r2, r2, #2
 8006010:	f000 fb5e 	bl	80066d0 <_calloc_r>
 8006014:	b160      	cbz	r0, 8006030 <_Balloc+0x64>
 8006016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800601a:	e00e      	b.n	800603a <_Balloc+0x6e>
 800601c:	2221      	movs	r2, #33	; 0x21
 800601e:	2104      	movs	r1, #4
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fb55 	bl	80066d0 <_calloc_r>
 8006026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006028:	60f0      	str	r0, [r6, #12]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e4      	bne.n	8005ffa <_Balloc+0x2e>
 8006030:	2000      	movs	r0, #0
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	6802      	ldr	r2, [r0, #0]
 8006036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800603a:	2300      	movs	r3, #0
 800603c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006040:	e7f7      	b.n	8006032 <_Balloc+0x66>
 8006042:	bf00      	nop
 8006044:	08007a25 	.word	0x08007a25
 8006048:	08007aac 	.word	0x08007aac

0800604c <_Bfree>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006050:	4605      	mov	r5, r0
 8006052:	460c      	mov	r4, r1
 8006054:	b976      	cbnz	r6, 8006074 <_Bfree+0x28>
 8006056:	2010      	movs	r0, #16
 8006058:	f7ff ff94 	bl	8005f84 <malloc>
 800605c:	4602      	mov	r2, r0
 800605e:	6268      	str	r0, [r5, #36]	; 0x24
 8006060:	b920      	cbnz	r0, 800606c <_Bfree+0x20>
 8006062:	218a      	movs	r1, #138	; 0x8a
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <_Bfree+0x3c>)
 8006066:	4809      	ldr	r0, [pc, #36]	; (800608c <_Bfree+0x40>)
 8006068:	f000 fd52 	bl	8006b10 <__assert_func>
 800606c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006070:	6006      	str	r6, [r0, #0]
 8006072:	60c6      	str	r6, [r0, #12]
 8006074:	b13c      	cbz	r4, 8006086 <_Bfree+0x3a>
 8006076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006078:	6862      	ldr	r2, [r4, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006080:	6021      	str	r1, [r4, #0]
 8006082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	08007a25 	.word	0x08007a25
 800608c:	08007aac 	.word	0x08007aac

08006090 <__multadd>:
 8006090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006094:	4698      	mov	r8, r3
 8006096:	460c      	mov	r4, r1
 8006098:	2300      	movs	r3, #0
 800609a:	690e      	ldr	r6, [r1, #16]
 800609c:	4607      	mov	r7, r0
 800609e:	f101 0014 	add.w	r0, r1, #20
 80060a2:	6805      	ldr	r5, [r0, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	b2a9      	uxth	r1, r5
 80060a8:	fb02 8101 	mla	r1, r2, r1, r8
 80060ac:	0c2d      	lsrs	r5, r5, #16
 80060ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80060b2:	fb02 c505 	mla	r5, r2, r5, ip
 80060b6:	b289      	uxth	r1, r1
 80060b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80060bc:	429e      	cmp	r6, r3
 80060be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80060c2:	f840 1b04 	str.w	r1, [r0], #4
 80060c6:	dcec      	bgt.n	80060a2 <__multadd+0x12>
 80060c8:	f1b8 0f00 	cmp.w	r8, #0
 80060cc:	d022      	beq.n	8006114 <__multadd+0x84>
 80060ce:	68a3      	ldr	r3, [r4, #8]
 80060d0:	42b3      	cmp	r3, r6
 80060d2:	dc19      	bgt.n	8006108 <__multadd+0x78>
 80060d4:	6861      	ldr	r1, [r4, #4]
 80060d6:	4638      	mov	r0, r7
 80060d8:	3101      	adds	r1, #1
 80060da:	f7ff ff77 	bl	8005fcc <_Balloc>
 80060de:	4605      	mov	r5, r0
 80060e0:	b928      	cbnz	r0, 80060ee <__multadd+0x5e>
 80060e2:	4602      	mov	r2, r0
 80060e4:	21b5      	movs	r1, #181	; 0xb5
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <__multadd+0x8c>)
 80060e8:	480d      	ldr	r0, [pc, #52]	; (8006120 <__multadd+0x90>)
 80060ea:	f000 fd11 	bl	8006b10 <__assert_func>
 80060ee:	6922      	ldr	r2, [r4, #16]
 80060f0:	f104 010c 	add.w	r1, r4, #12
 80060f4:	3202      	adds	r2, #2
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	300c      	adds	r0, #12
 80060fa:	f7ff ff59 	bl	8005fb0 <memcpy>
 80060fe:	4621      	mov	r1, r4
 8006100:	4638      	mov	r0, r7
 8006102:	f7ff ffa3 	bl	800604c <_Bfree>
 8006106:	462c      	mov	r4, r5
 8006108:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800610c:	3601      	adds	r6, #1
 800610e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006112:	6126      	str	r6, [r4, #16]
 8006114:	4620      	mov	r0, r4
 8006116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800611a:	bf00      	nop
 800611c:	08007a9b 	.word	0x08007a9b
 8006120:	08007aac 	.word	0x08007aac

08006124 <__hi0bits>:
 8006124:	0c02      	lsrs	r2, r0, #16
 8006126:	0412      	lsls	r2, r2, #16
 8006128:	4603      	mov	r3, r0
 800612a:	b9ca      	cbnz	r2, 8006160 <__hi0bits+0x3c>
 800612c:	0403      	lsls	r3, r0, #16
 800612e:	2010      	movs	r0, #16
 8006130:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006134:	bf04      	itt	eq
 8006136:	021b      	lsleq	r3, r3, #8
 8006138:	3008      	addeq	r0, #8
 800613a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800613e:	bf04      	itt	eq
 8006140:	011b      	lsleq	r3, r3, #4
 8006142:	3004      	addeq	r0, #4
 8006144:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006148:	bf04      	itt	eq
 800614a:	009b      	lsleq	r3, r3, #2
 800614c:	3002      	addeq	r0, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	db05      	blt.n	800615e <__hi0bits+0x3a>
 8006152:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006156:	f100 0001 	add.w	r0, r0, #1
 800615a:	bf08      	it	eq
 800615c:	2020      	moveq	r0, #32
 800615e:	4770      	bx	lr
 8006160:	2000      	movs	r0, #0
 8006162:	e7e5      	b.n	8006130 <__hi0bits+0xc>

08006164 <__lo0bits>:
 8006164:	6803      	ldr	r3, [r0, #0]
 8006166:	4602      	mov	r2, r0
 8006168:	f013 0007 	ands.w	r0, r3, #7
 800616c:	d00b      	beq.n	8006186 <__lo0bits+0x22>
 800616e:	07d9      	lsls	r1, r3, #31
 8006170:	d422      	bmi.n	80061b8 <__lo0bits+0x54>
 8006172:	0798      	lsls	r0, r3, #30
 8006174:	bf49      	itett	mi
 8006176:	085b      	lsrmi	r3, r3, #1
 8006178:	089b      	lsrpl	r3, r3, #2
 800617a:	2001      	movmi	r0, #1
 800617c:	6013      	strmi	r3, [r2, #0]
 800617e:	bf5c      	itt	pl
 8006180:	2002      	movpl	r0, #2
 8006182:	6013      	strpl	r3, [r2, #0]
 8006184:	4770      	bx	lr
 8006186:	b299      	uxth	r1, r3
 8006188:	b909      	cbnz	r1, 800618e <__lo0bits+0x2a>
 800618a:	2010      	movs	r0, #16
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006192:	bf04      	itt	eq
 8006194:	0a1b      	lsreq	r3, r3, #8
 8006196:	3008      	addeq	r0, #8
 8006198:	0719      	lsls	r1, r3, #28
 800619a:	bf04      	itt	eq
 800619c:	091b      	lsreq	r3, r3, #4
 800619e:	3004      	addeq	r0, #4
 80061a0:	0799      	lsls	r1, r3, #30
 80061a2:	bf04      	itt	eq
 80061a4:	089b      	lsreq	r3, r3, #2
 80061a6:	3002      	addeq	r0, #2
 80061a8:	07d9      	lsls	r1, r3, #31
 80061aa:	d403      	bmi.n	80061b4 <__lo0bits+0x50>
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	f100 0001 	add.w	r0, r0, #1
 80061b2:	d003      	beq.n	80061bc <__lo0bits+0x58>
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4770      	bx	lr
 80061b8:	2000      	movs	r0, #0
 80061ba:	4770      	bx	lr
 80061bc:	2020      	movs	r0, #32
 80061be:	4770      	bx	lr

080061c0 <__i2b>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	460c      	mov	r4, r1
 80061c4:	2101      	movs	r1, #1
 80061c6:	f7ff ff01 	bl	8005fcc <_Balloc>
 80061ca:	4602      	mov	r2, r0
 80061cc:	b928      	cbnz	r0, 80061da <__i2b+0x1a>
 80061ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061d2:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <__i2b+0x24>)
 80061d4:	4804      	ldr	r0, [pc, #16]	; (80061e8 <__i2b+0x28>)
 80061d6:	f000 fc9b 	bl	8006b10 <__assert_func>
 80061da:	2301      	movs	r3, #1
 80061dc:	6144      	str	r4, [r0, #20]
 80061de:	6103      	str	r3, [r0, #16]
 80061e0:	bd10      	pop	{r4, pc}
 80061e2:	bf00      	nop
 80061e4:	08007a9b 	.word	0x08007a9b
 80061e8:	08007aac 	.word	0x08007aac

080061ec <__multiply>:
 80061ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	4614      	mov	r4, r2
 80061f2:	690a      	ldr	r2, [r1, #16]
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	460d      	mov	r5, r1
 80061f8:	429a      	cmp	r2, r3
 80061fa:	bfbe      	ittt	lt
 80061fc:	460b      	movlt	r3, r1
 80061fe:	4625      	movlt	r5, r4
 8006200:	461c      	movlt	r4, r3
 8006202:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006206:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800620a:	68ab      	ldr	r3, [r5, #8]
 800620c:	6869      	ldr	r1, [r5, #4]
 800620e:	eb0a 0709 	add.w	r7, sl, r9
 8006212:	42bb      	cmp	r3, r7
 8006214:	b085      	sub	sp, #20
 8006216:	bfb8      	it	lt
 8006218:	3101      	addlt	r1, #1
 800621a:	f7ff fed7 	bl	8005fcc <_Balloc>
 800621e:	b930      	cbnz	r0, 800622e <__multiply+0x42>
 8006220:	4602      	mov	r2, r0
 8006222:	f240 115d 	movw	r1, #349	; 0x15d
 8006226:	4b41      	ldr	r3, [pc, #260]	; (800632c <__multiply+0x140>)
 8006228:	4841      	ldr	r0, [pc, #260]	; (8006330 <__multiply+0x144>)
 800622a:	f000 fc71 	bl	8006b10 <__assert_func>
 800622e:	f100 0614 	add.w	r6, r0, #20
 8006232:	4633      	mov	r3, r6
 8006234:	2200      	movs	r2, #0
 8006236:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800623a:	4543      	cmp	r3, r8
 800623c:	d31e      	bcc.n	800627c <__multiply+0x90>
 800623e:	f105 0c14 	add.w	ip, r5, #20
 8006242:	f104 0314 	add.w	r3, r4, #20
 8006246:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800624a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800624e:	9202      	str	r2, [sp, #8]
 8006250:	ebac 0205 	sub.w	r2, ip, r5
 8006254:	3a15      	subs	r2, #21
 8006256:	f022 0203 	bic.w	r2, r2, #3
 800625a:	3204      	adds	r2, #4
 800625c:	f105 0115 	add.w	r1, r5, #21
 8006260:	458c      	cmp	ip, r1
 8006262:	bf38      	it	cc
 8006264:	2204      	movcc	r2, #4
 8006266:	9201      	str	r2, [sp, #4]
 8006268:	9a02      	ldr	r2, [sp, #8]
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	429a      	cmp	r2, r3
 800626e:	d808      	bhi.n	8006282 <__multiply+0x96>
 8006270:	2f00      	cmp	r7, #0
 8006272:	dc55      	bgt.n	8006320 <__multiply+0x134>
 8006274:	6107      	str	r7, [r0, #16]
 8006276:	b005      	add	sp, #20
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	f843 2b04 	str.w	r2, [r3], #4
 8006280:	e7db      	b.n	800623a <__multiply+0x4e>
 8006282:	f8b3 a000 	ldrh.w	sl, [r3]
 8006286:	f1ba 0f00 	cmp.w	sl, #0
 800628a:	d020      	beq.n	80062ce <__multiply+0xe2>
 800628c:	46b1      	mov	r9, r6
 800628e:	2200      	movs	r2, #0
 8006290:	f105 0e14 	add.w	lr, r5, #20
 8006294:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006298:	f8d9 b000 	ldr.w	fp, [r9]
 800629c:	b2a1      	uxth	r1, r4
 800629e:	fa1f fb8b 	uxth.w	fp, fp
 80062a2:	fb0a b101 	mla	r1, sl, r1, fp
 80062a6:	4411      	add	r1, r2
 80062a8:	f8d9 2000 	ldr.w	r2, [r9]
 80062ac:	0c24      	lsrs	r4, r4, #16
 80062ae:	0c12      	lsrs	r2, r2, #16
 80062b0:	fb0a 2404 	mla	r4, sl, r4, r2
 80062b4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80062b8:	b289      	uxth	r1, r1
 80062ba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80062be:	45f4      	cmp	ip, lr
 80062c0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80062c4:	f849 1b04 	str.w	r1, [r9], #4
 80062c8:	d8e4      	bhi.n	8006294 <__multiply+0xa8>
 80062ca:	9901      	ldr	r1, [sp, #4]
 80062cc:	5072      	str	r2, [r6, r1]
 80062ce:	9a03      	ldr	r2, [sp, #12]
 80062d0:	3304      	adds	r3, #4
 80062d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062d6:	f1b9 0f00 	cmp.w	r9, #0
 80062da:	d01f      	beq.n	800631c <__multiply+0x130>
 80062dc:	46b6      	mov	lr, r6
 80062de:	f04f 0a00 	mov.w	sl, #0
 80062e2:	6834      	ldr	r4, [r6, #0]
 80062e4:	f105 0114 	add.w	r1, r5, #20
 80062e8:	880a      	ldrh	r2, [r1, #0]
 80062ea:	f8be b002 	ldrh.w	fp, [lr, #2]
 80062ee:	b2a4      	uxth	r4, r4
 80062f0:	fb09 b202 	mla	r2, r9, r2, fp
 80062f4:	4492      	add	sl, r2
 80062f6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80062fa:	f84e 4b04 	str.w	r4, [lr], #4
 80062fe:	f851 4b04 	ldr.w	r4, [r1], #4
 8006302:	f8be 2000 	ldrh.w	r2, [lr]
 8006306:	0c24      	lsrs	r4, r4, #16
 8006308:	fb09 2404 	mla	r4, r9, r4, r2
 800630c:	458c      	cmp	ip, r1
 800630e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006312:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006316:	d8e7      	bhi.n	80062e8 <__multiply+0xfc>
 8006318:	9a01      	ldr	r2, [sp, #4]
 800631a:	50b4      	str	r4, [r6, r2]
 800631c:	3604      	adds	r6, #4
 800631e:	e7a3      	b.n	8006268 <__multiply+0x7c>
 8006320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1a5      	bne.n	8006274 <__multiply+0x88>
 8006328:	3f01      	subs	r7, #1
 800632a:	e7a1      	b.n	8006270 <__multiply+0x84>
 800632c:	08007a9b 	.word	0x08007a9b
 8006330:	08007aac 	.word	0x08007aac

08006334 <__pow5mult>:
 8006334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006338:	4615      	mov	r5, r2
 800633a:	f012 0203 	ands.w	r2, r2, #3
 800633e:	4606      	mov	r6, r0
 8006340:	460f      	mov	r7, r1
 8006342:	d007      	beq.n	8006354 <__pow5mult+0x20>
 8006344:	4c25      	ldr	r4, [pc, #148]	; (80063dc <__pow5mult+0xa8>)
 8006346:	3a01      	subs	r2, #1
 8006348:	2300      	movs	r3, #0
 800634a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800634e:	f7ff fe9f 	bl	8006090 <__multadd>
 8006352:	4607      	mov	r7, r0
 8006354:	10ad      	asrs	r5, r5, #2
 8006356:	d03d      	beq.n	80063d4 <__pow5mult+0xa0>
 8006358:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800635a:	b97c      	cbnz	r4, 800637c <__pow5mult+0x48>
 800635c:	2010      	movs	r0, #16
 800635e:	f7ff fe11 	bl	8005f84 <malloc>
 8006362:	4602      	mov	r2, r0
 8006364:	6270      	str	r0, [r6, #36]	; 0x24
 8006366:	b928      	cbnz	r0, 8006374 <__pow5mult+0x40>
 8006368:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800636c:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <__pow5mult+0xac>)
 800636e:	481d      	ldr	r0, [pc, #116]	; (80063e4 <__pow5mult+0xb0>)
 8006370:	f000 fbce 	bl	8006b10 <__assert_func>
 8006374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006378:	6004      	str	r4, [r0, #0]
 800637a:	60c4      	str	r4, [r0, #12]
 800637c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006384:	b94c      	cbnz	r4, 800639a <__pow5mult+0x66>
 8006386:	f240 2171 	movw	r1, #625	; 0x271
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff ff18 	bl	80061c0 <__i2b>
 8006390:	2300      	movs	r3, #0
 8006392:	4604      	mov	r4, r0
 8006394:	f8c8 0008 	str.w	r0, [r8, #8]
 8006398:	6003      	str	r3, [r0, #0]
 800639a:	f04f 0900 	mov.w	r9, #0
 800639e:	07eb      	lsls	r3, r5, #31
 80063a0:	d50a      	bpl.n	80063b8 <__pow5mult+0x84>
 80063a2:	4639      	mov	r1, r7
 80063a4:	4622      	mov	r2, r4
 80063a6:	4630      	mov	r0, r6
 80063a8:	f7ff ff20 	bl	80061ec <__multiply>
 80063ac:	4680      	mov	r8, r0
 80063ae:	4639      	mov	r1, r7
 80063b0:	4630      	mov	r0, r6
 80063b2:	f7ff fe4b 	bl	800604c <_Bfree>
 80063b6:	4647      	mov	r7, r8
 80063b8:	106d      	asrs	r5, r5, #1
 80063ba:	d00b      	beq.n	80063d4 <__pow5mult+0xa0>
 80063bc:	6820      	ldr	r0, [r4, #0]
 80063be:	b938      	cbnz	r0, 80063d0 <__pow5mult+0x9c>
 80063c0:	4622      	mov	r2, r4
 80063c2:	4621      	mov	r1, r4
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7ff ff11 	bl	80061ec <__multiply>
 80063ca:	6020      	str	r0, [r4, #0]
 80063cc:	f8c0 9000 	str.w	r9, [r0]
 80063d0:	4604      	mov	r4, r0
 80063d2:	e7e4      	b.n	800639e <__pow5mult+0x6a>
 80063d4:	4638      	mov	r0, r7
 80063d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063da:	bf00      	nop
 80063dc:	08007c00 	.word	0x08007c00
 80063e0:	08007a25 	.word	0x08007a25
 80063e4:	08007aac 	.word	0x08007aac

080063e8 <__lshift>:
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	460c      	mov	r4, r1
 80063ee:	4607      	mov	r7, r0
 80063f0:	4691      	mov	r9, r2
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	6849      	ldr	r1, [r1, #4]
 80063f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006400:	f108 0601 	add.w	r6, r8, #1
 8006404:	42b3      	cmp	r3, r6
 8006406:	db0b      	blt.n	8006420 <__lshift+0x38>
 8006408:	4638      	mov	r0, r7
 800640a:	f7ff fddf 	bl	8005fcc <_Balloc>
 800640e:	4605      	mov	r5, r0
 8006410:	b948      	cbnz	r0, 8006426 <__lshift+0x3e>
 8006412:	4602      	mov	r2, r0
 8006414:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006418:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <__lshift+0xd0>)
 800641a:	4828      	ldr	r0, [pc, #160]	; (80064bc <__lshift+0xd4>)
 800641c:	f000 fb78 	bl	8006b10 <__assert_func>
 8006420:	3101      	adds	r1, #1
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	e7ee      	b.n	8006404 <__lshift+0x1c>
 8006426:	2300      	movs	r3, #0
 8006428:	f100 0114 	add.w	r1, r0, #20
 800642c:	f100 0210 	add.w	r2, r0, #16
 8006430:	4618      	mov	r0, r3
 8006432:	4553      	cmp	r3, sl
 8006434:	db33      	blt.n	800649e <__lshift+0xb6>
 8006436:	6920      	ldr	r0, [r4, #16]
 8006438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800643c:	f104 0314 	add.w	r3, r4, #20
 8006440:	f019 091f 	ands.w	r9, r9, #31
 8006444:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006448:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800644c:	d02b      	beq.n	80064a6 <__lshift+0xbe>
 800644e:	468a      	mov	sl, r1
 8006450:	2200      	movs	r2, #0
 8006452:	f1c9 0e20 	rsb	lr, r9, #32
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	fa00 f009 	lsl.w	r0, r0, r9
 800645c:	4302      	orrs	r2, r0
 800645e:	f84a 2b04 	str.w	r2, [sl], #4
 8006462:	f853 2b04 	ldr.w	r2, [r3], #4
 8006466:	459c      	cmp	ip, r3
 8006468:	fa22 f20e 	lsr.w	r2, r2, lr
 800646c:	d8f3      	bhi.n	8006456 <__lshift+0x6e>
 800646e:	ebac 0304 	sub.w	r3, ip, r4
 8006472:	3b15      	subs	r3, #21
 8006474:	f023 0303 	bic.w	r3, r3, #3
 8006478:	3304      	adds	r3, #4
 800647a:	f104 0015 	add.w	r0, r4, #21
 800647e:	4584      	cmp	ip, r0
 8006480:	bf38      	it	cc
 8006482:	2304      	movcc	r3, #4
 8006484:	50ca      	str	r2, [r1, r3]
 8006486:	b10a      	cbz	r2, 800648c <__lshift+0xa4>
 8006488:	f108 0602 	add.w	r6, r8, #2
 800648c:	3e01      	subs	r6, #1
 800648e:	4638      	mov	r0, r7
 8006490:	4621      	mov	r1, r4
 8006492:	612e      	str	r6, [r5, #16]
 8006494:	f7ff fdda 	bl	800604c <_Bfree>
 8006498:	4628      	mov	r0, r5
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	f842 0f04 	str.w	r0, [r2, #4]!
 80064a2:	3301      	adds	r3, #1
 80064a4:	e7c5      	b.n	8006432 <__lshift+0x4a>
 80064a6:	3904      	subs	r1, #4
 80064a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ac:	459c      	cmp	ip, r3
 80064ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80064b2:	d8f9      	bhi.n	80064a8 <__lshift+0xc0>
 80064b4:	e7ea      	b.n	800648c <__lshift+0xa4>
 80064b6:	bf00      	nop
 80064b8:	08007a9b 	.word	0x08007a9b
 80064bc:	08007aac 	.word	0x08007aac

080064c0 <__mcmp>:
 80064c0:	4603      	mov	r3, r0
 80064c2:	690a      	ldr	r2, [r1, #16]
 80064c4:	6900      	ldr	r0, [r0, #16]
 80064c6:	b530      	push	{r4, r5, lr}
 80064c8:	1a80      	subs	r0, r0, r2
 80064ca:	d10d      	bne.n	80064e8 <__mcmp+0x28>
 80064cc:	3314      	adds	r3, #20
 80064ce:	3114      	adds	r1, #20
 80064d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80064d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80064d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064e0:	4295      	cmp	r5, r2
 80064e2:	d002      	beq.n	80064ea <__mcmp+0x2a>
 80064e4:	d304      	bcc.n	80064f0 <__mcmp+0x30>
 80064e6:	2001      	movs	r0, #1
 80064e8:	bd30      	pop	{r4, r5, pc}
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	d3f4      	bcc.n	80064d8 <__mcmp+0x18>
 80064ee:	e7fb      	b.n	80064e8 <__mcmp+0x28>
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	e7f8      	b.n	80064e8 <__mcmp+0x28>
	...

080064f8 <__mdiff>:
 80064f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	460c      	mov	r4, r1
 80064fe:	4606      	mov	r6, r0
 8006500:	4611      	mov	r1, r2
 8006502:	4620      	mov	r0, r4
 8006504:	4692      	mov	sl, r2
 8006506:	f7ff ffdb 	bl	80064c0 <__mcmp>
 800650a:	1e05      	subs	r5, r0, #0
 800650c:	d111      	bne.n	8006532 <__mdiff+0x3a>
 800650e:	4629      	mov	r1, r5
 8006510:	4630      	mov	r0, r6
 8006512:	f7ff fd5b 	bl	8005fcc <_Balloc>
 8006516:	4602      	mov	r2, r0
 8006518:	b928      	cbnz	r0, 8006526 <__mdiff+0x2e>
 800651a:	f240 2132 	movw	r1, #562	; 0x232
 800651e:	4b3c      	ldr	r3, [pc, #240]	; (8006610 <__mdiff+0x118>)
 8006520:	483c      	ldr	r0, [pc, #240]	; (8006614 <__mdiff+0x11c>)
 8006522:	f000 faf5 	bl	8006b10 <__assert_func>
 8006526:	2301      	movs	r3, #1
 8006528:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800652c:	4610      	mov	r0, r2
 800652e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	bfa4      	itt	ge
 8006534:	4653      	movge	r3, sl
 8006536:	46a2      	movge	sl, r4
 8006538:	4630      	mov	r0, r6
 800653a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800653e:	bfa6      	itte	ge
 8006540:	461c      	movge	r4, r3
 8006542:	2500      	movge	r5, #0
 8006544:	2501      	movlt	r5, #1
 8006546:	f7ff fd41 	bl	8005fcc <_Balloc>
 800654a:	4602      	mov	r2, r0
 800654c:	b918      	cbnz	r0, 8006556 <__mdiff+0x5e>
 800654e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006552:	4b2f      	ldr	r3, [pc, #188]	; (8006610 <__mdiff+0x118>)
 8006554:	e7e4      	b.n	8006520 <__mdiff+0x28>
 8006556:	f100 0814 	add.w	r8, r0, #20
 800655a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800655e:	60c5      	str	r5, [r0, #12]
 8006560:	f04f 0c00 	mov.w	ip, #0
 8006564:	f10a 0514 	add.w	r5, sl, #20
 8006568:	f10a 0010 	add.w	r0, sl, #16
 800656c:	46c2      	mov	sl, r8
 800656e:	6926      	ldr	r6, [r4, #16]
 8006570:	f104 0914 	add.w	r9, r4, #20
 8006574:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006578:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800657c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006580:	f859 3b04 	ldr.w	r3, [r9], #4
 8006584:	fa1f f18b 	uxth.w	r1, fp
 8006588:	4461      	add	r1, ip
 800658a:	fa1f fc83 	uxth.w	ip, r3
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	eba1 010c 	sub.w	r1, r1, ip
 8006594:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006598:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800659c:	b289      	uxth	r1, r1
 800659e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065a2:	454e      	cmp	r6, r9
 80065a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065a8:	f84a 3b04 	str.w	r3, [sl], #4
 80065ac:	d8e6      	bhi.n	800657c <__mdiff+0x84>
 80065ae:	1b33      	subs	r3, r6, r4
 80065b0:	3b15      	subs	r3, #21
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	3415      	adds	r4, #21
 80065b8:	3304      	adds	r3, #4
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	bf38      	it	cc
 80065be:	2304      	movcc	r3, #4
 80065c0:	441d      	add	r5, r3
 80065c2:	4443      	add	r3, r8
 80065c4:	461e      	mov	r6, r3
 80065c6:	462c      	mov	r4, r5
 80065c8:	4574      	cmp	r4, lr
 80065ca:	d30e      	bcc.n	80065ea <__mdiff+0xf2>
 80065cc:	f10e 0103 	add.w	r1, lr, #3
 80065d0:	1b49      	subs	r1, r1, r5
 80065d2:	f021 0103 	bic.w	r1, r1, #3
 80065d6:	3d03      	subs	r5, #3
 80065d8:	45ae      	cmp	lr, r5
 80065da:	bf38      	it	cc
 80065dc:	2100      	movcc	r1, #0
 80065de:	4419      	add	r1, r3
 80065e0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80065e4:	b18b      	cbz	r3, 800660a <__mdiff+0x112>
 80065e6:	6117      	str	r7, [r2, #16]
 80065e8:	e7a0      	b.n	800652c <__mdiff+0x34>
 80065ea:	f854 8b04 	ldr.w	r8, [r4], #4
 80065ee:	fa1f f188 	uxth.w	r1, r8
 80065f2:	4461      	add	r1, ip
 80065f4:	1408      	asrs	r0, r1, #16
 80065f6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80065fa:	b289      	uxth	r1, r1
 80065fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006600:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006604:	f846 1b04 	str.w	r1, [r6], #4
 8006608:	e7de      	b.n	80065c8 <__mdiff+0xd0>
 800660a:	3f01      	subs	r7, #1
 800660c:	e7e8      	b.n	80065e0 <__mdiff+0xe8>
 800660e:	bf00      	nop
 8006610:	08007a9b 	.word	0x08007a9b
 8006614:	08007aac 	.word	0x08007aac

08006618 <__d2b>:
 8006618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800661c:	2101      	movs	r1, #1
 800661e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006622:	4690      	mov	r8, r2
 8006624:	461d      	mov	r5, r3
 8006626:	f7ff fcd1 	bl	8005fcc <_Balloc>
 800662a:	4604      	mov	r4, r0
 800662c:	b930      	cbnz	r0, 800663c <__d2b+0x24>
 800662e:	4602      	mov	r2, r0
 8006630:	f240 310a 	movw	r1, #778	; 0x30a
 8006634:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <__d2b+0xb0>)
 8006636:	4825      	ldr	r0, [pc, #148]	; (80066cc <__d2b+0xb4>)
 8006638:	f000 fa6a 	bl	8006b10 <__assert_func>
 800663c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006640:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006644:	bb2d      	cbnz	r5, 8006692 <__d2b+0x7a>
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	f1b8 0300 	subs.w	r3, r8, #0
 800664c:	d026      	beq.n	800669c <__d2b+0x84>
 800664e:	4668      	mov	r0, sp
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	f7ff fd87 	bl	8006164 <__lo0bits>
 8006656:	9900      	ldr	r1, [sp, #0]
 8006658:	b1f0      	cbz	r0, 8006698 <__d2b+0x80>
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	f1c0 0320 	rsb	r3, r0, #32
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	430b      	orrs	r3, r1
 8006666:	40c2      	lsrs	r2, r0
 8006668:	6163      	str	r3, [r4, #20]
 800666a:	9201      	str	r2, [sp, #4]
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	bf14      	ite	ne
 8006672:	2102      	movne	r1, #2
 8006674:	2101      	moveq	r1, #1
 8006676:	61a3      	str	r3, [r4, #24]
 8006678:	6121      	str	r1, [r4, #16]
 800667a:	b1c5      	cbz	r5, 80066ae <__d2b+0x96>
 800667c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006680:	4405      	add	r5, r0
 8006682:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006686:	603d      	str	r5, [r7, #0]
 8006688:	6030      	str	r0, [r6, #0]
 800668a:	4620      	mov	r0, r4
 800668c:	b002      	add	sp, #8
 800668e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006696:	e7d6      	b.n	8006646 <__d2b+0x2e>
 8006698:	6161      	str	r1, [r4, #20]
 800669a:	e7e7      	b.n	800666c <__d2b+0x54>
 800669c:	a801      	add	r0, sp, #4
 800669e:	f7ff fd61 	bl	8006164 <__lo0bits>
 80066a2:	2101      	movs	r1, #1
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	6121      	str	r1, [r4, #16]
 80066a8:	6163      	str	r3, [r4, #20]
 80066aa:	3020      	adds	r0, #32
 80066ac:	e7e5      	b.n	800667a <__d2b+0x62>
 80066ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80066b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066b6:	6038      	str	r0, [r7, #0]
 80066b8:	6918      	ldr	r0, [r3, #16]
 80066ba:	f7ff fd33 	bl	8006124 <__hi0bits>
 80066be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80066c2:	6031      	str	r1, [r6, #0]
 80066c4:	e7e1      	b.n	800668a <__d2b+0x72>
 80066c6:	bf00      	nop
 80066c8:	08007a9b 	.word	0x08007a9b
 80066cc:	08007aac 	.word	0x08007aac

080066d0 <_calloc_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	fb02 f501 	mul.w	r5, r2, r1
 80066d6:	4629      	mov	r1, r5
 80066d8:	f000 f854 	bl	8006784 <_malloc_r>
 80066dc:	4604      	mov	r4, r0
 80066de:	b118      	cbz	r0, 80066e8 <_calloc_r+0x18>
 80066e0:	462a      	mov	r2, r5
 80066e2:	2100      	movs	r1, #0
 80066e4:	f7fe f944 	bl	8004970 <memset>
 80066e8:	4620      	mov	r0, r4
 80066ea:	bd38      	pop	{r3, r4, r5, pc}

080066ec <_free_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4605      	mov	r5, r0
 80066f0:	2900      	cmp	r1, #0
 80066f2:	d043      	beq.n	800677c <_free_r+0x90>
 80066f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f8:	1f0c      	subs	r4, r1, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfb8      	it	lt
 80066fe:	18e4      	addlt	r4, r4, r3
 8006700:	f000 fa62 	bl	8006bc8 <__malloc_lock>
 8006704:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <_free_r+0x94>)
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	4610      	mov	r0, r2
 800670a:	b933      	cbnz	r3, 800671a <_free_r+0x2e>
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	6014      	str	r4, [r2, #0]
 8006710:	4628      	mov	r0, r5
 8006712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006716:	f000 ba5d 	b.w	8006bd4 <__malloc_unlock>
 800671a:	42a3      	cmp	r3, r4
 800671c:	d90a      	bls.n	8006734 <_free_r+0x48>
 800671e:	6821      	ldr	r1, [r4, #0]
 8006720:	1862      	adds	r2, r4, r1
 8006722:	4293      	cmp	r3, r2
 8006724:	bf01      	itttt	eq
 8006726:	681a      	ldreq	r2, [r3, #0]
 8006728:	685b      	ldreq	r3, [r3, #4]
 800672a:	1852      	addeq	r2, r2, r1
 800672c:	6022      	streq	r2, [r4, #0]
 800672e:	6063      	str	r3, [r4, #4]
 8006730:	6004      	str	r4, [r0, #0]
 8006732:	e7ed      	b.n	8006710 <_free_r+0x24>
 8006734:	461a      	mov	r2, r3
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	b10b      	cbz	r3, 800673e <_free_r+0x52>
 800673a:	42a3      	cmp	r3, r4
 800673c:	d9fa      	bls.n	8006734 <_free_r+0x48>
 800673e:	6811      	ldr	r1, [r2, #0]
 8006740:	1850      	adds	r0, r2, r1
 8006742:	42a0      	cmp	r0, r4
 8006744:	d10b      	bne.n	800675e <_free_r+0x72>
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	4401      	add	r1, r0
 800674a:	1850      	adds	r0, r2, r1
 800674c:	4283      	cmp	r3, r0
 800674e:	6011      	str	r1, [r2, #0]
 8006750:	d1de      	bne.n	8006710 <_free_r+0x24>
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4401      	add	r1, r0
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	6053      	str	r3, [r2, #4]
 800675c:	e7d8      	b.n	8006710 <_free_r+0x24>
 800675e:	d902      	bls.n	8006766 <_free_r+0x7a>
 8006760:	230c      	movs	r3, #12
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	e7d4      	b.n	8006710 <_free_r+0x24>
 8006766:	6820      	ldr	r0, [r4, #0]
 8006768:	1821      	adds	r1, r4, r0
 800676a:	428b      	cmp	r3, r1
 800676c:	bf01      	itttt	eq
 800676e:	6819      	ldreq	r1, [r3, #0]
 8006770:	685b      	ldreq	r3, [r3, #4]
 8006772:	1809      	addeq	r1, r1, r0
 8006774:	6021      	streq	r1, [r4, #0]
 8006776:	6063      	str	r3, [r4, #4]
 8006778:	6054      	str	r4, [r2, #4]
 800677a:	e7c9      	b.n	8006710 <_free_r+0x24>
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	bf00      	nop
 8006780:	20000334 	.word	0x20000334

08006784 <_malloc_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	1ccd      	adds	r5, r1, #3
 8006788:	f025 0503 	bic.w	r5, r5, #3
 800678c:	3508      	adds	r5, #8
 800678e:	2d0c      	cmp	r5, #12
 8006790:	bf38      	it	cc
 8006792:	250c      	movcc	r5, #12
 8006794:	2d00      	cmp	r5, #0
 8006796:	4606      	mov	r6, r0
 8006798:	db01      	blt.n	800679e <_malloc_r+0x1a>
 800679a:	42a9      	cmp	r1, r5
 800679c:	d903      	bls.n	80067a6 <_malloc_r+0x22>
 800679e:	230c      	movs	r3, #12
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	2000      	movs	r0, #0
 80067a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a6:	f000 fa0f 	bl	8006bc8 <__malloc_lock>
 80067aa:	4921      	ldr	r1, [pc, #132]	; (8006830 <_malloc_r+0xac>)
 80067ac:	680a      	ldr	r2, [r1, #0]
 80067ae:	4614      	mov	r4, r2
 80067b0:	b99c      	cbnz	r4, 80067da <_malloc_r+0x56>
 80067b2:	4f20      	ldr	r7, [pc, #128]	; (8006834 <_malloc_r+0xb0>)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	b923      	cbnz	r3, 80067c2 <_malloc_r+0x3e>
 80067b8:	4621      	mov	r1, r4
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f998 	bl	8006af0 <_sbrk_r>
 80067c0:	6038      	str	r0, [r7, #0]
 80067c2:	4629      	mov	r1, r5
 80067c4:	4630      	mov	r0, r6
 80067c6:	f000 f993 	bl	8006af0 <_sbrk_r>
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d123      	bne.n	8006816 <_malloc_r+0x92>
 80067ce:	230c      	movs	r3, #12
 80067d0:	4630      	mov	r0, r6
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	f000 f9fe 	bl	8006bd4 <__malloc_unlock>
 80067d8:	e7e3      	b.n	80067a2 <_malloc_r+0x1e>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	1b5b      	subs	r3, r3, r5
 80067de:	d417      	bmi.n	8006810 <_malloc_r+0x8c>
 80067e0:	2b0b      	cmp	r3, #11
 80067e2:	d903      	bls.n	80067ec <_malloc_r+0x68>
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	441c      	add	r4, r3
 80067e8:	6025      	str	r5, [r4, #0]
 80067ea:	e004      	b.n	80067f6 <_malloc_r+0x72>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	42a2      	cmp	r2, r4
 80067f0:	bf0c      	ite	eq
 80067f2:	600b      	streq	r3, [r1, #0]
 80067f4:	6053      	strne	r3, [r2, #4]
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 f9ec 	bl	8006bd4 <__malloc_unlock>
 80067fc:	f104 000b 	add.w	r0, r4, #11
 8006800:	1d23      	adds	r3, r4, #4
 8006802:	f020 0007 	bic.w	r0, r0, #7
 8006806:	1ac2      	subs	r2, r0, r3
 8006808:	d0cc      	beq.n	80067a4 <_malloc_r+0x20>
 800680a:	1a1b      	subs	r3, r3, r0
 800680c:	50a3      	str	r3, [r4, r2]
 800680e:	e7c9      	b.n	80067a4 <_malloc_r+0x20>
 8006810:	4622      	mov	r2, r4
 8006812:	6864      	ldr	r4, [r4, #4]
 8006814:	e7cc      	b.n	80067b0 <_malloc_r+0x2c>
 8006816:	1cc4      	adds	r4, r0, #3
 8006818:	f024 0403 	bic.w	r4, r4, #3
 800681c:	42a0      	cmp	r0, r4
 800681e:	d0e3      	beq.n	80067e8 <_malloc_r+0x64>
 8006820:	1a21      	subs	r1, r4, r0
 8006822:	4630      	mov	r0, r6
 8006824:	f000 f964 	bl	8006af0 <_sbrk_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d1dd      	bne.n	80067e8 <_malloc_r+0x64>
 800682c:	e7cf      	b.n	80067ce <_malloc_r+0x4a>
 800682e:	bf00      	nop
 8006830:	20000334 	.word	0x20000334
 8006834:	20000338 	.word	0x20000338

08006838 <__ssputs_r>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	688e      	ldr	r6, [r1, #8]
 800683e:	4682      	mov	sl, r0
 8006840:	429e      	cmp	r6, r3
 8006842:	460c      	mov	r4, r1
 8006844:	4690      	mov	r8, r2
 8006846:	461f      	mov	r7, r3
 8006848:	d838      	bhi.n	80068bc <__ssputs_r+0x84>
 800684a:	898a      	ldrh	r2, [r1, #12]
 800684c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006850:	d032      	beq.n	80068b8 <__ssputs_r+0x80>
 8006852:	6825      	ldr	r5, [r4, #0]
 8006854:	6909      	ldr	r1, [r1, #16]
 8006856:	3301      	adds	r3, #1
 8006858:	eba5 0901 	sub.w	r9, r5, r1
 800685c:	6965      	ldr	r5, [r4, #20]
 800685e:	444b      	add	r3, r9
 8006860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006868:	106d      	asrs	r5, r5, #1
 800686a:	429d      	cmp	r5, r3
 800686c:	bf38      	it	cc
 800686e:	461d      	movcc	r5, r3
 8006870:	0553      	lsls	r3, r2, #21
 8006872:	d531      	bpl.n	80068d8 <__ssputs_r+0xa0>
 8006874:	4629      	mov	r1, r5
 8006876:	f7ff ff85 	bl	8006784 <_malloc_r>
 800687a:	4606      	mov	r6, r0
 800687c:	b950      	cbnz	r0, 8006894 <__ssputs_r+0x5c>
 800687e:	230c      	movs	r3, #12
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	f8ca 3000 	str.w	r3, [sl]
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006894:	464a      	mov	r2, r9
 8006896:	6921      	ldr	r1, [r4, #16]
 8006898:	f7ff fb8a 	bl	8005fb0 <memcpy>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	6126      	str	r6, [r4, #16]
 80068aa:	444e      	add	r6, r9
 80068ac:	6026      	str	r6, [r4, #0]
 80068ae:	463e      	mov	r6, r7
 80068b0:	6165      	str	r5, [r4, #20]
 80068b2:	eba5 0509 	sub.w	r5, r5, r9
 80068b6:	60a5      	str	r5, [r4, #8]
 80068b8:	42be      	cmp	r6, r7
 80068ba:	d900      	bls.n	80068be <__ssputs_r+0x86>
 80068bc:	463e      	mov	r6, r7
 80068be:	4632      	mov	r2, r6
 80068c0:	4641      	mov	r1, r8
 80068c2:	6820      	ldr	r0, [r4, #0]
 80068c4:	f000 f966 	bl	8006b94 <memmove>
 80068c8:	68a3      	ldr	r3, [r4, #8]
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	1b9b      	subs	r3, r3, r6
 80068ce:	4432      	add	r2, r6
 80068d0:	2000      	movs	r0, #0
 80068d2:	60a3      	str	r3, [r4, #8]
 80068d4:	6022      	str	r2, [r4, #0]
 80068d6:	e7db      	b.n	8006890 <__ssputs_r+0x58>
 80068d8:	462a      	mov	r2, r5
 80068da:	f000 f981 	bl	8006be0 <_realloc_r>
 80068de:	4606      	mov	r6, r0
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d1e1      	bne.n	80068a8 <__ssputs_r+0x70>
 80068e4:	4650      	mov	r0, sl
 80068e6:	6921      	ldr	r1, [r4, #16]
 80068e8:	f7ff ff00 	bl	80066ec <_free_r>
 80068ec:	e7c7      	b.n	800687e <__ssputs_r+0x46>
	...

080068f0 <_svfiprintf_r>:
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	4698      	mov	r8, r3
 80068f6:	898b      	ldrh	r3, [r1, #12]
 80068f8:	4607      	mov	r7, r0
 80068fa:	061b      	lsls	r3, r3, #24
 80068fc:	460d      	mov	r5, r1
 80068fe:	4614      	mov	r4, r2
 8006900:	b09d      	sub	sp, #116	; 0x74
 8006902:	d50e      	bpl.n	8006922 <_svfiprintf_r+0x32>
 8006904:	690b      	ldr	r3, [r1, #16]
 8006906:	b963      	cbnz	r3, 8006922 <_svfiprintf_r+0x32>
 8006908:	2140      	movs	r1, #64	; 0x40
 800690a:	f7ff ff3b 	bl	8006784 <_malloc_r>
 800690e:	6028      	str	r0, [r5, #0]
 8006910:	6128      	str	r0, [r5, #16]
 8006912:	b920      	cbnz	r0, 800691e <_svfiprintf_r+0x2e>
 8006914:	230c      	movs	r3, #12
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	e0d1      	b.n	8006ac2 <_svfiprintf_r+0x1d2>
 800691e:	2340      	movs	r3, #64	; 0x40
 8006920:	616b      	str	r3, [r5, #20]
 8006922:	2300      	movs	r3, #0
 8006924:	9309      	str	r3, [sp, #36]	; 0x24
 8006926:	2320      	movs	r3, #32
 8006928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800692c:	2330      	movs	r3, #48	; 0x30
 800692e:	f04f 0901 	mov.w	r9, #1
 8006932:	f8cd 800c 	str.w	r8, [sp, #12]
 8006936:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006adc <_svfiprintf_r+0x1ec>
 800693a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800693e:	4623      	mov	r3, r4
 8006940:	469a      	mov	sl, r3
 8006942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006946:	b10a      	cbz	r2, 800694c <_svfiprintf_r+0x5c>
 8006948:	2a25      	cmp	r2, #37	; 0x25
 800694a:	d1f9      	bne.n	8006940 <_svfiprintf_r+0x50>
 800694c:	ebba 0b04 	subs.w	fp, sl, r4
 8006950:	d00b      	beq.n	800696a <_svfiprintf_r+0x7a>
 8006952:	465b      	mov	r3, fp
 8006954:	4622      	mov	r2, r4
 8006956:	4629      	mov	r1, r5
 8006958:	4638      	mov	r0, r7
 800695a:	f7ff ff6d 	bl	8006838 <__ssputs_r>
 800695e:	3001      	adds	r0, #1
 8006960:	f000 80aa 	beq.w	8006ab8 <_svfiprintf_r+0x1c8>
 8006964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006966:	445a      	add	r2, fp
 8006968:	9209      	str	r2, [sp, #36]	; 0x24
 800696a:	f89a 3000 	ldrb.w	r3, [sl]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80a2 	beq.w	8006ab8 <_svfiprintf_r+0x1c8>
 8006974:	2300      	movs	r3, #0
 8006976:	f04f 32ff 	mov.w	r2, #4294967295
 800697a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800697e:	f10a 0a01 	add.w	sl, sl, #1
 8006982:	9304      	str	r3, [sp, #16]
 8006984:	9307      	str	r3, [sp, #28]
 8006986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800698a:	931a      	str	r3, [sp, #104]	; 0x68
 800698c:	4654      	mov	r4, sl
 800698e:	2205      	movs	r2, #5
 8006990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006994:	4851      	ldr	r0, [pc, #324]	; (8006adc <_svfiprintf_r+0x1ec>)
 8006996:	f7ff fafd 	bl	8005f94 <memchr>
 800699a:	9a04      	ldr	r2, [sp, #16]
 800699c:	b9d8      	cbnz	r0, 80069d6 <_svfiprintf_r+0xe6>
 800699e:	06d0      	lsls	r0, r2, #27
 80069a0:	bf44      	itt	mi
 80069a2:	2320      	movmi	r3, #32
 80069a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a8:	0711      	lsls	r1, r2, #28
 80069aa:	bf44      	itt	mi
 80069ac:	232b      	movmi	r3, #43	; 0x2b
 80069ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b2:	f89a 3000 	ldrb.w	r3, [sl]
 80069b6:	2b2a      	cmp	r3, #42	; 0x2a
 80069b8:	d015      	beq.n	80069e6 <_svfiprintf_r+0xf6>
 80069ba:	4654      	mov	r4, sl
 80069bc:	2000      	movs	r0, #0
 80069be:	f04f 0c0a 	mov.w	ip, #10
 80069c2:	9a07      	ldr	r2, [sp, #28]
 80069c4:	4621      	mov	r1, r4
 80069c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ca:	3b30      	subs	r3, #48	; 0x30
 80069cc:	2b09      	cmp	r3, #9
 80069ce:	d94e      	bls.n	8006a6e <_svfiprintf_r+0x17e>
 80069d0:	b1b0      	cbz	r0, 8006a00 <_svfiprintf_r+0x110>
 80069d2:	9207      	str	r2, [sp, #28]
 80069d4:	e014      	b.n	8006a00 <_svfiprintf_r+0x110>
 80069d6:	eba0 0308 	sub.w	r3, r0, r8
 80069da:	fa09 f303 	lsl.w	r3, r9, r3
 80069de:	4313      	orrs	r3, r2
 80069e0:	46a2      	mov	sl, r4
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	e7d2      	b.n	800698c <_svfiprintf_r+0x9c>
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	1d19      	adds	r1, r3, #4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	9103      	str	r1, [sp, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bfbb      	ittet	lt
 80069f2:	425b      	neglt	r3, r3
 80069f4:	f042 0202 	orrlt.w	r2, r2, #2
 80069f8:	9307      	strge	r3, [sp, #28]
 80069fa:	9307      	strlt	r3, [sp, #28]
 80069fc:	bfb8      	it	lt
 80069fe:	9204      	strlt	r2, [sp, #16]
 8006a00:	7823      	ldrb	r3, [r4, #0]
 8006a02:	2b2e      	cmp	r3, #46	; 0x2e
 8006a04:	d10c      	bne.n	8006a20 <_svfiprintf_r+0x130>
 8006a06:	7863      	ldrb	r3, [r4, #1]
 8006a08:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0a:	d135      	bne.n	8006a78 <_svfiprintf_r+0x188>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	3402      	adds	r4, #2
 8006a10:	1d1a      	adds	r2, r3, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	9203      	str	r2, [sp, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bfb8      	it	lt
 8006a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a1e:	9305      	str	r3, [sp, #20]
 8006a20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006aec <_svfiprintf_r+0x1fc>
 8006a24:	2203      	movs	r2, #3
 8006a26:	4650      	mov	r0, sl
 8006a28:	7821      	ldrb	r1, [r4, #0]
 8006a2a:	f7ff fab3 	bl	8005f94 <memchr>
 8006a2e:	b140      	cbz	r0, 8006a42 <_svfiprintf_r+0x152>
 8006a30:	2340      	movs	r3, #64	; 0x40
 8006a32:	eba0 000a 	sub.w	r0, r0, sl
 8006a36:	fa03 f000 	lsl.w	r0, r3, r0
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	3401      	adds	r4, #1
 8006a3e:	4303      	orrs	r3, r0
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a46:	2206      	movs	r2, #6
 8006a48:	4825      	ldr	r0, [pc, #148]	; (8006ae0 <_svfiprintf_r+0x1f0>)
 8006a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a4e:	f7ff faa1 	bl	8005f94 <memchr>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d038      	beq.n	8006ac8 <_svfiprintf_r+0x1d8>
 8006a56:	4b23      	ldr	r3, [pc, #140]	; (8006ae4 <_svfiprintf_r+0x1f4>)
 8006a58:	bb1b      	cbnz	r3, 8006aa2 <_svfiprintf_r+0x1b2>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	3307      	adds	r3, #7
 8006a5e:	f023 0307 	bic.w	r3, r3, #7
 8006a62:	3308      	adds	r3, #8
 8006a64:	9303      	str	r3, [sp, #12]
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	4433      	add	r3, r6
 8006a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6c:	e767      	b.n	800693e <_svfiprintf_r+0x4e>
 8006a6e:	460c      	mov	r4, r1
 8006a70:	2001      	movs	r0, #1
 8006a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a76:	e7a5      	b.n	80069c4 <_svfiprintf_r+0xd4>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f04f 0c0a 	mov.w	ip, #10
 8006a7e:	4619      	mov	r1, r3
 8006a80:	3401      	adds	r4, #1
 8006a82:	9305      	str	r3, [sp, #20]
 8006a84:	4620      	mov	r0, r4
 8006a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a8a:	3a30      	subs	r2, #48	; 0x30
 8006a8c:	2a09      	cmp	r2, #9
 8006a8e:	d903      	bls.n	8006a98 <_svfiprintf_r+0x1a8>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0c5      	beq.n	8006a20 <_svfiprintf_r+0x130>
 8006a94:	9105      	str	r1, [sp, #20]
 8006a96:	e7c3      	b.n	8006a20 <_svfiprintf_r+0x130>
 8006a98:	4604      	mov	r4, r0
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aa0:	e7f0      	b.n	8006a84 <_svfiprintf_r+0x194>
 8006aa2:	ab03      	add	r3, sp, #12
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	462a      	mov	r2, r5
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <_svfiprintf_r+0x1f8>)
 8006aac:	a904      	add	r1, sp, #16
 8006aae:	f7fe f805 	bl	8004abc <_printf_float>
 8006ab2:	1c42      	adds	r2, r0, #1
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	d1d6      	bne.n	8006a66 <_svfiprintf_r+0x176>
 8006ab8:	89ab      	ldrh	r3, [r5, #12]
 8006aba:	065b      	lsls	r3, r3, #25
 8006abc:	f53f af2c 	bmi.w	8006918 <_svfiprintf_r+0x28>
 8006ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac2:	b01d      	add	sp, #116	; 0x74
 8006ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac8:	ab03      	add	r3, sp, #12
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	462a      	mov	r2, r5
 8006ace:	4638      	mov	r0, r7
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <_svfiprintf_r+0x1f8>)
 8006ad2:	a904      	add	r1, sp, #16
 8006ad4:	f7fe fa8e 	bl	8004ff4 <_printf_i>
 8006ad8:	e7eb      	b.n	8006ab2 <_svfiprintf_r+0x1c2>
 8006ada:	bf00      	nop
 8006adc:	08007c0c 	.word	0x08007c0c
 8006ae0:	08007c16 	.word	0x08007c16
 8006ae4:	08004abd 	.word	0x08004abd
 8006ae8:	08006839 	.word	0x08006839
 8006aec:	08007c12 	.word	0x08007c12

08006af0 <_sbrk_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	2300      	movs	r3, #0
 8006af4:	4d05      	ldr	r5, [pc, #20]	; (8006b0c <_sbrk_r+0x1c>)
 8006af6:	4604      	mov	r4, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	f7fa fb12 	bl	8001124 <_sbrk>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_sbrk_r+0x1a>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_sbrk_r+0x1a>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	20000584 	.word	0x20000584

08006b10 <__assert_func>:
 8006b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b12:	4614      	mov	r4, r2
 8006b14:	461a      	mov	r2, r3
 8006b16:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <__assert_func+0x2c>)
 8006b18:	4605      	mov	r5, r0
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68d8      	ldr	r0, [r3, #12]
 8006b1e:	b14c      	cbz	r4, 8006b34 <__assert_func+0x24>
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <__assert_func+0x30>)
 8006b22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b26:	9100      	str	r1, [sp, #0]
 8006b28:	462b      	mov	r3, r5
 8006b2a:	4906      	ldr	r1, [pc, #24]	; (8006b44 <__assert_func+0x34>)
 8006b2c:	f000 f80e 	bl	8006b4c <fiprintf>
 8006b30:	f000 faa2 	bl	8007078 <abort>
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <__assert_func+0x38>)
 8006b36:	461c      	mov	r4, r3
 8006b38:	e7f3      	b.n	8006b22 <__assert_func+0x12>
 8006b3a:	bf00      	nop
 8006b3c:	20000020 	.word	0x20000020
 8006b40:	08007c1d 	.word	0x08007c1d
 8006b44:	08007c2a 	.word	0x08007c2a
 8006b48:	08007c58 	.word	0x08007c58

08006b4c <fiprintf>:
 8006b4c:	b40e      	push	{r1, r2, r3}
 8006b4e:	b503      	push	{r0, r1, lr}
 8006b50:	4601      	mov	r1, r0
 8006b52:	ab03      	add	r3, sp, #12
 8006b54:	4805      	ldr	r0, [pc, #20]	; (8006b6c <fiprintf+0x20>)
 8006b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b5a:	6800      	ldr	r0, [r0, #0]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	f000 f88d 	bl	8006c7c <_vfiprintf_r>
 8006b62:	b002      	add	sp, #8
 8006b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b68:	b003      	add	sp, #12
 8006b6a:	4770      	bx	lr
 8006b6c:	20000020 	.word	0x20000020

08006b70 <__ascii_mbtowc>:
 8006b70:	b082      	sub	sp, #8
 8006b72:	b901      	cbnz	r1, 8006b76 <__ascii_mbtowc+0x6>
 8006b74:	a901      	add	r1, sp, #4
 8006b76:	b142      	cbz	r2, 8006b8a <__ascii_mbtowc+0x1a>
 8006b78:	b14b      	cbz	r3, 8006b8e <__ascii_mbtowc+0x1e>
 8006b7a:	7813      	ldrb	r3, [r2, #0]
 8006b7c:	600b      	str	r3, [r1, #0]
 8006b7e:	7812      	ldrb	r2, [r2, #0]
 8006b80:	1e10      	subs	r0, r2, #0
 8006b82:	bf18      	it	ne
 8006b84:	2001      	movne	r0, #1
 8006b86:	b002      	add	sp, #8
 8006b88:	4770      	bx	lr
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	e7fb      	b.n	8006b86 <__ascii_mbtowc+0x16>
 8006b8e:	f06f 0001 	mvn.w	r0, #1
 8006b92:	e7f8      	b.n	8006b86 <__ascii_mbtowc+0x16>

08006b94 <memmove>:
 8006b94:	4288      	cmp	r0, r1
 8006b96:	b510      	push	{r4, lr}
 8006b98:	eb01 0402 	add.w	r4, r1, r2
 8006b9c:	d902      	bls.n	8006ba4 <memmove+0x10>
 8006b9e:	4284      	cmp	r4, r0
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	d807      	bhi.n	8006bb4 <memmove+0x20>
 8006ba4:	1e43      	subs	r3, r0, #1
 8006ba6:	42a1      	cmp	r1, r4
 8006ba8:	d008      	beq.n	8006bbc <memmove+0x28>
 8006baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bb2:	e7f8      	b.n	8006ba6 <memmove+0x12>
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4402      	add	r2, r0
 8006bb8:	428a      	cmp	r2, r1
 8006bba:	d100      	bne.n	8006bbe <memmove+0x2a>
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bc6:	e7f7      	b.n	8006bb8 <memmove+0x24>

08006bc8 <__malloc_lock>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__malloc_lock+0x8>)
 8006bca:	f000 bc15 	b.w	80073f8 <__retarget_lock_acquire_recursive>
 8006bce:	bf00      	nop
 8006bd0:	2000058c 	.word	0x2000058c

08006bd4 <__malloc_unlock>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__malloc_unlock+0x8>)
 8006bd6:	f000 bc10 	b.w	80073fa <__retarget_lock_release_recursive>
 8006bda:	bf00      	nop
 8006bdc:	2000058c 	.word	0x2000058c

08006be0 <_realloc_r>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	4607      	mov	r7, r0
 8006be4:	4614      	mov	r4, r2
 8006be6:	460e      	mov	r6, r1
 8006be8:	b921      	cbnz	r1, 8006bf4 <_realloc_r+0x14>
 8006bea:	4611      	mov	r1, r2
 8006bec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bf0:	f7ff bdc8 	b.w	8006784 <_malloc_r>
 8006bf4:	b922      	cbnz	r2, 8006c00 <_realloc_r+0x20>
 8006bf6:	f7ff fd79 	bl	80066ec <_free_r>
 8006bfa:	4625      	mov	r5, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c00:	f000 fc60 	bl	80074c4 <_malloc_usable_size_r>
 8006c04:	42a0      	cmp	r0, r4
 8006c06:	d20f      	bcs.n	8006c28 <_realloc_r+0x48>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	f7ff fdba 	bl	8006784 <_malloc_r>
 8006c10:	4605      	mov	r5, r0
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d0f2      	beq.n	8006bfc <_realloc_r+0x1c>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4622      	mov	r2, r4
 8006c1a:	f7ff f9c9 	bl	8005fb0 <memcpy>
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff fd63 	bl	80066ec <_free_r>
 8006c26:	e7e9      	b.n	8006bfc <_realloc_r+0x1c>
 8006c28:	4635      	mov	r5, r6
 8006c2a:	e7e7      	b.n	8006bfc <_realloc_r+0x1c>

08006c2c <__sfputc_r>:
 8006c2c:	6893      	ldr	r3, [r2, #8]
 8006c2e:	b410      	push	{r4}
 8006c30:	3b01      	subs	r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	6093      	str	r3, [r2, #8]
 8006c36:	da07      	bge.n	8006c48 <__sfputc_r+0x1c>
 8006c38:	6994      	ldr	r4, [r2, #24]
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	db01      	blt.n	8006c42 <__sfputc_r+0x16>
 8006c3e:	290a      	cmp	r1, #10
 8006c40:	d102      	bne.n	8006c48 <__sfputc_r+0x1c>
 8006c42:	bc10      	pop	{r4}
 8006c44:	f000 b94a 	b.w	8006edc <__swbuf_r>
 8006c48:	6813      	ldr	r3, [r2, #0]
 8006c4a:	1c58      	adds	r0, r3, #1
 8006c4c:	6010      	str	r0, [r2, #0]
 8006c4e:	7019      	strb	r1, [r3, #0]
 8006c50:	4608      	mov	r0, r1
 8006c52:	bc10      	pop	{r4}
 8006c54:	4770      	bx	lr

08006c56 <__sfputs_r>:
 8006c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	18d5      	adds	r5, r2, r3
 8006c60:	42ac      	cmp	r4, r5
 8006c62:	d101      	bne.n	8006c68 <__sfputs_r+0x12>
 8006c64:	2000      	movs	r0, #0
 8006c66:	e007      	b.n	8006c78 <__sfputs_r+0x22>
 8006c68:	463a      	mov	r2, r7
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c70:	f7ff ffdc 	bl	8006c2c <__sfputc_r>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d1f3      	bne.n	8006c60 <__sfputs_r+0xa>
 8006c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c7c <_vfiprintf_r>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	460d      	mov	r5, r1
 8006c82:	4614      	mov	r4, r2
 8006c84:	4698      	mov	r8, r3
 8006c86:	4606      	mov	r6, r0
 8006c88:	b09d      	sub	sp, #116	; 0x74
 8006c8a:	b118      	cbz	r0, 8006c94 <_vfiprintf_r+0x18>
 8006c8c:	6983      	ldr	r3, [r0, #24]
 8006c8e:	b90b      	cbnz	r3, 8006c94 <_vfiprintf_r+0x18>
 8006c90:	f000 fb14 	bl	80072bc <__sinit>
 8006c94:	4b89      	ldr	r3, [pc, #548]	; (8006ebc <_vfiprintf_r+0x240>)
 8006c96:	429d      	cmp	r5, r3
 8006c98:	d11b      	bne.n	8006cd2 <_vfiprintf_r+0x56>
 8006c9a:	6875      	ldr	r5, [r6, #4]
 8006c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_vfiprintf_r+0x32>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	059a      	lsls	r2, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_vfiprintf_r+0x32>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006caa:	f000 fba5 	bl	80073f8 <__retarget_lock_acquire_recursive>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	071b      	lsls	r3, r3, #28
 8006cb2:	d501      	bpl.n	8006cb8 <_vfiprintf_r+0x3c>
 8006cb4:	692b      	ldr	r3, [r5, #16]
 8006cb6:	b9eb      	cbnz	r3, 8006cf4 <_vfiprintf_r+0x78>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f000 f96e 	bl	8006f9c <__swsetup_r>
 8006cc0:	b1c0      	cbz	r0, 8006cf4 <_vfiprintf_r+0x78>
 8006cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cc4:	07dc      	lsls	r4, r3, #31
 8006cc6:	d50e      	bpl.n	8006ce6 <_vfiprintf_r+0x6a>
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	b01d      	add	sp, #116	; 0x74
 8006cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd2:	4b7b      	ldr	r3, [pc, #492]	; (8006ec0 <_vfiprintf_r+0x244>)
 8006cd4:	429d      	cmp	r5, r3
 8006cd6:	d101      	bne.n	8006cdc <_vfiprintf_r+0x60>
 8006cd8:	68b5      	ldr	r5, [r6, #8]
 8006cda:	e7df      	b.n	8006c9c <_vfiprintf_r+0x20>
 8006cdc:	4b79      	ldr	r3, [pc, #484]	; (8006ec4 <_vfiprintf_r+0x248>)
 8006cde:	429d      	cmp	r5, r3
 8006ce0:	bf08      	it	eq
 8006ce2:	68f5      	ldreq	r5, [r6, #12]
 8006ce4:	e7da      	b.n	8006c9c <_vfiprintf_r+0x20>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	0598      	lsls	r0, r3, #22
 8006cea:	d4ed      	bmi.n	8006cc8 <_vfiprintf_r+0x4c>
 8006cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cee:	f000 fb84 	bl	80073fa <__retarget_lock_release_recursive>
 8006cf2:	e7e9      	b.n	8006cc8 <_vfiprintf_r+0x4c>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfe:	2330      	movs	r3, #48	; 0x30
 8006d00:	f04f 0901 	mov.w	r9, #1
 8006d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d08:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ec8 <_vfiprintf_r+0x24c>
 8006d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d10:	4623      	mov	r3, r4
 8006d12:	469a      	mov	sl, r3
 8006d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d18:	b10a      	cbz	r2, 8006d1e <_vfiprintf_r+0xa2>
 8006d1a:	2a25      	cmp	r2, #37	; 0x25
 8006d1c:	d1f9      	bne.n	8006d12 <_vfiprintf_r+0x96>
 8006d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d22:	d00b      	beq.n	8006d3c <_vfiprintf_r+0xc0>
 8006d24:	465b      	mov	r3, fp
 8006d26:	4622      	mov	r2, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ff93 	bl	8006c56 <__sfputs_r>
 8006d30:	3001      	adds	r0, #1
 8006d32:	f000 80aa 	beq.w	8006e8a <_vfiprintf_r+0x20e>
 8006d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d38:	445a      	add	r2, fp
 8006d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80a2 	beq.w	8006e8a <_vfiprintf_r+0x20e>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d50:	f10a 0a01 	add.w	sl, sl, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d5e:	4654      	mov	r4, sl
 8006d60:	2205      	movs	r2, #5
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	4858      	ldr	r0, [pc, #352]	; (8006ec8 <_vfiprintf_r+0x24c>)
 8006d68:	f7ff f914 	bl	8005f94 <memchr>
 8006d6c:	9a04      	ldr	r2, [sp, #16]
 8006d6e:	b9d8      	cbnz	r0, 8006da8 <_vfiprintf_r+0x12c>
 8006d70:	06d1      	lsls	r1, r2, #27
 8006d72:	bf44      	itt	mi
 8006d74:	2320      	movmi	r3, #32
 8006d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7a:	0713      	lsls	r3, r2, #28
 8006d7c:	bf44      	itt	mi
 8006d7e:	232b      	movmi	r3, #43	; 0x2b
 8006d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d84:	f89a 3000 	ldrb.w	r3, [sl]
 8006d88:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8a:	d015      	beq.n	8006db8 <_vfiprintf_r+0x13c>
 8006d8c:	4654      	mov	r4, sl
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f04f 0c0a 	mov.w	ip, #10
 8006d94:	9a07      	ldr	r2, [sp, #28]
 8006d96:	4621      	mov	r1, r4
 8006d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d9c:	3b30      	subs	r3, #48	; 0x30
 8006d9e:	2b09      	cmp	r3, #9
 8006da0:	d94e      	bls.n	8006e40 <_vfiprintf_r+0x1c4>
 8006da2:	b1b0      	cbz	r0, 8006dd2 <_vfiprintf_r+0x156>
 8006da4:	9207      	str	r2, [sp, #28]
 8006da6:	e014      	b.n	8006dd2 <_vfiprintf_r+0x156>
 8006da8:	eba0 0308 	sub.w	r3, r0, r8
 8006dac:	fa09 f303 	lsl.w	r3, r9, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	46a2      	mov	sl, r4
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	e7d2      	b.n	8006d5e <_vfiprintf_r+0xe2>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	1d19      	adds	r1, r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bfbb      	ittet	lt
 8006dc4:	425b      	neglt	r3, r3
 8006dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dca:	9307      	strge	r3, [sp, #28]
 8006dcc:	9307      	strlt	r3, [sp, #28]
 8006dce:	bfb8      	it	lt
 8006dd0:	9204      	strlt	r2, [sp, #16]
 8006dd2:	7823      	ldrb	r3, [r4, #0]
 8006dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd6:	d10c      	bne.n	8006df2 <_vfiprintf_r+0x176>
 8006dd8:	7863      	ldrb	r3, [r4, #1]
 8006dda:	2b2a      	cmp	r3, #42	; 0x2a
 8006ddc:	d135      	bne.n	8006e4a <_vfiprintf_r+0x1ce>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	3402      	adds	r4, #2
 8006de2:	1d1a      	adds	r2, r3, #4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	9203      	str	r2, [sp, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bfb8      	it	lt
 8006dec:	f04f 33ff 	movlt.w	r3, #4294967295
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ed8 <_vfiprintf_r+0x25c>
 8006df6:	2203      	movs	r2, #3
 8006df8:	4650      	mov	r0, sl
 8006dfa:	7821      	ldrb	r1, [r4, #0]
 8006dfc:	f7ff f8ca 	bl	8005f94 <memchr>
 8006e00:	b140      	cbz	r0, 8006e14 <_vfiprintf_r+0x198>
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	eba0 000a 	sub.w	r0, r0, sl
 8006e08:	fa03 f000 	lsl.w	r0, r3, r0
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	3401      	adds	r4, #1
 8006e10:	4303      	orrs	r3, r0
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e18:	2206      	movs	r2, #6
 8006e1a:	482c      	ldr	r0, [pc, #176]	; (8006ecc <_vfiprintf_r+0x250>)
 8006e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e20:	f7ff f8b8 	bl	8005f94 <memchr>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d03f      	beq.n	8006ea8 <_vfiprintf_r+0x22c>
 8006e28:	4b29      	ldr	r3, [pc, #164]	; (8006ed0 <_vfiprintf_r+0x254>)
 8006e2a:	bb1b      	cbnz	r3, 8006e74 <_vfiprintf_r+0x1f8>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	3307      	adds	r3, #7
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	3308      	adds	r3, #8
 8006e36:	9303      	str	r3, [sp, #12]
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	443b      	add	r3, r7
 8006e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3e:	e767      	b.n	8006d10 <_vfiprintf_r+0x94>
 8006e40:	460c      	mov	r4, r1
 8006e42:	2001      	movs	r0, #1
 8006e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e48:	e7a5      	b.n	8006d96 <_vfiprintf_r+0x11a>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	4619      	mov	r1, r3
 8006e52:	3401      	adds	r4, #1
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	4620      	mov	r0, r4
 8006e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e5c:	3a30      	subs	r2, #48	; 0x30
 8006e5e:	2a09      	cmp	r2, #9
 8006e60:	d903      	bls.n	8006e6a <_vfiprintf_r+0x1ee>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0c5      	beq.n	8006df2 <_vfiprintf_r+0x176>
 8006e66:	9105      	str	r1, [sp, #20]
 8006e68:	e7c3      	b.n	8006df2 <_vfiprintf_r+0x176>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e72:	e7f0      	b.n	8006e56 <_vfiprintf_r+0x1da>
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <_vfiprintf_r+0x258>)
 8006e7e:	a904      	add	r1, sp, #16
 8006e80:	f7fd fe1c 	bl	8004abc <_printf_float>
 8006e84:	4607      	mov	r7, r0
 8006e86:	1c78      	adds	r0, r7, #1
 8006e88:	d1d6      	bne.n	8006e38 <_vfiprintf_r+0x1bc>
 8006e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e8c:	07d9      	lsls	r1, r3, #31
 8006e8e:	d405      	bmi.n	8006e9c <_vfiprintf_r+0x220>
 8006e90:	89ab      	ldrh	r3, [r5, #12]
 8006e92:	059a      	lsls	r2, r3, #22
 8006e94:	d402      	bmi.n	8006e9c <_vfiprintf_r+0x220>
 8006e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e98:	f000 faaf 	bl	80073fa <__retarget_lock_release_recursive>
 8006e9c:	89ab      	ldrh	r3, [r5, #12]
 8006e9e:	065b      	lsls	r3, r3, #25
 8006ea0:	f53f af12 	bmi.w	8006cc8 <_vfiprintf_r+0x4c>
 8006ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea6:	e711      	b.n	8006ccc <_vfiprintf_r+0x50>
 8006ea8:	ab03      	add	r3, sp, #12
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	462a      	mov	r2, r5
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <_vfiprintf_r+0x258>)
 8006eb2:	a904      	add	r1, sp, #16
 8006eb4:	f7fe f89e 	bl	8004ff4 <_printf_i>
 8006eb8:	e7e4      	b.n	8006e84 <_vfiprintf_r+0x208>
 8006eba:	bf00      	nop
 8006ebc:	08007d84 	.word	0x08007d84
 8006ec0:	08007da4 	.word	0x08007da4
 8006ec4:	08007d64 	.word	0x08007d64
 8006ec8:	08007c0c 	.word	0x08007c0c
 8006ecc:	08007c16 	.word	0x08007c16
 8006ed0:	08004abd 	.word	0x08004abd
 8006ed4:	08006c57 	.word	0x08006c57
 8006ed8:	08007c12 	.word	0x08007c12

08006edc <__swbuf_r>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	460e      	mov	r6, r1
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	b118      	cbz	r0, 8006eee <__swbuf_r+0x12>
 8006ee6:	6983      	ldr	r3, [r0, #24]
 8006ee8:	b90b      	cbnz	r3, 8006eee <__swbuf_r+0x12>
 8006eea:	f000 f9e7 	bl	80072bc <__sinit>
 8006eee:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <__swbuf_r+0x98>)
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	d12b      	bne.n	8006f4c <__swbuf_r+0x70>
 8006ef4:	686c      	ldr	r4, [r5, #4]
 8006ef6:	69a3      	ldr	r3, [r4, #24]
 8006ef8:	60a3      	str	r3, [r4, #8]
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	071a      	lsls	r2, r3, #28
 8006efe:	d52f      	bpl.n	8006f60 <__swbuf_r+0x84>
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	b36b      	cbz	r3, 8006f60 <__swbuf_r+0x84>
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	6820      	ldr	r0, [r4, #0]
 8006f08:	b2f6      	uxtb	r6, r6
 8006f0a:	1ac0      	subs	r0, r0, r3
 8006f0c:	6963      	ldr	r3, [r4, #20]
 8006f0e:	4637      	mov	r7, r6
 8006f10:	4283      	cmp	r3, r0
 8006f12:	dc04      	bgt.n	8006f1e <__swbuf_r+0x42>
 8006f14:	4621      	mov	r1, r4
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 f93c 	bl	8007194 <_fflush_r>
 8006f1c:	bb30      	cbnz	r0, 8006f6c <__swbuf_r+0x90>
 8006f1e:	68a3      	ldr	r3, [r4, #8]
 8006f20:	3001      	adds	r0, #1
 8006f22:	3b01      	subs	r3, #1
 8006f24:	60a3      	str	r3, [r4, #8]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	6022      	str	r2, [r4, #0]
 8006f2c:	701e      	strb	r6, [r3, #0]
 8006f2e:	6963      	ldr	r3, [r4, #20]
 8006f30:	4283      	cmp	r3, r0
 8006f32:	d004      	beq.n	8006f3e <__swbuf_r+0x62>
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	07db      	lsls	r3, r3, #31
 8006f38:	d506      	bpl.n	8006f48 <__swbuf_r+0x6c>
 8006f3a:	2e0a      	cmp	r6, #10
 8006f3c:	d104      	bne.n	8006f48 <__swbuf_r+0x6c>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 f927 	bl	8007194 <_fflush_r>
 8006f46:	b988      	cbnz	r0, 8006f6c <__swbuf_r+0x90>
 8006f48:	4638      	mov	r0, r7
 8006f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <__swbuf_r+0x9c>)
 8006f4e:	429c      	cmp	r4, r3
 8006f50:	d101      	bne.n	8006f56 <__swbuf_r+0x7a>
 8006f52:	68ac      	ldr	r4, [r5, #8]
 8006f54:	e7cf      	b.n	8006ef6 <__swbuf_r+0x1a>
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <__swbuf_r+0xa0>)
 8006f58:	429c      	cmp	r4, r3
 8006f5a:	bf08      	it	eq
 8006f5c:	68ec      	ldreq	r4, [r5, #12]
 8006f5e:	e7ca      	b.n	8006ef6 <__swbuf_r+0x1a>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 f81a 	bl	8006f9c <__swsetup_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d0cb      	beq.n	8006f04 <__swbuf_r+0x28>
 8006f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f70:	e7ea      	b.n	8006f48 <__swbuf_r+0x6c>
 8006f72:	bf00      	nop
 8006f74:	08007d84 	.word	0x08007d84
 8006f78:	08007da4 	.word	0x08007da4
 8006f7c:	08007d64 	.word	0x08007d64

08006f80 <__ascii_wctomb>:
 8006f80:	4603      	mov	r3, r0
 8006f82:	4608      	mov	r0, r1
 8006f84:	b141      	cbz	r1, 8006f98 <__ascii_wctomb+0x18>
 8006f86:	2aff      	cmp	r2, #255	; 0xff
 8006f88:	d904      	bls.n	8006f94 <__ascii_wctomb+0x14>
 8006f8a:	228a      	movs	r2, #138	; 0x8a
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	4770      	bx	lr
 8006f94:	2001      	movs	r0, #1
 8006f96:	700a      	strb	r2, [r1, #0]
 8006f98:	4770      	bx	lr
	...

08006f9c <__swsetup_r>:
 8006f9c:	4b32      	ldr	r3, [pc, #200]	; (8007068 <__swsetup_r+0xcc>)
 8006f9e:	b570      	push	{r4, r5, r6, lr}
 8006fa0:	681d      	ldr	r5, [r3, #0]
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	b125      	cbz	r5, 8006fb2 <__swsetup_r+0x16>
 8006fa8:	69ab      	ldr	r3, [r5, #24]
 8006faa:	b913      	cbnz	r3, 8006fb2 <__swsetup_r+0x16>
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 f985 	bl	80072bc <__sinit>
 8006fb2:	4b2e      	ldr	r3, [pc, #184]	; (800706c <__swsetup_r+0xd0>)
 8006fb4:	429c      	cmp	r4, r3
 8006fb6:	d10f      	bne.n	8006fd8 <__swsetup_r+0x3c>
 8006fb8:	686c      	ldr	r4, [r5, #4]
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fc0:	0719      	lsls	r1, r3, #28
 8006fc2:	d42c      	bmi.n	800701e <__swsetup_r+0x82>
 8006fc4:	06dd      	lsls	r5, r3, #27
 8006fc6:	d411      	bmi.n	8006fec <__swsetup_r+0x50>
 8006fc8:	2309      	movs	r3, #9
 8006fca:	6033      	str	r3, [r6, #0]
 8006fcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	e03e      	b.n	8007056 <__swsetup_r+0xba>
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <__swsetup_r+0xd4>)
 8006fda:	429c      	cmp	r4, r3
 8006fdc:	d101      	bne.n	8006fe2 <__swsetup_r+0x46>
 8006fde:	68ac      	ldr	r4, [r5, #8]
 8006fe0:	e7eb      	b.n	8006fba <__swsetup_r+0x1e>
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <__swsetup_r+0xd8>)
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	bf08      	it	eq
 8006fe8:	68ec      	ldreq	r4, [r5, #12]
 8006fea:	e7e6      	b.n	8006fba <__swsetup_r+0x1e>
 8006fec:	0758      	lsls	r0, r3, #29
 8006fee:	d512      	bpl.n	8007016 <__swsetup_r+0x7a>
 8006ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ff2:	b141      	cbz	r1, 8007006 <__swsetup_r+0x6a>
 8006ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ff8:	4299      	cmp	r1, r3
 8006ffa:	d002      	beq.n	8007002 <__swsetup_r+0x66>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7ff fb75 	bl	80066ec <_free_r>
 8007002:	2300      	movs	r3, #0
 8007004:	6363      	str	r3, [r4, #52]	; 0x34
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	2300      	movs	r3, #0
 8007010:	6063      	str	r3, [r4, #4]
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	f043 0308 	orr.w	r3, r3, #8
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	6923      	ldr	r3, [r4, #16]
 8007020:	b94b      	cbnz	r3, 8007036 <__swsetup_r+0x9a>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702c:	d003      	beq.n	8007036 <__swsetup_r+0x9a>
 800702e:	4621      	mov	r1, r4
 8007030:	4630      	mov	r0, r6
 8007032:	f000 fa07 	bl	8007444 <__smakebuf_r>
 8007036:	89a0      	ldrh	r0, [r4, #12]
 8007038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800703c:	f010 0301 	ands.w	r3, r0, #1
 8007040:	d00a      	beq.n	8007058 <__swsetup_r+0xbc>
 8007042:	2300      	movs	r3, #0
 8007044:	60a3      	str	r3, [r4, #8]
 8007046:	6963      	ldr	r3, [r4, #20]
 8007048:	425b      	negs	r3, r3
 800704a:	61a3      	str	r3, [r4, #24]
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	b943      	cbnz	r3, 8007062 <__swsetup_r+0xc6>
 8007050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007054:	d1ba      	bne.n	8006fcc <__swsetup_r+0x30>
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	0781      	lsls	r1, r0, #30
 800705a:	bf58      	it	pl
 800705c:	6963      	ldrpl	r3, [r4, #20]
 800705e:	60a3      	str	r3, [r4, #8]
 8007060:	e7f4      	b.n	800704c <__swsetup_r+0xb0>
 8007062:	2000      	movs	r0, #0
 8007064:	e7f7      	b.n	8007056 <__swsetup_r+0xba>
 8007066:	bf00      	nop
 8007068:	20000020 	.word	0x20000020
 800706c:	08007d84 	.word	0x08007d84
 8007070:	08007da4 	.word	0x08007da4
 8007074:	08007d64 	.word	0x08007d64

08007078 <abort>:
 8007078:	2006      	movs	r0, #6
 800707a:	b508      	push	{r3, lr}
 800707c:	f000 fa52 	bl	8007524 <raise>
 8007080:	2001      	movs	r0, #1
 8007082:	f7f9 ffdc 	bl	800103e <_exit>
	...

08007088 <__sflush_r>:
 8007088:	898a      	ldrh	r2, [r1, #12]
 800708a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708e:	4605      	mov	r5, r0
 8007090:	0710      	lsls	r0, r2, #28
 8007092:	460c      	mov	r4, r1
 8007094:	d458      	bmi.n	8007148 <__sflush_r+0xc0>
 8007096:	684b      	ldr	r3, [r1, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	dc05      	bgt.n	80070a8 <__sflush_r+0x20>
 800709c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	dc02      	bgt.n	80070a8 <__sflush_r+0x20>
 80070a2:	2000      	movs	r0, #0
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070aa:	2e00      	cmp	r6, #0
 80070ac:	d0f9      	beq.n	80070a2 <__sflush_r+0x1a>
 80070ae:	2300      	movs	r3, #0
 80070b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070b4:	682f      	ldr	r7, [r5, #0]
 80070b6:	602b      	str	r3, [r5, #0]
 80070b8:	d032      	beq.n	8007120 <__sflush_r+0x98>
 80070ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	075a      	lsls	r2, r3, #29
 80070c0:	d505      	bpl.n	80070ce <__sflush_r+0x46>
 80070c2:	6863      	ldr	r3, [r4, #4]
 80070c4:	1ac0      	subs	r0, r0, r3
 80070c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070c8:	b10b      	cbz	r3, 80070ce <__sflush_r+0x46>
 80070ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070cc:	1ac0      	subs	r0, r0, r3
 80070ce:	2300      	movs	r3, #0
 80070d0:	4602      	mov	r2, r0
 80070d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070d4:	4628      	mov	r0, r5
 80070d6:	6a21      	ldr	r1, [r4, #32]
 80070d8:	47b0      	blx	r6
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	d106      	bne.n	80070ee <__sflush_r+0x66>
 80070e0:	6829      	ldr	r1, [r5, #0]
 80070e2:	291d      	cmp	r1, #29
 80070e4:	d82c      	bhi.n	8007140 <__sflush_r+0xb8>
 80070e6:	4a2a      	ldr	r2, [pc, #168]	; (8007190 <__sflush_r+0x108>)
 80070e8:	40ca      	lsrs	r2, r1
 80070ea:	07d6      	lsls	r6, r2, #31
 80070ec:	d528      	bpl.n	8007140 <__sflush_r+0xb8>
 80070ee:	2200      	movs	r2, #0
 80070f0:	6062      	str	r2, [r4, #4]
 80070f2:	6922      	ldr	r2, [r4, #16]
 80070f4:	04d9      	lsls	r1, r3, #19
 80070f6:	6022      	str	r2, [r4, #0]
 80070f8:	d504      	bpl.n	8007104 <__sflush_r+0x7c>
 80070fa:	1c42      	adds	r2, r0, #1
 80070fc:	d101      	bne.n	8007102 <__sflush_r+0x7a>
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	b903      	cbnz	r3, 8007104 <__sflush_r+0x7c>
 8007102:	6560      	str	r0, [r4, #84]	; 0x54
 8007104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007106:	602f      	str	r7, [r5, #0]
 8007108:	2900      	cmp	r1, #0
 800710a:	d0ca      	beq.n	80070a2 <__sflush_r+0x1a>
 800710c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007110:	4299      	cmp	r1, r3
 8007112:	d002      	beq.n	800711a <__sflush_r+0x92>
 8007114:	4628      	mov	r0, r5
 8007116:	f7ff fae9 	bl	80066ec <_free_r>
 800711a:	2000      	movs	r0, #0
 800711c:	6360      	str	r0, [r4, #52]	; 0x34
 800711e:	e7c1      	b.n	80070a4 <__sflush_r+0x1c>
 8007120:	6a21      	ldr	r1, [r4, #32]
 8007122:	2301      	movs	r3, #1
 8007124:	4628      	mov	r0, r5
 8007126:	47b0      	blx	r6
 8007128:	1c41      	adds	r1, r0, #1
 800712a:	d1c7      	bne.n	80070bc <__sflush_r+0x34>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0c4      	beq.n	80070bc <__sflush_r+0x34>
 8007132:	2b1d      	cmp	r3, #29
 8007134:	d001      	beq.n	800713a <__sflush_r+0xb2>
 8007136:	2b16      	cmp	r3, #22
 8007138:	d101      	bne.n	800713e <__sflush_r+0xb6>
 800713a:	602f      	str	r7, [r5, #0]
 800713c:	e7b1      	b.n	80070a2 <__sflush_r+0x1a>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	e7ad      	b.n	80070a4 <__sflush_r+0x1c>
 8007148:	690f      	ldr	r7, [r1, #16]
 800714a:	2f00      	cmp	r7, #0
 800714c:	d0a9      	beq.n	80070a2 <__sflush_r+0x1a>
 800714e:	0793      	lsls	r3, r2, #30
 8007150:	bf18      	it	ne
 8007152:	2300      	movne	r3, #0
 8007154:	680e      	ldr	r6, [r1, #0]
 8007156:	bf08      	it	eq
 8007158:	694b      	ldreq	r3, [r1, #20]
 800715a:	eba6 0807 	sub.w	r8, r6, r7
 800715e:	600f      	str	r7, [r1, #0]
 8007160:	608b      	str	r3, [r1, #8]
 8007162:	f1b8 0f00 	cmp.w	r8, #0
 8007166:	dd9c      	ble.n	80070a2 <__sflush_r+0x1a>
 8007168:	4643      	mov	r3, r8
 800716a:	463a      	mov	r2, r7
 800716c:	4628      	mov	r0, r5
 800716e:	6a21      	ldr	r1, [r4, #32]
 8007170:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007172:	47b0      	blx	r6
 8007174:	2800      	cmp	r0, #0
 8007176:	dc06      	bgt.n	8007186 <__sflush_r+0xfe>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	e78e      	b.n	80070a4 <__sflush_r+0x1c>
 8007186:	4407      	add	r7, r0
 8007188:	eba8 0800 	sub.w	r8, r8, r0
 800718c:	e7e9      	b.n	8007162 <__sflush_r+0xda>
 800718e:	bf00      	nop
 8007190:	20400001 	.word	0x20400001

08007194 <_fflush_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	690b      	ldr	r3, [r1, #16]
 8007198:	4605      	mov	r5, r0
 800719a:	460c      	mov	r4, r1
 800719c:	b913      	cbnz	r3, 80071a4 <_fflush_r+0x10>
 800719e:	2500      	movs	r5, #0
 80071a0:	4628      	mov	r0, r5
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	b118      	cbz	r0, 80071ae <_fflush_r+0x1a>
 80071a6:	6983      	ldr	r3, [r0, #24]
 80071a8:	b90b      	cbnz	r3, 80071ae <_fflush_r+0x1a>
 80071aa:	f000 f887 	bl	80072bc <__sinit>
 80071ae:	4b14      	ldr	r3, [pc, #80]	; (8007200 <_fflush_r+0x6c>)
 80071b0:	429c      	cmp	r4, r3
 80071b2:	d11b      	bne.n	80071ec <_fflush_r+0x58>
 80071b4:	686c      	ldr	r4, [r5, #4]
 80071b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ef      	beq.n	800719e <_fflush_r+0xa>
 80071be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071c0:	07d0      	lsls	r0, r2, #31
 80071c2:	d404      	bmi.n	80071ce <_fflush_r+0x3a>
 80071c4:	0599      	lsls	r1, r3, #22
 80071c6:	d402      	bmi.n	80071ce <_fflush_r+0x3a>
 80071c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ca:	f000 f915 	bl	80073f8 <__retarget_lock_acquire_recursive>
 80071ce:	4628      	mov	r0, r5
 80071d0:	4621      	mov	r1, r4
 80071d2:	f7ff ff59 	bl	8007088 <__sflush_r>
 80071d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071d8:	4605      	mov	r5, r0
 80071da:	07da      	lsls	r2, r3, #31
 80071dc:	d4e0      	bmi.n	80071a0 <_fflush_r+0xc>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	059b      	lsls	r3, r3, #22
 80071e2:	d4dd      	bmi.n	80071a0 <_fflush_r+0xc>
 80071e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e6:	f000 f908 	bl	80073fa <__retarget_lock_release_recursive>
 80071ea:	e7d9      	b.n	80071a0 <_fflush_r+0xc>
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <_fflush_r+0x70>)
 80071ee:	429c      	cmp	r4, r3
 80071f0:	d101      	bne.n	80071f6 <_fflush_r+0x62>
 80071f2:	68ac      	ldr	r4, [r5, #8]
 80071f4:	e7df      	b.n	80071b6 <_fflush_r+0x22>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <_fflush_r+0x74>)
 80071f8:	429c      	cmp	r4, r3
 80071fa:	bf08      	it	eq
 80071fc:	68ec      	ldreq	r4, [r5, #12]
 80071fe:	e7da      	b.n	80071b6 <_fflush_r+0x22>
 8007200:	08007d84 	.word	0x08007d84
 8007204:	08007da4 	.word	0x08007da4
 8007208:	08007d64 	.word	0x08007d64

0800720c <std>:
 800720c:	2300      	movs	r3, #0
 800720e:	b510      	push	{r4, lr}
 8007210:	4604      	mov	r4, r0
 8007212:	e9c0 3300 	strd	r3, r3, [r0]
 8007216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800721a:	6083      	str	r3, [r0, #8]
 800721c:	8181      	strh	r1, [r0, #12]
 800721e:	6643      	str	r3, [r0, #100]	; 0x64
 8007220:	81c2      	strh	r2, [r0, #14]
 8007222:	6183      	str	r3, [r0, #24]
 8007224:	4619      	mov	r1, r3
 8007226:	2208      	movs	r2, #8
 8007228:	305c      	adds	r0, #92	; 0x5c
 800722a:	f7fd fba1 	bl	8004970 <memset>
 800722e:	4b05      	ldr	r3, [pc, #20]	; (8007244 <std+0x38>)
 8007230:	6224      	str	r4, [r4, #32]
 8007232:	6263      	str	r3, [r4, #36]	; 0x24
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <std+0x3c>)
 8007236:	62a3      	str	r3, [r4, #40]	; 0x28
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <std+0x40>)
 800723a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <std+0x44>)
 800723e:	6323      	str	r3, [r4, #48]	; 0x30
 8007240:	bd10      	pop	{r4, pc}
 8007242:	bf00      	nop
 8007244:	0800755d 	.word	0x0800755d
 8007248:	0800757f 	.word	0x0800757f
 800724c:	080075b7 	.word	0x080075b7
 8007250:	080075db 	.word	0x080075db

08007254 <_cleanup_r>:
 8007254:	4901      	ldr	r1, [pc, #4]	; (800725c <_cleanup_r+0x8>)
 8007256:	f000 b8af 	b.w	80073b8 <_fwalk_reent>
 800725a:	bf00      	nop
 800725c:	08007195 	.word	0x08007195

08007260 <__sfmoreglue>:
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	2568      	movs	r5, #104	; 0x68
 8007264:	1e4a      	subs	r2, r1, #1
 8007266:	4355      	muls	r5, r2
 8007268:	460e      	mov	r6, r1
 800726a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800726e:	f7ff fa89 	bl	8006784 <_malloc_r>
 8007272:	4604      	mov	r4, r0
 8007274:	b140      	cbz	r0, 8007288 <__sfmoreglue+0x28>
 8007276:	2100      	movs	r1, #0
 8007278:	e9c0 1600 	strd	r1, r6, [r0]
 800727c:	300c      	adds	r0, #12
 800727e:	60a0      	str	r0, [r4, #8]
 8007280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007284:	f7fd fb74 	bl	8004970 <memset>
 8007288:	4620      	mov	r0, r4
 800728a:	bd70      	pop	{r4, r5, r6, pc}

0800728c <__sfp_lock_acquire>:
 800728c:	4801      	ldr	r0, [pc, #4]	; (8007294 <__sfp_lock_acquire+0x8>)
 800728e:	f000 b8b3 	b.w	80073f8 <__retarget_lock_acquire_recursive>
 8007292:	bf00      	nop
 8007294:	20000590 	.word	0x20000590

08007298 <__sfp_lock_release>:
 8007298:	4801      	ldr	r0, [pc, #4]	; (80072a0 <__sfp_lock_release+0x8>)
 800729a:	f000 b8ae 	b.w	80073fa <__retarget_lock_release_recursive>
 800729e:	bf00      	nop
 80072a0:	20000590 	.word	0x20000590

080072a4 <__sinit_lock_acquire>:
 80072a4:	4801      	ldr	r0, [pc, #4]	; (80072ac <__sinit_lock_acquire+0x8>)
 80072a6:	f000 b8a7 	b.w	80073f8 <__retarget_lock_acquire_recursive>
 80072aa:	bf00      	nop
 80072ac:	2000058b 	.word	0x2000058b

080072b0 <__sinit_lock_release>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__sinit_lock_release+0x8>)
 80072b2:	f000 b8a2 	b.w	80073fa <__retarget_lock_release_recursive>
 80072b6:	bf00      	nop
 80072b8:	2000058b 	.word	0x2000058b

080072bc <__sinit>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	4604      	mov	r4, r0
 80072c0:	f7ff fff0 	bl	80072a4 <__sinit_lock_acquire>
 80072c4:	69a3      	ldr	r3, [r4, #24]
 80072c6:	b11b      	cbz	r3, 80072d0 <__sinit+0x14>
 80072c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072cc:	f7ff bff0 	b.w	80072b0 <__sinit_lock_release>
 80072d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072d4:	6523      	str	r3, [r4, #80]	; 0x50
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <__sinit+0x68>)
 80072d8:	4a13      	ldr	r2, [pc, #76]	; (8007328 <__sinit+0x6c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80072de:	42a3      	cmp	r3, r4
 80072e0:	bf08      	it	eq
 80072e2:	2301      	moveq	r3, #1
 80072e4:	4620      	mov	r0, r4
 80072e6:	bf08      	it	eq
 80072e8:	61a3      	streq	r3, [r4, #24]
 80072ea:	f000 f81f 	bl	800732c <__sfp>
 80072ee:	6060      	str	r0, [r4, #4]
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 f81b 	bl	800732c <__sfp>
 80072f6:	60a0      	str	r0, [r4, #8]
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 f817 	bl	800732c <__sfp>
 80072fe:	2200      	movs	r2, #0
 8007300:	2104      	movs	r1, #4
 8007302:	60e0      	str	r0, [r4, #12]
 8007304:	6860      	ldr	r0, [r4, #4]
 8007306:	f7ff ff81 	bl	800720c <std>
 800730a:	2201      	movs	r2, #1
 800730c:	2109      	movs	r1, #9
 800730e:	68a0      	ldr	r0, [r4, #8]
 8007310:	f7ff ff7c 	bl	800720c <std>
 8007314:	2202      	movs	r2, #2
 8007316:	2112      	movs	r1, #18
 8007318:	68e0      	ldr	r0, [r4, #12]
 800731a:	f7ff ff77 	bl	800720c <std>
 800731e:	2301      	movs	r3, #1
 8007320:	61a3      	str	r3, [r4, #24]
 8007322:	e7d1      	b.n	80072c8 <__sinit+0xc>
 8007324:	080079e0 	.word	0x080079e0
 8007328:	08007255 	.word	0x08007255

0800732c <__sfp>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	4607      	mov	r7, r0
 8007330:	f7ff ffac 	bl	800728c <__sfp_lock_acquire>
 8007334:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <__sfp+0x84>)
 8007336:	681e      	ldr	r6, [r3, #0]
 8007338:	69b3      	ldr	r3, [r6, #24]
 800733a:	b913      	cbnz	r3, 8007342 <__sfp+0x16>
 800733c:	4630      	mov	r0, r6
 800733e:	f7ff ffbd 	bl	80072bc <__sinit>
 8007342:	3648      	adds	r6, #72	; 0x48
 8007344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007348:	3b01      	subs	r3, #1
 800734a:	d503      	bpl.n	8007354 <__sfp+0x28>
 800734c:	6833      	ldr	r3, [r6, #0]
 800734e:	b30b      	cbz	r3, 8007394 <__sfp+0x68>
 8007350:	6836      	ldr	r6, [r6, #0]
 8007352:	e7f7      	b.n	8007344 <__sfp+0x18>
 8007354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007358:	b9d5      	cbnz	r5, 8007390 <__sfp+0x64>
 800735a:	4b16      	ldr	r3, [pc, #88]	; (80073b4 <__sfp+0x88>)
 800735c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007360:	60e3      	str	r3, [r4, #12]
 8007362:	6665      	str	r5, [r4, #100]	; 0x64
 8007364:	f000 f847 	bl	80073f6 <__retarget_lock_init_recursive>
 8007368:	f7ff ff96 	bl	8007298 <__sfp_lock_release>
 800736c:	2208      	movs	r2, #8
 800736e:	4629      	mov	r1, r5
 8007370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007378:	6025      	str	r5, [r4, #0]
 800737a:	61a5      	str	r5, [r4, #24]
 800737c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007380:	f7fd faf6 	bl	8004970 <memset>
 8007384:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007388:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800738c:	4620      	mov	r0, r4
 800738e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007390:	3468      	adds	r4, #104	; 0x68
 8007392:	e7d9      	b.n	8007348 <__sfp+0x1c>
 8007394:	2104      	movs	r1, #4
 8007396:	4638      	mov	r0, r7
 8007398:	f7ff ff62 	bl	8007260 <__sfmoreglue>
 800739c:	4604      	mov	r4, r0
 800739e:	6030      	str	r0, [r6, #0]
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d1d5      	bne.n	8007350 <__sfp+0x24>
 80073a4:	f7ff ff78 	bl	8007298 <__sfp_lock_release>
 80073a8:	230c      	movs	r3, #12
 80073aa:	603b      	str	r3, [r7, #0]
 80073ac:	e7ee      	b.n	800738c <__sfp+0x60>
 80073ae:	bf00      	nop
 80073b0:	080079e0 	.word	0x080079e0
 80073b4:	ffff0001 	.word	0xffff0001

080073b8 <_fwalk_reent>:
 80073b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073bc:	4606      	mov	r6, r0
 80073be:	4688      	mov	r8, r1
 80073c0:	2700      	movs	r7, #0
 80073c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073ca:	f1b9 0901 	subs.w	r9, r9, #1
 80073ce:	d505      	bpl.n	80073dc <_fwalk_reent+0x24>
 80073d0:	6824      	ldr	r4, [r4, #0]
 80073d2:	2c00      	cmp	r4, #0
 80073d4:	d1f7      	bne.n	80073c6 <_fwalk_reent+0xe>
 80073d6:	4638      	mov	r0, r7
 80073d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073dc:	89ab      	ldrh	r3, [r5, #12]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d907      	bls.n	80073f2 <_fwalk_reent+0x3a>
 80073e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e6:	3301      	adds	r3, #1
 80073e8:	d003      	beq.n	80073f2 <_fwalk_reent+0x3a>
 80073ea:	4629      	mov	r1, r5
 80073ec:	4630      	mov	r0, r6
 80073ee:	47c0      	blx	r8
 80073f0:	4307      	orrs	r7, r0
 80073f2:	3568      	adds	r5, #104	; 0x68
 80073f4:	e7e9      	b.n	80073ca <_fwalk_reent+0x12>

080073f6 <__retarget_lock_init_recursive>:
 80073f6:	4770      	bx	lr

080073f8 <__retarget_lock_acquire_recursive>:
 80073f8:	4770      	bx	lr

080073fa <__retarget_lock_release_recursive>:
 80073fa:	4770      	bx	lr

080073fc <__swhatbuf_r>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	460e      	mov	r6, r1
 8007400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007404:	4614      	mov	r4, r2
 8007406:	2900      	cmp	r1, #0
 8007408:	461d      	mov	r5, r3
 800740a:	b096      	sub	sp, #88	; 0x58
 800740c:	da07      	bge.n	800741e <__swhatbuf_r+0x22>
 800740e:	2300      	movs	r3, #0
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	89b3      	ldrh	r3, [r6, #12]
 8007414:	061a      	lsls	r2, r3, #24
 8007416:	d410      	bmi.n	800743a <__swhatbuf_r+0x3e>
 8007418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741c:	e00e      	b.n	800743c <__swhatbuf_r+0x40>
 800741e:	466a      	mov	r2, sp
 8007420:	f000 f902 	bl	8007628 <_fstat_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	dbf2      	blt.n	800740e <__swhatbuf_r+0x12>
 8007428:	9a01      	ldr	r2, [sp, #4]
 800742a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800742e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007432:	425a      	negs	r2, r3
 8007434:	415a      	adcs	r2, r3
 8007436:	602a      	str	r2, [r5, #0]
 8007438:	e7ee      	b.n	8007418 <__swhatbuf_r+0x1c>
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	2000      	movs	r0, #0
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	b016      	add	sp, #88	; 0x58
 8007442:	bd70      	pop	{r4, r5, r6, pc}

08007444 <__smakebuf_r>:
 8007444:	898b      	ldrh	r3, [r1, #12]
 8007446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007448:	079d      	lsls	r5, r3, #30
 800744a:	4606      	mov	r6, r0
 800744c:	460c      	mov	r4, r1
 800744e:	d507      	bpl.n	8007460 <__smakebuf_r+0x1c>
 8007450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	2301      	movs	r3, #1
 800745a:	6163      	str	r3, [r4, #20]
 800745c:	b002      	add	sp, #8
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	466a      	mov	r2, sp
 8007462:	ab01      	add	r3, sp, #4
 8007464:	f7ff ffca 	bl	80073fc <__swhatbuf_r>
 8007468:	9900      	ldr	r1, [sp, #0]
 800746a:	4605      	mov	r5, r0
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff f989 	bl	8006784 <_malloc_r>
 8007472:	b948      	cbnz	r0, 8007488 <__smakebuf_r+0x44>
 8007474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007478:	059a      	lsls	r2, r3, #22
 800747a:	d4ef      	bmi.n	800745c <__smakebuf_r+0x18>
 800747c:	f023 0303 	bic.w	r3, r3, #3
 8007480:	f043 0302 	orr.w	r3, r3, #2
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	e7e3      	b.n	8007450 <__smakebuf_r+0xc>
 8007488:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <__smakebuf_r+0x7c>)
 800748a:	62b3      	str	r3, [r6, #40]	; 0x28
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	6020      	str	r0, [r4, #0]
 8007490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	6120      	str	r0, [r4, #16]
 800749a:	6163      	str	r3, [r4, #20]
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	b15b      	cbz	r3, 80074b8 <__smakebuf_r+0x74>
 80074a0:	4630      	mov	r0, r6
 80074a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a6:	f000 f8d1 	bl	800764c <_isatty_r>
 80074aa:	b128      	cbz	r0, 80074b8 <__smakebuf_r+0x74>
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	f043 0301 	orr.w	r3, r3, #1
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	89a0      	ldrh	r0, [r4, #12]
 80074ba:	4305      	orrs	r5, r0
 80074bc:	81a5      	strh	r5, [r4, #12]
 80074be:	e7cd      	b.n	800745c <__smakebuf_r+0x18>
 80074c0:	08007255 	.word	0x08007255

080074c4 <_malloc_usable_size_r>:
 80074c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c8:	1f18      	subs	r0, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfbc      	itt	lt
 80074ce:	580b      	ldrlt	r3, [r1, r0]
 80074d0:	18c0      	addlt	r0, r0, r3
 80074d2:	4770      	bx	lr

080074d4 <_raise_r>:
 80074d4:	291f      	cmp	r1, #31
 80074d6:	b538      	push	{r3, r4, r5, lr}
 80074d8:	4604      	mov	r4, r0
 80074da:	460d      	mov	r5, r1
 80074dc:	d904      	bls.n	80074e8 <_raise_r+0x14>
 80074de:	2316      	movs	r3, #22
 80074e0:	6003      	str	r3, [r0, #0]
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074ea:	b112      	cbz	r2, 80074f2 <_raise_r+0x1e>
 80074ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074f0:	b94b      	cbnz	r3, 8007506 <_raise_r+0x32>
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 f830 	bl	8007558 <_getpid_r>
 80074f8:	462a      	mov	r2, r5
 80074fa:	4601      	mov	r1, r0
 80074fc:	4620      	mov	r0, r4
 80074fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007502:	f000 b817 	b.w	8007534 <_kill_r>
 8007506:	2b01      	cmp	r3, #1
 8007508:	d00a      	beq.n	8007520 <_raise_r+0x4c>
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	d103      	bne.n	8007516 <_raise_r+0x42>
 800750e:	2316      	movs	r3, #22
 8007510:	6003      	str	r3, [r0, #0]
 8007512:	2001      	movs	r0, #1
 8007514:	e7e7      	b.n	80074e6 <_raise_r+0x12>
 8007516:	2400      	movs	r4, #0
 8007518:	4628      	mov	r0, r5
 800751a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800751e:	4798      	blx	r3
 8007520:	2000      	movs	r0, #0
 8007522:	e7e0      	b.n	80074e6 <_raise_r+0x12>

08007524 <raise>:
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <raise+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f7ff bfd3 	b.w	80074d4 <_raise_r>
 800752e:	bf00      	nop
 8007530:	20000020 	.word	0x20000020

08007534 <_kill_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	2300      	movs	r3, #0
 8007538:	4d06      	ldr	r5, [pc, #24]	; (8007554 <_kill_r+0x20>)
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	4611      	mov	r1, r2
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	f7f9 fd6c 	bl	800101e <_kill>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d102      	bne.n	8007550 <_kill_r+0x1c>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	b103      	cbz	r3, 8007550 <_kill_r+0x1c>
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	bd38      	pop	{r3, r4, r5, pc}
 8007552:	bf00      	nop
 8007554:	20000584 	.word	0x20000584

08007558 <_getpid_r>:
 8007558:	f7f9 bd5a 	b.w	8001010 <_getpid>

0800755c <__sread>:
 800755c:	b510      	push	{r4, lr}
 800755e:	460c      	mov	r4, r1
 8007560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007564:	f000 f894 	bl	8007690 <_read_r>
 8007568:	2800      	cmp	r0, #0
 800756a:	bfab      	itete	ge
 800756c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800756e:	89a3      	ldrhlt	r3, [r4, #12]
 8007570:	181b      	addge	r3, r3, r0
 8007572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007576:	bfac      	ite	ge
 8007578:	6563      	strge	r3, [r4, #84]	; 0x54
 800757a:	81a3      	strhlt	r3, [r4, #12]
 800757c:	bd10      	pop	{r4, pc}

0800757e <__swrite>:
 800757e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007582:	461f      	mov	r7, r3
 8007584:	898b      	ldrh	r3, [r1, #12]
 8007586:	4605      	mov	r5, r0
 8007588:	05db      	lsls	r3, r3, #23
 800758a:	460c      	mov	r4, r1
 800758c:	4616      	mov	r6, r2
 800758e:	d505      	bpl.n	800759c <__swrite+0x1e>
 8007590:	2302      	movs	r3, #2
 8007592:	2200      	movs	r2, #0
 8007594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007598:	f000 f868 	bl	800766c <_lseek_r>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	4632      	mov	r2, r6
 80075a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	4628      	mov	r0, r5
 80075a8:	463b      	mov	r3, r7
 80075aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b2:	f000 b817 	b.w	80075e4 <_write_r>

080075b6 <__sseek>:
 80075b6:	b510      	push	{r4, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075be:	f000 f855 	bl	800766c <_lseek_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	bf15      	itete	ne
 80075c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80075ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075d2:	81a3      	strheq	r3, [r4, #12]
 80075d4:	bf18      	it	ne
 80075d6:	81a3      	strhne	r3, [r4, #12]
 80075d8:	bd10      	pop	{r4, pc}

080075da <__sclose>:
 80075da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075de:	f000 b813 	b.w	8007608 <_close_r>
	...

080075e4 <_write_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	4608      	mov	r0, r1
 80075ea:	4611      	mov	r1, r2
 80075ec:	2200      	movs	r2, #0
 80075ee:	4d05      	ldr	r5, [pc, #20]	; (8007604 <_write_r+0x20>)
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7f9 fd4a 	bl	800108c <_write>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_write_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_write_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000584 	.word	0x20000584

08007608 <_close_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	2300      	movs	r3, #0
 800760c:	4d05      	ldr	r5, [pc, #20]	; (8007624 <_close_r+0x1c>)
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	f7f9 fd56 	bl	80010c4 <_close>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d102      	bne.n	8007622 <_close_r+0x1a>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b103      	cbz	r3, 8007622 <_close_r+0x1a>
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	20000584 	.word	0x20000584

08007628 <_fstat_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	2300      	movs	r3, #0
 800762c:	4d06      	ldr	r5, [pc, #24]	; (8007648 <_fstat_r+0x20>)
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	4611      	mov	r1, r2
 8007634:	602b      	str	r3, [r5, #0]
 8007636:	f7f9 fd50 	bl	80010da <_fstat>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d102      	bne.n	8007644 <_fstat_r+0x1c>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	b103      	cbz	r3, 8007644 <_fstat_r+0x1c>
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	bf00      	nop
 8007648:	20000584 	.word	0x20000584

0800764c <_isatty_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	2300      	movs	r3, #0
 8007650:	4d05      	ldr	r5, [pc, #20]	; (8007668 <_isatty_r+0x1c>)
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	602b      	str	r3, [r5, #0]
 8007658:	f7f9 fd4e 	bl	80010f8 <_isatty>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_isatty_r+0x1a>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_isatty_r+0x1a>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000584 	.word	0x20000584

0800766c <_lseek_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	4608      	mov	r0, r1
 8007672:	4611      	mov	r1, r2
 8007674:	2200      	movs	r2, #0
 8007676:	4d05      	ldr	r5, [pc, #20]	; (800768c <_lseek_r+0x20>)
 8007678:	602a      	str	r2, [r5, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	f7f9 fd46 	bl	800110c <_lseek>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_lseek_r+0x1e>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_lseek_r+0x1e>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	20000584 	.word	0x20000584

08007690 <_read_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	4611      	mov	r1, r2
 8007698:	2200      	movs	r2, #0
 800769a:	4d05      	ldr	r5, [pc, #20]	; (80076b0 <_read_r+0x20>)
 800769c:	602a      	str	r2, [r5, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	f7f9 fcd7 	bl	8001052 <_read>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_read_r+0x1e>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_read_r+0x1e>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20000584 	.word	0x20000584

080076b4 <_init>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr

080076c0 <_fini>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr
